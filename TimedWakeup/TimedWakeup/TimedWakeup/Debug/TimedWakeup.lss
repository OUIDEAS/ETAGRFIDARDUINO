
TimedWakeup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003788  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000074  00003788  00003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000048  20000000  000037fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000006b4  20000048  00003844  00020048  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005885c  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005bd6  00000000  00000000  00078925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005469  00000000  00000000  0007e4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d30  00000000  00000000  00083964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c40  00000000  00000000  00084694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000097f9  00000000  00000000  000852d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000102ac  00000000  00000000  0008eacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00081e12  00000000  00000000  0009ed79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c6c  00000000  00000000  00120b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stabstr      000000df  00000000  00000000  001237f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 91 04 00 00 89 04 00 00 89 04 00 00     ... ............
	...
      2c:	89 04 00 00 00 00 00 00 00 00 00 00 89 04 00 00     ................
      3c:	15 05 00 00 89 04 00 00 89 04 00 00 89 04 00 00     ................
      4c:	1d 01 00 00 35 15 00 00 89 04 00 00 89 04 00 00     ....5...........
      5c:	2d 05 00 00 89 04 00 00 69 22 00 00 89 04 00 00     -.......i"......
      6c:	89 04 00 00 89 04 00 00 89 04 00 00 81 22 00 00     ............."..
      7c:	89 04 00 00 89 04 00 00 89 04 00 00 89 04 00 00     ................
      8c:	89 04 00 00 00 00 00 00 89 04 00 00 89 04 00 00     ................
      9c:	89 04 00 00 89 04 00 00 89 04 00 00 89 04 00 00     ................
      ac:	89 04 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000048 	.word	0x20000048
      d4:	00000000 	.word	0x00000000
      d8:	00003784 	.word	0x00003784

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000004c 	.word	0x2000004c
     108:	00003784 	.word	0x00003784
     10c:	20000044 	.word	0x20000044
     110:	00000000 	.word	0x00000000

00000114 <_ZN7RTCZeroC1Ev>:

voidFuncPtr RTC_callBack = NULL;

RTCZero::RTCZero()
{
  _configured = false;
     114:	2300      	movs	r3, #0
     116:	7003      	strb	r3, [r0, #0]
}
     118:	4770      	bx	lr
	...

0000011c <RTC_Handler>:
  _configured = true;
}

void RTC_Handler(void)
{
  if (RTC_callBack != NULL) {
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <RTC_Handler+0x14>)
{
     11e:	b510      	push	{r4, lr}
  if (RTC_callBack != NULL) {
     120:	681b      	ldr	r3, [r3, #0]
     122:	2b00      	cmp	r3, #0
     124:	d000      	beq.n	128 <RTC_Handler+0xc>
    RTC_callBack();
     126:	4798      	blx	r3
  }

  RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM0; // must clear flag at end
     128:	2201      	movs	r2, #1
     12a:	4b02      	ldr	r3, [pc, #8]	; (134 <RTC_Handler+0x18>)
     12c:	721a      	strb	r2, [r3, #8]
}
     12e:	bd10      	pop	{r4, pc}
     130:	20000064 	.word	0x20000064
     134:	40001400 	.word	0x40001400

00000138 <_ZN7RTCZero11standbyModeEv>:

void RTCZero::standbyMode()
{
  // Entering standby mode when connected
  // via the native USB port causes issues.
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
     138:	2304      	movs	r3, #4
     13a:	4a03      	ldr	r2, [pc, #12]	; (148 <_ZN7RTCZero11standbyModeEv+0x10>)
     13c:	6911      	ldr	r1, [r2, #16]
     13e:	430b      	orrs	r3, r1
     140:	6113      	str	r3, [r2, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     142:	bf30      	wfi
  __WFI();
}
     144:	4770      	bx	lr
     146:	46c0      	nop			; (mov r8, r8)
     148:	e000ed00 	.word	0xe000ed00

0000014c <_ZN7RTCZero10setSecondsEh>:
 * Set Functions
 */

void RTCZero::setSeconds(uint8_t seconds)
{
  if (_configured) {
     14c:	7803      	ldrb	r3, [r0, #0]
{
     14e:	b510      	push	{r4, lr}
  if (_configured) {
     150:	2b00      	cmp	r3, #0
     152:	d00b      	beq.n	16c <_ZN7RTCZero10setSecondsEh+0x20>
    RTC->MODE2.CLOCK.bit.SECOND = seconds;
     154:	243f      	movs	r4, #63	; 0x3f
     156:	4b06      	ldr	r3, [pc, #24]	; (170 <_ZN7RTCZero10setSecondsEh+0x24>)
     158:	4021      	ands	r1, r4
     15a:	691a      	ldr	r2, [r3, #16]
     15c:	0008      	movs	r0, r1
     15e:	43a2      	bics	r2, r4
     160:	0011      	movs	r1, r2
     162:	4301      	orrs	r1, r0
     164:	6119      	str	r1, [r3, #16]
}

/* Wait for sync in write operations */
inline bool RTCZero::RTCisSyncing()
{
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     166:	7a9a      	ldrb	r2, [r3, #10]
     168:	09d2      	lsrs	r2, r2, #7
    while (RTCisSyncing())
     16a:	d1fc      	bne.n	166 <_ZN7RTCZero10setSecondsEh+0x1a>
}
     16c:	bd10      	pop	{r4, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	40001400 	.word	0x40001400

00000174 <_ZN7RTCZero10setMinutesEh>:
  if (_configured) {
     174:	7803      	ldrb	r3, [r0, #0]
     176:	2b00      	cmp	r3, #0
     178:	d00b      	beq.n	192 <_ZN7RTCZero10setMinutesEh+0x1e>
    RTC->MODE2.CLOCK.bit.MINUTE = minutes;
     17a:	203f      	movs	r0, #63	; 0x3f
     17c:	4b05      	ldr	r3, [pc, #20]	; (194 <_ZN7RTCZero10setMinutesEh+0x20>)
     17e:	4008      	ands	r0, r1
     180:	691a      	ldr	r2, [r3, #16]
     182:	4905      	ldr	r1, [pc, #20]	; (198 <_ZN7RTCZero10setMinutesEh+0x24>)
     184:	0180      	lsls	r0, r0, #6
     186:	4011      	ands	r1, r2
     188:	4301      	orrs	r1, r0
     18a:	6119      	str	r1, [r3, #16]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     18c:	7a9a      	ldrb	r2, [r3, #10]
     18e:	09d2      	lsrs	r2, r2, #7
    while (RTCisSyncing())
     190:	d1fc      	bne.n	18c <_ZN7RTCZero10setMinutesEh+0x18>
}
     192:	4770      	bx	lr
     194:	40001400 	.word	0x40001400
     198:	fffff03f 	.word	0xfffff03f

0000019c <_ZN7RTCZero8setHoursEh>:
  if (_configured) {
     19c:	7803      	ldrb	r3, [r0, #0]
     19e:	2b00      	cmp	r3, #0
     1a0:	d00b      	beq.n	1ba <_ZN7RTCZero8setHoursEh+0x1e>
    RTC->MODE2.CLOCK.bit.HOUR = hours;
     1a2:	201f      	movs	r0, #31
     1a4:	4b05      	ldr	r3, [pc, #20]	; (1bc <_ZN7RTCZero8setHoursEh+0x20>)
     1a6:	4008      	ands	r0, r1
     1a8:	691a      	ldr	r2, [r3, #16]
     1aa:	4905      	ldr	r1, [pc, #20]	; (1c0 <_ZN7RTCZero8setHoursEh+0x24>)
     1ac:	0300      	lsls	r0, r0, #12
     1ae:	4011      	ands	r1, r2
     1b0:	4301      	orrs	r1, r0
     1b2:	6119      	str	r1, [r3, #16]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     1b4:	7a9a      	ldrb	r2, [r3, #10]
     1b6:	09d2      	lsrs	r2, r2, #7
    while (RTCisSyncing())
     1b8:	d1fc      	bne.n	1b4 <_ZN7RTCZero8setHoursEh+0x18>
}
     1ba:	4770      	bx	lr
     1bc:	40001400 	.word	0x40001400
     1c0:	fffe0fff 	.word	0xfffe0fff

000001c4 <_ZN7RTCZero7setTimeEhhh>:
{
     1c4:	b570      	push	{r4, r5, r6, lr}
     1c6:	0016      	movs	r6, r2
  if (_configured) {
     1c8:	7802      	ldrb	r2, [r0, #0]
{
     1ca:	0004      	movs	r4, r0
     1cc:	000d      	movs	r5, r1
  if (_configured) {
     1ce:	2a00      	cmp	r2, #0
     1d0:	d00a      	beq.n	1e8 <_ZN7RTCZero7setTimeEhhh+0x24>
    setSeconds(seconds);
     1d2:	0019      	movs	r1, r3
     1d4:	f7ff ffba 	bl	14c <_ZN7RTCZero10setSecondsEh>
    setMinutes(minutes);
     1d8:	0031      	movs	r1, r6
     1da:	0020      	movs	r0, r4
     1dc:	f7ff ffca 	bl	174 <_ZN7RTCZero10setMinutesEh>
    setHours(hours);
     1e0:	0029      	movs	r1, r5
     1e2:	0020      	movs	r0, r4
     1e4:	f7ff ffda 	bl	19c <_ZN7RTCZero8setHoursEh>
}
     1e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000001ec <_ZN7RTCZero6setDayEh>:
  if (_configured) {
     1ec:	7803      	ldrb	r3, [r0, #0]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d00b      	beq.n	20a <_ZN7RTCZero6setDayEh+0x1e>
    RTC->MODE2.CLOCK.bit.DAY = day;
     1f2:	201f      	movs	r0, #31
     1f4:	4b05      	ldr	r3, [pc, #20]	; (20c <_ZN7RTCZero6setDayEh+0x20>)
     1f6:	4008      	ands	r0, r1
     1f8:	691a      	ldr	r2, [r3, #16]
     1fa:	4905      	ldr	r1, [pc, #20]	; (210 <_ZN7RTCZero6setDayEh+0x24>)
     1fc:	0440      	lsls	r0, r0, #17
     1fe:	4011      	ands	r1, r2
     200:	4301      	orrs	r1, r0
     202:	6119      	str	r1, [r3, #16]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     204:	7a9a      	ldrb	r2, [r3, #10]
     206:	09d2      	lsrs	r2, r2, #7
    while (RTCisSyncing())
     208:	d1fc      	bne.n	204 <_ZN7RTCZero6setDayEh+0x18>
}
     20a:	4770      	bx	lr
     20c:	40001400 	.word	0x40001400
     210:	ffc1ffff 	.word	0xffc1ffff

00000214 <_ZN7RTCZero8setMonthEh>:
  if (_configured) {
     214:	7803      	ldrb	r3, [r0, #0]
     216:	2b00      	cmp	r3, #0
     218:	d00b      	beq.n	232 <_ZN7RTCZero8setMonthEh+0x1e>
    RTC->MODE2.CLOCK.bit.MONTH = month;
     21a:	200f      	movs	r0, #15
     21c:	4b05      	ldr	r3, [pc, #20]	; (234 <_ZN7RTCZero8setMonthEh+0x20>)
     21e:	4008      	ands	r0, r1
     220:	691a      	ldr	r2, [r3, #16]
     222:	4905      	ldr	r1, [pc, #20]	; (238 <_ZN7RTCZero8setMonthEh+0x24>)
     224:	0580      	lsls	r0, r0, #22
     226:	4011      	ands	r1, r2
     228:	4301      	orrs	r1, r0
     22a:	6119      	str	r1, [r3, #16]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     22c:	7a9a      	ldrb	r2, [r3, #10]
     22e:	09d2      	lsrs	r2, r2, #7
    while (RTCisSyncing())
     230:	d1fc      	bne.n	22c <_ZN7RTCZero8setMonthEh+0x18>
}
     232:	4770      	bx	lr
     234:	40001400 	.word	0x40001400
     238:	fc3fffff 	.word	0xfc3fffff

0000023c <_ZN7RTCZero7setYearEh>:
  if (_configured) {
     23c:	7803      	ldrb	r3, [r0, #0]
     23e:	2b00      	cmp	r3, #0
     240:	d009      	beq.n	256 <_ZN7RTCZero7setYearEh+0x1a>
    RTC->MODE2.CLOCK.bit.YEAR = year;
     242:	4a05      	ldr	r2, [pc, #20]	; (258 <_ZN7RTCZero7setYearEh+0x1c>)
     244:	0688      	lsls	r0, r1, #26
     246:	6913      	ldr	r3, [r2, #16]
     248:	0199      	lsls	r1, r3, #6
     24a:	0989      	lsrs	r1, r1, #6
     24c:	4301      	orrs	r1, r0
     24e:	6111      	str	r1, [r2, #16]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     250:	7a93      	ldrb	r3, [r2, #10]
     252:	09db      	lsrs	r3, r3, #7
    while (RTCisSyncing())
     254:	d1fc      	bne.n	250 <_ZN7RTCZero7setYearEh+0x14>
}
     256:	4770      	bx	lr
     258:	40001400 	.word	0x40001400

0000025c <_ZN7RTCZero7setDateEhhh>:
{
     25c:	b570      	push	{r4, r5, r6, lr}
     25e:	001d      	movs	r5, r3
  if (_configured) {
     260:	7803      	ldrb	r3, [r0, #0]
{
     262:	0004      	movs	r4, r0
     264:	0016      	movs	r6, r2
  if (_configured) {
     266:	2b00      	cmp	r3, #0
     268:	d009      	beq.n	27e <_ZN7RTCZero7setDateEhhh+0x22>
    setDay(day);
     26a:	f7ff ffbf 	bl	1ec <_ZN7RTCZero6setDayEh>
    setMonth(month);
     26e:	0031      	movs	r1, r6
     270:	0020      	movs	r0, r4
     272:	f7ff ffcf 	bl	214 <_ZN7RTCZero8setMonthEh>
    setYear(year);
     276:	0029      	movs	r1, r5
     278:	0020      	movs	r0, r4
     27a:	f7ff ffdf 	bl	23c <_ZN7RTCZero7setYearEh>
}
     27e:	bd70      	pop	{r4, r5, r6, pc}

00000280 <_ZN7RTCZero14configureClockEv>:
  GCLK->GENDIV.reg = GCLK_GENDIV_ID(2)|GCLK_GENDIV_DIV(4);
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <_ZN7RTCZero14configureClockEv+0x28>)
     282:	4a0a      	ldr	r2, [pc, #40]	; (2ac <_ZN7RTCZero14configureClockEv+0x2c>)
     284:	609a      	str	r2, [r3, #8]
  while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY)
     286:	785a      	ldrb	r2, [r3, #1]
     288:	b252      	sxtb	r2, r2
     28a:	2a00      	cmp	r2, #0
     28c:	dbfb      	blt.n	286 <_ZN7RTCZero14configureClockEv+0x6>
  GCLK->GENCTRL.reg = (GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC_XOSC32K | GCLK_GENCTRL_ID(2) | GCLK_GENCTRL_DIVSEL );
     28e:	4a08      	ldr	r2, [pc, #32]	; (2b0 <_ZN7RTCZero14configureClockEv+0x30>)
     290:	605a      	str	r2, [r3, #4]
  while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY)
     292:	785a      	ldrb	r2, [r3, #1]
     294:	b252      	sxtb	r2, r2
     296:	2a00      	cmp	r2, #0
     298:	dbfb      	blt.n	292 <_ZN7RTCZero14configureClockEv+0x12>
  GCLK->CLKCTRL.reg = (uint32_t)((GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK2 | (RTC_GCLK_ID << GCLK_CLKCTRL_ID_Pos)));
     29a:	4a06      	ldr	r2, [pc, #24]	; (2b4 <_ZN7RTCZero14configureClockEv+0x34>)
     29c:	805a      	strh	r2, [r3, #2]
  while (GCLK->STATUS.bit.SYNCBUSY)
     29e:	785a      	ldrb	r2, [r3, #1]
     2a0:	09d2      	lsrs	r2, r2, #7
     2a2:	d1fc      	bne.n	29e <_ZN7RTCZero14configureClockEv+0x1e>
}
     2a4:	4770      	bx	lr
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	40000c00 	.word	0x40000c00
     2ac:	00000402 	.word	0x00000402
     2b0:	00110502 	.word	0x00110502
     2b4:	00004204 	.word	0x00004204

000002b8 <_ZN7RTCZero10RTCdisableEv>:
}

void RTCZero::RTCdisable()
{
  RTC->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE; // disable RTC
     2b8:	2102      	movs	r1, #2
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <_ZN7RTCZero10RTCdisableEv+0x14>)
     2bc:	881a      	ldrh	r2, [r3, #0]
     2be:	438a      	bics	r2, r1
     2c0:	801a      	strh	r2, [r3, #0]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     2c2:	7a9a      	ldrb	r2, [r3, #10]
     2c4:	09d2      	lsrs	r2, r2, #7
  while (RTCisSyncing())
     2c6:	d1fc      	bne.n	2c2 <_ZN7RTCZero10RTCdisableEv+0xa>
    ;
}
     2c8:	4770      	bx	lr
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	40001400 	.word	0x40001400

000002d0 <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
  RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE; // enable RTC
     2d0:	2202      	movs	r2, #2
     2d2:	4b04      	ldr	r3, [pc, #16]	; (2e4 <_ZN7RTCZero9RTCenableEv+0x14>)
     2d4:	8819      	ldrh	r1, [r3, #0]
     2d6:	430a      	orrs	r2, r1
     2d8:	801a      	strh	r2, [r3, #0]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     2da:	7a9a      	ldrb	r2, [r3, #10]
     2dc:	09d2      	lsrs	r2, r2, #7
  while (RTCisSyncing())
     2de:	d1fc      	bne.n	2da <_ZN7RTCZero9RTCenableEv+0xa>
    ;
}
     2e0:	4770      	bx	lr
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	40001400 	.word	0x40001400

000002e8 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
  RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST; // software reset
     2e8:	2201      	movs	r2, #1
     2ea:	4b04      	ldr	r3, [pc, #16]	; (2fc <_ZN7RTCZero8RTCresetEv+0x14>)
     2ec:	8819      	ldrh	r1, [r3, #0]
     2ee:	430a      	orrs	r2, r1
     2f0:	801a      	strh	r2, [r3, #0]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     2f2:	7a9a      	ldrb	r2, [r3, #10]
     2f4:	09d2      	lsrs	r2, r2, #7
  while (RTCisSyncing())
     2f6:	d1fc      	bne.n	2f2 <_ZN7RTCZero8RTCresetEv+0xa>
    ;
}
     2f8:	4770      	bx	lr
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	40001400 	.word	0x40001400

00000300 <_ZN7RTCZero14RTCresetRemoveEv>:

void RTCZero::RTCresetRemove()
{
  RTC->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_SWRST; // software reset remove
     300:	2101      	movs	r1, #1
     302:	4b04      	ldr	r3, [pc, #16]	; (314 <_ZN7RTCZero14RTCresetRemoveEv+0x14>)
     304:	881a      	ldrh	r2, [r3, #0]
     306:	438a      	bics	r2, r1
     308:	801a      	strh	r2, [r3, #0]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     30a:	7a9a      	ldrb	r2, [r3, #10]
     30c:	09d2      	lsrs	r2, r2, #7
  while (RTCisSyncing())
     30e:	d1fc      	bne.n	30a <_ZN7RTCZero14RTCresetRemoveEv+0xa>
    ;
}
     310:	4770      	bx	lr
     312:	46c0      	nop			; (mov r8, r8)
     314:	40001400 	.word	0x40001400

00000318 <_ZN7RTCZero5beginEb>:
  PM->APBAMASK.reg |= PM_APBAMASK_RTC; // turn on digital interface clock
     318:	2320      	movs	r3, #32
{
     31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool validTime = false;
     31c:	2600      	movs	r6, #0
  PM->APBAMASK.reg |= PM_APBAMASK_RTC; // turn on digital interface clock
     31e:	4a29      	ldr	r2, [pc, #164]	; (3c4 <_ZN7RTCZero5beginEb+0xac>)
{
     320:	000f      	movs	r7, r1
  PM->APBAMASK.reg |= PM_APBAMASK_RTC; // turn on digital interface clock
     322:	6991      	ldr	r1, [r2, #24]
{
     324:	0005      	movs	r5, r0
  PM->APBAMASK.reg |= PM_APBAMASK_RTC; // turn on digital interface clock
     326:	430b      	orrs	r3, r1
     328:	6193      	str	r3, [r2, #24]
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ONDEMAND |
     32a:	4a27      	ldr	r2, [pc, #156]	; (3c8 <_ZN7RTCZero5beginEb+0xb0>)
     32c:	4b27      	ldr	r3, [pc, #156]	; (3cc <_ZN7RTCZero5beginEb+0xb4>)
     32e:	4c28      	ldr	r4, [pc, #160]	; (3d0 <_ZN7RTCZero5beginEb+0xb8>)
     330:	829a      	strh	r2, [r3, #20]
  if ((!resetTime) && (PM->RCAUSE.reg & (PM_RCAUSE_SYST | PM_RCAUSE_WDT | PM_RCAUSE_EXT))) {
     332:	42b7      	cmp	r7, r6
     334:	d114      	bne.n	360 <_ZN7RTCZero5beginEb+0x48>
     336:	4b27      	ldr	r3, [pc, #156]	; (3d4 <_ZN7RTCZero5beginEb+0xbc>)
     338:	781a      	ldrb	r2, [r3, #0]
     33a:	2370      	movs	r3, #112	; 0x70
     33c:	421a      	tst	r2, r3
     33e:	d109      	bne.n	354 <_ZN7RTCZero5beginEb+0x3c>
  bool validTime = false;
     340:	003e      	movs	r6, r7
     342:	e00d      	b.n	360 <_ZN7RTCZero5beginEb+0x48>
  if ((!resetTime) && (validTime)) {
     344:	2e00      	cmp	r6, #0
     346:	d039      	beq.n	3bc <_ZN7RTCZero5beginEb+0xa4>
    RTC->MODE2.CLOCK.reg = oldTime.reg;
     348:	9b01      	ldr	r3, [sp, #4]
     34a:	6123      	str	r3, [r4, #16]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     34c:	7aa3      	ldrb	r3, [r4, #10]
     34e:	09db      	lsrs	r3, r3, #7
    while (RTCisSyncing())
     350:	d1fc      	bne.n	34c <_ZN7RTCZero5beginEb+0x34>
     352:	e033      	b.n	3bc <_ZN7RTCZero5beginEb+0xa4>
    if (RTC->MODE2.CTRL.reg & RTC_MODE2_CTRL_MODE_CLOCK) {
     354:	8823      	ldrh	r3, [r4, #0]
     356:	071b      	lsls	r3, r3, #28
     358:	d5f2      	bpl.n	340 <_ZN7RTCZero5beginEb+0x28>
      validTime = true;
     35a:	2601      	movs	r6, #1
      oldTime.reg = RTC->MODE2.CLOCK.reg;
     35c:	6923      	ldr	r3, [r4, #16]
     35e:	9301      	str	r3, [sp, #4]
  configureClock();
     360:	0028      	movs	r0, r5
     362:	f7ff ff8d 	bl	280 <_ZN7RTCZero14configureClockEv>
  RTCdisable();
     366:	0028      	movs	r0, r5
     368:	f7ff ffa6 	bl	2b8 <_ZN7RTCZero10RTCdisableEv>
  RTCreset();
     36c:	0028      	movs	r0, r5
     36e:	f7ff ffbb 	bl	2e8 <_ZN7RTCZero8RTCresetEv>
  RTC->MODE2.READREQ.reg &= ~RTC_READREQ_RCONT; // disable continuously mode
     372:	8863      	ldrh	r3, [r4, #2]
     374:	4a18      	ldr	r2, [pc, #96]	; (3d8 <_ZN7RTCZero5beginEb+0xc0>)
     376:	4013      	ands	r3, r2
     378:	8063      	strh	r3, [r4, #2]
  RTC->MODE2.CTRL.reg = tmp_reg;
     37a:	4b18      	ldr	r3, [pc, #96]	; (3dc <_ZN7RTCZero5beginEb+0xc4>)
     37c:	8023      	strh	r3, [r4, #0]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     37e:	7aa3      	ldrb	r3, [r4, #10]
     380:	09db      	lsrs	r3, r3, #7
  while (RTCisSyncing())
     382:	d1fc      	bne.n	37e <_ZN7RTCZero5beginEb+0x66>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     384:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     386:	4a16      	ldr	r2, [pc, #88]	; (3e0 <_ZN7RTCZero5beginEb+0xc8>)
     388:	3308      	adds	r3, #8
     38a:	6013      	str	r3, [r2, #0]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     38c:	0089      	lsls	r1, r1, #2
     38e:	5853      	ldr	r3, [r2, r1]
     390:	021b      	lsls	r3, r3, #8
     392:	0a1b      	lsrs	r3, r3, #8
     394:	5053      	str	r3, [r2, r1]
  RTC->MODE2.INTENSET.reg |= RTC_MODE2_INTENSET_ALARM0; // enable alarm interrupt
     396:	2301      	movs	r3, #1
     398:	79e2      	ldrb	r2, [r4, #7]
     39a:	4313      	orrs	r3, r2
  RTC->MODE2.Mode2Alarm[0].MASK.bit.SEL = MATCH_OFF; // default alarm match is off (disabled)
     39c:	2207      	movs	r2, #7
  RTC->MODE2.INTENSET.reg |= RTC_MODE2_INTENSET_ALARM0; // enable alarm interrupt
     39e:	71e3      	strb	r3, [r4, #7]
  RTC->MODE2.Mode2Alarm[0].MASK.bit.SEL = MATCH_OFF; // default alarm match is off (disabled)
     3a0:	7f23      	ldrb	r3, [r4, #28]
     3a2:	4393      	bics	r3, r2
     3a4:	7723      	strb	r3, [r4, #28]
  return (RTC->MODE2.STATUS.bit.SYNCBUSY);
     3a6:	7aa3      	ldrb	r3, [r4, #10]
     3a8:	09db      	lsrs	r3, r3, #7
  while (RTCisSyncing())
     3aa:	d1fc      	bne.n	3a6 <_ZN7RTCZero5beginEb+0x8e>
  RTCenable();
     3ac:	0028      	movs	r0, r5
     3ae:	f7ff ff8f 	bl	2d0 <_ZN7RTCZero9RTCenableEv>
  RTCresetRemove();
     3b2:	0028      	movs	r0, r5
     3b4:	f7ff ffa4 	bl	300 <_ZN7RTCZero14RTCresetRemoveEv>
  if ((!resetTime) && (validTime)) {
     3b8:	2f00      	cmp	r7, #0
     3ba:	d0c3      	beq.n	344 <_ZN7RTCZero5beginEb+0x2c>
  _configured = true;
     3bc:	2301      	movs	r3, #1
     3be:	702b      	strb	r3, [r5, #0]
}
     3c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	40000400 	.word	0x40000400
     3c8:	000006ce 	.word	0x000006ce
     3cc:	40000800 	.word	0x40000800
     3d0:	40001400 	.word	0x40001400
     3d4:	40000438 	.word	0x40000438
     3d8:	ffffbfff 	.word	0xffffbfff
     3dc:	00000a08 	.word	0x00000a08
     3e0:	e000e100 	.word	0xe000e100

000003e4 <_Z3ISRv>:


//Beginning of Auto generated function prototypes by Atmel Studio
void dummy();
//End of Auto generated function prototypes by Atmel Studio
void ISR(){
     3e4:	b510      	push	{r4, lr}

analogWrite(12,255);
     3e6:	21ff      	movs	r1, #255	; 0xff
     3e8:	200c      	movs	r0, #12
     3ea:	f001 fa65 	bl	18b8 <analogWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
     3ee:	4b05      	ldr	r3, [pc, #20]	; (404 <_Z3ISRv+0x20>)
     3f0:	3b01      	subs	r3, #1
     3f2:	d1fd      	bne.n	3f0 <_Z3ISRv+0xc>
delayMicroseconds(500000);
analogWrite(12,0);
     3f4:	2100      	movs	r1, #0
     3f6:	200c      	movs	r0, #12
     3f8:	f001 fa5e 	bl	18b8 <analogWrite>
     3fc:	4b02      	ldr	r3, [pc, #8]	; (408 <_Z3ISRv+0x24>)
     3fe:	3b01      	subs	r3, #1
     400:	d1fd      	bne.n	3fe <_Z3ISRv+0x1a>
delayMicroseconds(3000000);




}
     402:	bd10      	pop	{r4, pc}
     404:	007a1200 	.word	0x007a1200
     408:	02dc6c00 	.word	0x02dc6c00

0000040c <_Z12extInterrupti>:
void extInterrupt(int interruptPin) {
     40c:	b510      	push	{r4, lr}
     40e:	0004      	movs	r4, r0
pinMode(interruptPin, INPUT_PULLUP);
     410:	2102      	movs	r1, #2
     412:	f001 fc15 	bl	1c40 <pinMode>
attachInterrupt(digitalPinToInterrupt(interruptPin), ISR, LOW);
     416:	2200      	movs	r2, #0
     418:	4902      	ldr	r1, [pc, #8]	; (424 <_Z12extInterrupti+0x18>)
     41a:	0020      	movs	r0, r4
     41c:	f000 ffc0 	bl	13a0 <attachInterrupt>
}
     420:	bd10      	pop	{r4, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	000003e5 	.word	0x000003e5

00000428 <setup>:
pinMode(8,INPUT);
pinMode(9,INPUT);
pinMode(10,INPUT);
pinMode(11,INPUT);
pinMode(13,INPUT); */
  delay(2000);
     428:	20fa      	movs	r0, #250	; 0xfa
void setup() {
     42a:	b510      	push	{r4, lr}
  delay(2000);
     42c:	00c0      	lsls	r0, r0, #3
     42e:	f000 f88b 	bl	548 <delay>
 // Serial.begin(115200);
  rtc.begin();
     432:	4c0a      	ldr	r4, [pc, #40]	; (45c <setup+0x34>)
     434:	2100      	movs	r1, #0
     436:	0020      	movs	r0, r4
     438:	f7ff ff6e 	bl	318 <_ZN7RTCZero5beginEb>
  rtc.setTime(0,00,00);
     43c:	2300      	movs	r3, #0
     43e:	0020      	movs	r0, r4
     440:	001a      	movs	r2, r3
     442:	0019      	movs	r1, r3
     444:	f7ff febe 	bl	1c4 <_ZN7RTCZero7setTimeEhhh>
  rtc.setDate(24,9,16);
     448:	2310      	movs	r3, #16
     44a:	2209      	movs	r2, #9
     44c:	2118      	movs	r1, #24
     44e:	0020      	movs	r0, r4
     450:	f7ff ff04 	bl	25c <_ZN7RTCZero7setDateEhhh>
 //rtc.setAlarmTime(00,00,3;
  //rtc.enableAlarm(rtc.MATCH_HHMMSS);
 // rtc.attachInterrupt(ISR);
 extInterrupt(interruptpin);
     454:	2003      	movs	r0, #3
     456:	f7ff ffd9 	bl	40c <_Z12extInterrupti>

  //pinMode(LED_BUILTIN, OUTPUT);
  
  // Uncomment this function if you wish to attach function dummy when RTC wakes up the chip
  // LowPower.attachInterruptWakeup(RTC_ALARM_WAKEUP, dummy, CHANGE);
}
     45a:	bd10      	pop	{r4, pc}
     45c:	20000069 	.word	0x20000069

00000460 <loop>:

void loop() {
     460:	b510      	push	{r4, lr}
rtc.standbyMode();
     462:	4802      	ldr	r0, [pc, #8]	; (46c <loop+0xc>)
     464:	f7ff fe68 	bl	138 <_ZN7RTCZero11standbyModeEv>
  digitalWrite(LED_BUILTIN, LOW);
  delay(500); */
  // Triggers a 2000 ms sleep (the device will be woken up only by the registered wakeup sources and by internal RTC)
  // The power consumption of the chip will drop consistently
  //LowPower.sleep(2000);
}
     468:	bd10      	pop	{r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	20000069 	.word	0x20000069

00000470 <_GLOBAL__sub_I_LowPower>:

void dummy() {
  // This function will be called once on device wakeup
  // You can do some little operations here (like changing variables which will be used in the loop)
  // Remember to avoid calling delay() and long running functions since this functions executes in interrupt context
}
     470:	b510      	push	{r4, lr}
	NFC_WAKEUP = 2,
	ANALOG_COMPARATOR_WAKEUP = 3
} wakeup_reason;


class ArduinoLowPowerClass {
     472:	4803      	ldr	r0, [pc, #12]	; (480 <_GLOBAL__sub_I_LowPower+0x10>)
     474:	f7ff fe4e 	bl	114 <_ZN7RTCZeroC1Ev>
RTCZero rtc;
     478:	4802      	ldr	r0, [pc, #8]	; (484 <_GLOBAL__sub_I_LowPower+0x14>)
     47a:	f7ff fe4b 	bl	114 <_ZN7RTCZeroC1Ev>
}
     47e:	bd10      	pop	{r4, pc}
     480:	20000068 	.word	0x20000068
     484:	20000069 	.word	0x20000069

00000488 <Dummy_Handler>:
extern void pendSVHook(void);
extern int sysTickHook(void);

/* Default empty handler */
void Dummy_Handler(void)
{
     488:	b580      	push	{r7, lr}
     48a:	af00      	add	r7, sp, #0
#if defined DEBUG
  __BKPT(3);
     48c:	be03      	bkpt	0x0003
#endif
  for (;;) { }
     48e:	e7fe      	b.n	48e <Dummy_Handler+0x6>

00000490 <Reset_Handler>:

extern int main(void);

/* This is called on processor reset to initialize the device and call main() */
void Reset_Handler(void)
{
     490:	b580      	push	{r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
  uint32_t *pSrc, *pDest;

  /* Initialize the initialized data section */
  pSrc = &__etext;
     496:	4b1a      	ldr	r3, [pc, #104]	; (500 <Reset_Handler+0x70>)
     498:	607b      	str	r3, [r7, #4]
  pDest = &__data_start__;
     49a:	4b1a      	ldr	r3, [pc, #104]	; (504 <Reset_Handler+0x74>)
     49c:	603b      	str	r3, [r7, #0]

  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     49e:	4a19      	ldr	r2, [pc, #100]	; (504 <Reset_Handler+0x74>)
     4a0:	4b19      	ldr	r3, [pc, #100]	; (508 <Reset_Handler+0x78>)
     4a2:	429a      	cmp	r2, r3
     4a4:	d012      	beq.n	4cc <Reset_Handler+0x3c>
     4a6:	687a      	ldr	r2, [r7, #4]
     4a8:	683b      	ldr	r3, [r7, #0]
     4aa:	429a      	cmp	r2, r3
     4ac:	d00e      	beq.n	4cc <Reset_Handler+0x3c>
    for (; pDest < &__data_end__; pDest++, pSrc++)
     4ae:	e009      	b.n	4c4 <Reset_Handler+0x34>
      *pDest = *pSrc;
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	681a      	ldr	r2, [r3, #0]
     4b4:	683b      	ldr	r3, [r7, #0]
     4b6:	601a      	str	r2, [r3, #0]
    for (; pDest < &__data_end__; pDest++, pSrc++)
     4b8:	683b      	ldr	r3, [r7, #0]
     4ba:	3304      	adds	r3, #4
     4bc:	603b      	str	r3, [r7, #0]
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	3304      	adds	r3, #4
     4c2:	607b      	str	r3, [r7, #4]
     4c4:	683a      	ldr	r2, [r7, #0]
     4c6:	4b10      	ldr	r3, [pc, #64]	; (508 <Reset_Handler+0x78>)
     4c8:	429a      	cmp	r2, r3
     4ca:	d3f1      	bcc.n	4b0 <Reset_Handler+0x20>
  }

  /* Clear the zero section */
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     4cc:	4a0d      	ldr	r2, [pc, #52]	; (504 <Reset_Handler+0x74>)
     4ce:	4b0e      	ldr	r3, [pc, #56]	; (508 <Reset_Handler+0x78>)
     4d0:	429a      	cmp	r2, r3
     4d2:	d010      	beq.n	4f6 <Reset_Handler+0x66>
     4d4:	687a      	ldr	r2, [r7, #4]
     4d6:	683b      	ldr	r3, [r7, #0]
     4d8:	429a      	cmp	r2, r3
     4da:	d00c      	beq.n	4f6 <Reset_Handler+0x66>
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     4dc:	4b0b      	ldr	r3, [pc, #44]	; (50c <Reset_Handler+0x7c>)
     4de:	603b      	str	r3, [r7, #0]
     4e0:	e005      	b.n	4ee <Reset_Handler+0x5e>
      *pDest = 0;
     4e2:	683b      	ldr	r3, [r7, #0]
     4e4:	2200      	movs	r2, #0
     4e6:	601a      	str	r2, [r3, #0]
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	3304      	adds	r3, #4
     4ec:	603b      	str	r3, [r7, #0]
     4ee:	683a      	ldr	r2, [r7, #0]
     4f0:	4b07      	ldr	r3, [pc, #28]	; (510 <Reset_Handler+0x80>)
     4f2:	429a      	cmp	r2, r3
     4f4:	d3f5      	bcc.n	4e2 <Reset_Handler+0x52>
  }

  SystemInit();
     4f6:	f000 f8b1 	bl	65c <SystemInit>

  main();
     4fa:	f000 f85d 	bl	5b8 <main>

  while (1)
     4fe:	e7fe      	b.n	4fe <Reset_Handler+0x6e>
     500:	000037fc 	.word	0x000037fc
     504:	20000000 	.word	0x20000000
     508:	20000048 	.word	0x20000048
     50c:	20000048 	.word	0x20000048
     510:	200006fc 	.word	0x200006fc

00000514 <SysTick_Handler>:

/* Default Arduino systick handler */
extern void SysTick_DefaultHandler(void);

void SysTick_Handler(void)
{
     514:	b580      	push	{r7, lr}
     516:	af00      	add	r7, sp, #0
  if (sysTickHook())
     518:	f000 f843 	bl	5a2 <sysTickHook>
     51c:	1e03      	subs	r3, r0, #0
     51e:	d102      	bne.n	526 <SysTick_Handler+0x12>
    return;
  SysTick_DefaultHandler();
     520:	f000 f82c 	bl	57c <SysTick_DefaultHandler>
     524:	e000      	b.n	528 <SysTick_Handler+0x14>
    return;
     526:	46c0      	nop			; (mov r8, r8)
}
     528:	46bd      	mov	sp, r7
     52a:	bd80      	pop	{r7, pc}

0000052c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
     52c:	b580      	push	{r7, lr}
     52e:	af00      	add	r7, sp, #0
  if (usb_isr)
     530:	4b04      	ldr	r3, [pc, #16]	; (544 <USB_Handler+0x18>)
     532:	681b      	ldr	r3, [r3, #0]
     534:	2b00      	cmp	r3, #0
     536:	d002      	beq.n	53e <USB_Handler+0x12>
    usb_isr();
     538:	4b02      	ldr	r3, [pc, #8]	; (544 <USB_Handler+0x18>)
     53a:	681b      	ldr	r3, [r3, #0]
     53c:	4798      	blx	r3
}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	46bd      	mov	sp, r7
     542:	bd80      	pop	{r7, pc}
     544:	2000006c 	.word	0x2000006c

00000548 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     548:	b580      	push	{r7, lr}
     54a:	b084      	sub	sp, #16
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
  if ( ms == 0 )
     550:	687b      	ldr	r3, [r7, #4]
     552:	2b00      	cmp	r3, #0
     554:	d00c      	beq.n	570 <delay+0x28>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <delay+0x30>)
     558:	681b      	ldr	r3, [r3, #0]
     55a:	60fb      	str	r3, [r7, #12]

  do
  {
    yield() ;
     55c:	f000 f81c 	bl	598 <yield>
  } while ( _ulTickCount - start < ms ) ;
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <delay+0x30>)
     562:	681a      	ldr	r2, [r3, #0]
     564:	68fb      	ldr	r3, [r7, #12]
     566:	1ad2      	subs	r2, r2, r3
     568:	687b      	ldr	r3, [r7, #4]
     56a:	429a      	cmp	r2, r3
     56c:	d3f6      	bcc.n	55c <delay+0x14>
     56e:	e000      	b.n	572 <delay+0x2a>
    return ;
     570:	46c0      	nop			; (mov r8, r8)
}
     572:	46bd      	mov	sp, r7
     574:	b004      	add	sp, #16
     576:	bd80      	pop	{r7, pc}
     578:	20000070 	.word	0x20000070

0000057c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     57c:	b580      	push	{r7, lr}
     57e:	af00      	add	r7, sp, #0
  // Increment tick count each ms
  _ulTickCount++;
     580:	4b04      	ldr	r3, [pc, #16]	; (594 <SysTick_DefaultHandler+0x18>)
     582:	681b      	ldr	r3, [r3, #0]
     584:	1c5a      	adds	r2, r3, #1
     586:	4b03      	ldr	r3, [pc, #12]	; (594 <SysTick_DefaultHandler+0x18>)
     588:	601a      	str	r2, [r3, #0]
  tickReset();
     58a:	f000 f84d 	bl	628 <tickReset>
}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	46bd      	mov	sp, r7
     592:	bd80      	pop	{r7, pc}
     594:	20000070 	.word	0x20000070

00000598 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     598:	b580      	push	{r7, lr}
     59a:	af00      	add	r7, sp, #0
	// Empty
}
     59c:	46c0      	nop			; (mov r8, r8)
     59e:	46bd      	mov	sp, r7
     5a0:	bd80      	pop	{r7, pc}

000005a2 <sysTickHook>:
 * SysTick hook
 *
 * This function is called from SysTick handler, before the default
 * handler provided by Arduino.
 */
static int __false() {
     5a2:	b580      	push	{r7, lr}
     5a4:	af00      	add	r7, sp, #0
	// Return false
	return 0;
     5a6:	2300      	movs	r3, #0
}
     5a8:	0018      	movs	r0, r3
     5aa:	46bd      	mov	sp, r7
     5ac:	bd80      	pop	{r7, pc}

000005ae <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     5ae:	b580      	push	{r7, lr}
     5b0:	af00      	add	r7, sp, #0
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	46bd      	mov	sp, r7
     5b6:	bd80      	pop	{r7, pc}

000005b8 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     5b8:	b580      	push	{r7, lr}
     5ba:	af00      	add	r7, sp, #0
  init();
     5bc:	f001 f87a 	bl	16b4 <init>
  //#define PORT_PINCFG_INEN            (_U(0x0) << PORT_PINCFG_INEN_Pos)

  __libc_init_array();
     5c0:	f002 fdc2 	bl	3148 <__libc_init_array>

  initVariant();
     5c4:	f7ff fff3 	bl	5ae <_Z11initVariantv>

  delay(1);
     5c8:	2001      	movs	r0, #1
     5ca:	f7ff ffbd 	bl	548 <delay>
#if defined(USBCON)
  //USBDevice.init();			Including this increases power by ~5mA during sleep mode
  //USBDevice.attach();
#endif

  setup();
     5ce:	f7ff ff2b 	bl	428 <setup>

  for (;;)
  {
    loop();
     5d2:	f7ff ff45 	bl	460 <loop>
    if (serialEventRun) serialEventRun();
     5d6:	4b03      	ldr	r3, [pc, #12]	; (5e4 <main+0x2c>)
     5d8:	2b00      	cmp	r3, #0
     5da:	d0fa      	beq.n	5d2 <main+0x1a>
     5dc:	e000      	b.n	5e0 <main+0x28>
     5de:	bf00      	nop
    loop();
     5e0:	e7f7      	b.n	5d2 <main+0x1a>
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	00000000 	.word	0x00000000

000005e8 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     5ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     5f0:	4b03      	ldr	r3, [pc, #12]	; (600 <NVIC_SystemReset+0x18>)
     5f2:	4a04      	ldr	r2, [pc, #16]	; (604 <NVIC_SystemReset+0x1c>)
     5f4:	60da      	str	r2, [r3, #12]
     5f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
     5fa:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     5fc:	e7fd      	b.n	5fa <NVIC_SystemReset+0x12>
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	e000ed00 	.word	0xe000ed00
     604:	05fa0004 	.word	0x05fa0004

00000608 <nvmReady>:

#else
#define APP_START 0x00002004
#endif

static inline bool nvmReady(void) {
     608:	b580      	push	{r7, lr}
     60a:	af00      	add	r7, sp, #0
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     60c:	4b05      	ldr	r3, [pc, #20]	; (624 <nvmReady+0x1c>)
     60e:	7d1b      	ldrb	r3, [r3, #20]
     610:	b2db      	uxtb	r3, r3
     612:	001a      	movs	r2, r3
     614:	2301      	movs	r3, #1
     616:	4013      	ands	r3, r2
     618:	1e5a      	subs	r2, r3, #1
     61a:	4193      	sbcs	r3, r2
     61c:	b2db      	uxtb	r3, r3
}
     61e:	0018      	movs	r0, r3
     620:	46bd      	mov	sp, r7
     622:	bd80      	pop	{r7, pc}
     624:	41004000 	.word	0x41004000

00000628 <tickReset>:

void cancelReset() {
	ticks = -1;
}

void tickReset() {
     628:	b580      	push	{r7, lr}
     62a:	af00      	add	r7, sp, #0
	if (ticks == -1)
     62c:	4b09      	ldr	r3, [pc, #36]	; (654 <tickReset+0x2c>)
     62e:	681b      	ldr	r3, [r3, #0]
     630:	3301      	adds	r3, #1
     632:	d00b      	beq.n	64c <tickReset+0x24>
		return;
	ticks--;
     634:	4b07      	ldr	r3, [pc, #28]	; (654 <tickReset+0x2c>)
     636:	681b      	ldr	r3, [r3, #0]
     638:	1e5a      	subs	r2, r3, #1
     63a:	4b06      	ldr	r3, [pc, #24]	; (654 <tickReset+0x2c>)
     63c:	601a      	str	r2, [r3, #0]
	if (ticks == 0)
     63e:	4b05      	ldr	r3, [pc, #20]	; (654 <tickReset+0x2c>)
     640:	681b      	ldr	r3, [r3, #0]
     642:	2b00      	cmp	r3, #0
     644:	d103      	bne.n	64e <tickReset+0x26>
		banzai();
     646:	4b04      	ldr	r3, [pc, #16]	; (658 <tickReset+0x30>)
     648:	4798      	blx	r3
     64a:	e000      	b.n	64e <tickReset+0x26>
		return;
     64c:	46c0      	nop			; (mov r8, r8)
}
     64e:	46bd      	mov	sp, r7
     650:	bd80      	pop	{r7, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	20000004 	.word	0x20000004
     658:	00003789 	.word	0x00003789

0000065c <SystemInit>:
#define GENERIC_CLOCK_GENERATOR_OSC8M     (3u)
// Constants for Clock multiplexers
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
     65c:	b580      	push	{r7, lr}
     65e:	b082      	sub	sp, #8
     660:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     662:	4a75      	ldr	r2, [pc, #468]	; (838 <SystemInit+0x1dc>)
     664:	6853      	ldr	r3, [r2, #4]
     666:	211e      	movs	r1, #30
     668:	438b      	bics	r3, r1
     66a:	2102      	movs	r1, #2
     66c:	430b      	orrs	r3, r1
     66e:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     670:	4b72      	ldr	r3, [pc, #456]	; (83c <SystemInit+0x1e0>)
     672:	4a72      	ldr	r2, [pc, #456]	; (83c <SystemInit+0x1e0>)
     674:	6992      	ldr	r2, [r2, #24]
     676:	2108      	movs	r1, #8
     678:	430a      	orrs	r2, r1
     67a:	619a      	str	r2, [r3, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     67c:	4b70      	ldr	r3, [pc, #448]	; (840 <SystemInit+0x1e4>)
     67e:	4a71      	ldr	r2, [pc, #452]	; (844 <SystemInit+0x1e8>)
     680:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     682:	4a6f      	ldr	r2, [pc, #444]	; (840 <SystemInit+0x1e4>)
     684:	8a93      	ldrh	r3, [r2, #20]
     686:	2102      	movs	r1, #2
     688:	430b      	orrs	r3, r1
     68a:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     68c:	46c0      	nop			; (mov r8, r8)
     68e:	4b6c      	ldr	r3, [pc, #432]	; (840 <SystemInit+0x1e4>)
     690:	68db      	ldr	r3, [r3, #12]
     692:	2202      	movs	r2, #2
     694:	4013      	ands	r3, r2
     696:	d0fa      	beq.n	68e <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     698:	4b6b      	ldr	r3, [pc, #428]	; (848 <SystemInit+0x1ec>)
     69a:	2201      	movs	r2, #1
     69c:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	4b69      	ldr	r3, [pc, #420]	; (848 <SystemInit+0x1ec>)
     6a2:	781b      	ldrb	r3, [r3, #0]
     6a4:	b2db      	uxtb	r3, r3
     6a6:	001a      	movs	r2, r3
     6a8:	2301      	movs	r3, #1
     6aa:	4013      	ands	r3, r2
     6ac:	d005      	beq.n	6ba <SystemInit+0x5e>
     6ae:	4b66      	ldr	r3, [pc, #408]	; (848 <SystemInit+0x1ec>)
     6b0:	785b      	ldrb	r3, [r3, #1]
     6b2:	b2db      	uxtb	r3, r3
     6b4:	b25b      	sxtb	r3, r3
     6b6:	2b00      	cmp	r3, #0
     6b8:	dbf2      	blt.n	6a0 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     6ba:	4b63      	ldr	r3, [pc, #396]	; (848 <SystemInit+0x1ec>)
     6bc:	2201      	movs	r2, #1
     6be:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6c0:	46c0      	nop			; (mov r8, r8)
     6c2:	4b61      	ldr	r3, [pc, #388]	; (848 <SystemInit+0x1ec>)
     6c4:	785b      	ldrb	r3, [r3, #1]
     6c6:	b2db      	uxtb	r3, r3
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	dbf9      	blt.n	6c2 <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     6ce:	4b5e      	ldr	r3, [pc, #376]	; (848 <SystemInit+0x1ec>)
     6d0:	4a5e      	ldr	r2, [pc, #376]	; (84c <SystemInit+0x1f0>)
     6d2:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6d4:	46c0      	nop			; (mov r8, r8)
     6d6:	4b5c      	ldr	r3, [pc, #368]	; (848 <SystemInit+0x1ec>)
     6d8:	785b      	ldrb	r3, [r3, #1]
     6da:	b2db      	uxtb	r3, r3
     6dc:	b25b      	sxtb	r3, r3
     6de:	2b00      	cmp	r3, #0
     6e0:	dbf9      	blt.n	6d6 <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     6e2:	4b59      	ldr	r3, [pc, #356]	; (848 <SystemInit+0x1ec>)
     6e4:	2282      	movs	r2, #130	; 0x82
     6e6:	01d2      	lsls	r2, r2, #7
     6e8:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	4b56      	ldr	r3, [pc, #344]	; (848 <SystemInit+0x1ec>)
     6ee:	785b      	ldrb	r3, [r3, #1]
     6f0:	b2db      	uxtb	r3, r3
     6f2:	b25b      	sxtb	r3, r3
     6f4:	2b00      	cmp	r3, #0
     6f6:	dbf9      	blt.n	6ec <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     6f8:	4b51      	ldr	r3, [pc, #324]	; (840 <SystemInit+0x1e4>)
     6fa:	2202      	movs	r2, #2
     6fc:	849a      	strh	r2, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	4b4f      	ldr	r3, [pc, #316]	; (840 <SystemInit+0x1e4>)
     702:	68db      	ldr	r3, [r3, #12]
     704:	2210      	movs	r2, #16
     706:	4013      	ands	r3, r2
     708:	d0fa      	beq.n	700 <SystemInit+0xa4>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     70a:	4b4d      	ldr	r3, [pc, #308]	; (840 <SystemInit+0x1e4>)
     70c:	4a50      	ldr	r2, [pc, #320]	; (850 <SystemInit+0x1f4>)
     70e:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     710:	46c0      	nop			; (mov r8, r8)
     712:	4b4b      	ldr	r3, [pc, #300]	; (840 <SystemInit+0x1e4>)
     714:	68db      	ldr	r3, [r3, #12]
     716:	2210      	movs	r2, #16
     718:	4013      	ands	r3, r2
     71a:	d0fa      	beq.n	712 <SystemInit+0xb6>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     71c:	4a48      	ldr	r2, [pc, #288]	; (840 <SystemInit+0x1e4>)
     71e:	4b48      	ldr	r3, [pc, #288]	; (840 <SystemInit+0x1e4>)
     720:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     722:	b29b      	uxth	r3, r3
     724:	494b      	ldr	r1, [pc, #300]	; (854 <SystemInit+0x1f8>)
     726:	430b      	orrs	r3, r1
     728:	b29b      	uxth	r3, r3
     72a:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	4b44      	ldr	r3, [pc, #272]	; (840 <SystemInit+0x1e4>)
     730:	68db      	ldr	r3, [r3, #12]
     732:	2210      	movs	r2, #16
     734:	4013      	ands	r3, r2
     736:	d0fa      	beq.n	72e <SystemInit+0xd2>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     738:	4a41      	ldr	r2, [pc, #260]	; (840 <SystemInit+0x1e4>)
     73a:	4b41      	ldr	r3, [pc, #260]	; (840 <SystemInit+0x1e4>)
     73c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     73e:	b29b      	uxth	r3, r3
     740:	2102      	movs	r1, #2
     742:	430b      	orrs	r3, r1
     744:	b29b      	uxth	r3, r3
     746:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     748:	46c0      	nop			; (mov r8, r8)
     74a:	4b3d      	ldr	r3, [pc, #244]	; (840 <SystemInit+0x1e4>)
     74c:	68db      	ldr	r3, [r3, #12]
     74e:	2280      	movs	r2, #128	; 0x80
     750:	4013      	ands	r3, r2
     752:	d0fa      	beq.n	74a <SystemInit+0xee>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     754:	4b3a      	ldr	r3, [pc, #232]	; (840 <SystemInit+0x1e4>)
     756:	68db      	ldr	r3, [r3, #12]
     758:	2240      	movs	r2, #64	; 0x40
     75a:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     75c:	d0f5      	beq.n	74a <SystemInit+0xee>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     75e:	46c0      	nop			; (mov r8, r8)
     760:	4b37      	ldr	r3, [pc, #220]	; (840 <SystemInit+0x1e4>)
     762:	68db      	ldr	r3, [r3, #12]
     764:	2210      	movs	r2, #16
     766:	4013      	ands	r3, r2
     768:	d0fa      	beq.n	760 <SystemInit+0x104>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     76a:	4b37      	ldr	r3, [pc, #220]	; (848 <SystemInit+0x1ec>)
     76c:	2200      	movs	r2, #0
     76e:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     770:	46c0      	nop			; (mov r8, r8)
     772:	4b35      	ldr	r3, [pc, #212]	; (848 <SystemInit+0x1ec>)
     774:	785b      	ldrb	r3, [r3, #1]
     776:	b2db      	uxtb	r3, r3
     778:	b25b      	sxtb	r3, r3
     77a:	2b00      	cmp	r3, #0
     77c:	dbf9      	blt.n	772 <SystemInit+0x116>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     77e:	4b32      	ldr	r3, [pc, #200]	; (848 <SystemInit+0x1ec>)
     780:	4a35      	ldr	r2, [pc, #212]	; (858 <SystemInit+0x1fc>)
     782:	605a      	str	r2, [r3, #4]
						//GCLK_GENCTRL_SRC_OSC8M|
                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     784:	46c0      	nop			; (mov r8, r8)
     786:	4b30      	ldr	r3, [pc, #192]	; (848 <SystemInit+0x1ec>)
     788:	785b      	ldrb	r3, [r3, #1]
     78a:	b2db      	uxtb	r3, r3
     78c:	b25b      	sxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	dbf9      	blt.n	786 <SystemInit+0x12a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     792:	4a2b      	ldr	r2, [pc, #172]	; (840 <SystemInit+0x1e4>)
     794:	6a13      	ldr	r3, [r2, #32]
     796:	4931      	ldr	r1, [pc, #196]	; (85c <SystemInit+0x200>)
     798:	400b      	ands	r3, r1
     79a:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     79c:	4a28      	ldr	r2, [pc, #160]	; (840 <SystemInit+0x1e4>)
     79e:	6a13      	ldr	r3, [r2, #32]
     7a0:	2180      	movs	r1, #128	; 0x80
     7a2:	438b      	bics	r3, r1
     7a4:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     7a6:	4b28      	ldr	r3, [pc, #160]	; (848 <SystemInit+0x1ec>)
     7a8:	2203      	movs	r2, #3
     7aa:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     7ac:	4b26      	ldr	r3, [pc, #152]	; (848 <SystemInit+0x1ec>)
     7ae:	4a2c      	ldr	r2, [pc, #176]	; (860 <SystemInit+0x204>)
     7b0:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	4b24      	ldr	r3, [pc, #144]	; (848 <SystemInit+0x1ec>)
     7b6:	785b      	ldrb	r3, [r3, #1]
     7b8:	b2db      	uxtb	r3, r3
     7ba:	b25b      	sxtb	r3, r3
     7bc:	2b00      	cmp	r3, #0
     7be:	dbf9      	blt.n	7b4 <SystemInit+0x158>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     7c0:	4b1e      	ldr	r3, [pc, #120]	; (83c <SystemInit+0x1e0>)
     7c2:	2200      	movs	r2, #0
     7c4:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     7c6:	4b1d      	ldr	r3, [pc, #116]	; (83c <SystemInit+0x1e0>)
     7c8:	2200      	movs	r2, #0
     7ca:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     7cc:	4b1b      	ldr	r3, [pc, #108]	; (83c <SystemInit+0x1e0>)
     7ce:	2200      	movs	r2, #0
     7d0:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     7d2:	4b1a      	ldr	r3, [pc, #104]	; (83c <SystemInit+0x1e0>)
     7d4:	2200      	movs	r2, #0
     7d6:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=VARIANT_MCK ;
     7d8:	4b22      	ldr	r3, [pc, #136]	; (864 <SystemInit+0x208>)
     7da:	4a23      	ldr	r2, [pc, #140]	; (868 <SystemInit+0x20c>)
     7dc:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     7de:	4b23      	ldr	r3, [pc, #140]	; (86c <SystemInit+0x210>)
     7e0:	681b      	ldr	r3, [r3, #0]
     7e2:	08db      	lsrs	r3, r3, #3
     7e4:	2207      	movs	r2, #7
     7e6:	4013      	ands	r3, r2
     7e8:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     7ea:	4b21      	ldr	r3, [pc, #132]	; (870 <SystemInit+0x214>)
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	0edb      	lsrs	r3, r3, #27
     7f0:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     7f2:	4b1e      	ldr	r3, [pc, #120]	; (86c <SystemInit+0x210>)
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	015b      	lsls	r3, r3, #5
     7f8:	22ff      	movs	r2, #255	; 0xff
     7fa:	4013      	ands	r3, r2
     7fc:	683a      	ldr	r2, [r7, #0]
     7fe:	4313      	orrs	r3, r2
     800:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     802:	491c      	ldr	r1, [pc, #112]	; (874 <SystemInit+0x218>)
     804:	687b      	ldr	r3, [r7, #4]
     806:	b29b      	uxth	r3, r3
     808:	021b      	lsls	r3, r3, #8
     80a:	b29a      	uxth	r2, r3
     80c:	23e0      	movs	r3, #224	; 0xe0
     80e:	00db      	lsls	r3, r3, #3
     810:	4013      	ands	r3, r2
     812:	b29a      	uxth	r2, r3
     814:	683b      	ldr	r3, [r7, #0]
     816:	b29b      	uxth	r3, r3
     818:	20ff      	movs	r0, #255	; 0xff
     81a:	4003      	ands	r3, r0
     81c:	b29b      	uxth	r3, r3
     81e:	4313      	orrs	r3, r2
     820:	b29b      	uxth	r3, r3
     822:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     824:	4a04      	ldr	r2, [pc, #16]	; (838 <SystemInit+0x1dc>)
     826:	6853      	ldr	r3, [r2, #4]
     828:	2180      	movs	r1, #128	; 0x80
     82a:	430b      	orrs	r3, r1
     82c:	6053      	str	r3, [r2, #4]
  
//  SCB->SCR|=SCB_SCR_SLEEPDEEP_Msk; //sleep mode in the startup file, don't do this without delay
///  __DSB();
//  __WFI();
}
     82e:	46c0      	nop			; (mov r8, r8)
     830:	46bd      	mov	sp, r7
     832:	b002      	add	sp, #8
     834:	bd80      	pop	{r7, pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	41004000 	.word	0x41004000
     83c:	40000400 	.word	0x40000400
     840:	40000800 	.word	0x40000800
     844:	0000060c 	.word	0x0000060c
     848:	40000c00 	.word	0x40000c00
     84c:	00010501 	.word	0x00010501
     850:	7dff05b8 	.word	0x7dff05b8
     854:	00000a04 	.word	0x00000a04
     858:	000b0700 	.word	0x000b0700
     85c:	fffffcff 	.word	0xfffffcff
     860:	00010603 	.word	0x00010603
     864:	2000000c 	.word	0x2000000c
     868:	02dc6c00 	.word	0x02dc6c00
     86c:	00806024 	.word	0x00806024
     870:	00806020 	.word	0x00806020
     874:	42004000 	.word	0x42004000

00000878 <_ZN5Print13setWriteErrorEi>:
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
     87e:	6078      	str	r0, [r7, #4]
     880:	6039      	str	r1, [r7, #0]
     882:	687b      	ldr	r3, [r7, #4]
     884:	683a      	ldr	r2, [r7, #0]
     886:	605a      	str	r2, [r3, #4]
     888:	46c0      	nop			; (mov r8, r8)
     88a:	46bd      	mov	sp, r7
     88c:	b002      	add	sp, #8
     88e:	bd80      	pop	{r7, pc}

00000890 <_ZN5PrintC1Ev>:
  public:
    Print() : write_error(0) {}
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
     898:	4a05      	ldr	r2, [pc, #20]	; (8b0 <_ZN5PrintC1Ev+0x20>)
     89a:	687b      	ldr	r3, [r7, #4]
     89c:	601a      	str	r2, [r3, #0]
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	2200      	movs	r2, #0
     8a2:	605a      	str	r2, [r3, #4]
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	0018      	movs	r0, r3
     8a8:	46bd      	mov	sp, r7
     8aa:	b002      	add	sp, #8
     8ac:	bd80      	pop	{r7, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00003740 	.word	0x00003740

000008b4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     8b4:	b580      	push	{r7, lr}
     8b6:	b082      	sub	sp, #8
     8b8:	af00      	add	r7, sp, #0
     8ba:	6078      	str	r0, [r7, #4]
     8bc:	2300      	movs	r3, #0
     8be:	0018      	movs	r0, r3
     8c0:	46bd      	mov	sp, r7
     8c2:	b002      	add	sp, #8
     8c4:	bd80      	pop	{r7, pc}

000008c6 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     8c6:	b580      	push	{r7, lr}
     8c8:	b082      	sub	sp, #8
     8ca:	af00      	add	r7, sp, #0
     8cc:	6078      	str	r0, [r7, #4]
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	46bd      	mov	sp, r7
     8d2:	b002      	add	sp, #8
     8d4:	bd80      	pop	{r7, pc}
	...

000008d8 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     8d8:	b580      	push	{r7, lr}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	0018      	movs	r0, r3
     8e4:	f7ff ffd4 	bl	890 <_ZN5PrintC1Ev>
     8e8:	4a05      	ldr	r2, [pc, #20]	; (900 <_ZN6StreamC1Ev+0x28>)
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	601a      	str	r2, [r3, #0]
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	22fa      	movs	r2, #250	; 0xfa
     8f2:	0092      	lsls	r2, r2, #2
     8f4:	609a      	str	r2, [r3, #8]
     8f6:	687b      	ldr	r3, [r7, #4]
     8f8:	0018      	movs	r0, r3
     8fa:	46bd      	mov	sp, r7
     8fc:	b002      	add	sp, #8
     8fe:	bd80      	pop	{r7, pc}
     900:	000031f8 	.word	0x000031f8

00000904 <_ZN7Serial_C1ER14USBDeviceClass>:
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
     904:	b580      	push	{r7, lr}
     906:	b082      	sub	sp, #8
     908:	af00      	add	r7, sp, #0
     90a:	6078      	str	r0, [r7, #4]
     90c:	6039      	str	r1, [r7, #0]
     90e:	687b      	ldr	r3, [r7, #4]
     910:	0018      	movs	r0, r3
     912:	f7ff ffe1 	bl	8d8 <_ZN6StreamC1Ev>
     916:	4a07      	ldr	r2, [pc, #28]	; (934 <_ZN7Serial_C1ER14USBDeviceClass+0x30>)
     918:	687b      	ldr	r3, [r7, #4]
     91a:	601a      	str	r2, [r3, #0]
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	683a      	ldr	r2, [r7, #0]
     920:	611a      	str	r2, [r3, #16]
     922:	687b      	ldr	r3, [r7, #4]
     924:	2200      	movs	r2, #0
     926:	761a      	strb	r2, [r3, #24]
     928:	687b      	ldr	r3, [r7, #4]
     92a:	0018      	movs	r0, r3
     92c:	46bd      	mov	sp, r7
     92e:	b002      	add	sp, #8
     930:	bd80      	pop	{r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	000031d4 	.word	0x000031d4

00000938 <_ZN7Serial_9availableEv>:
void Serial_::end(void)
{
}

int Serial_::available(void)
{
     938:	b580      	push	{r7, lr}
     93a:	b082      	sub	sp, #8
     93c:	af00      	add	r7, sp, #0
     93e:	6078      	str	r0, [r7, #4]
	return usb.available(CDC_ENDPOINT_OUT);
     940:	687b      	ldr	r3, [r7, #4]
     942:	691b      	ldr	r3, [r3, #16]
     944:	2102      	movs	r1, #2
     946:	0018      	movs	r0, r3
     948:	f000 fa38 	bl	dbc <_ZN14USBDeviceClass9availableEm>
     94c:	0003      	movs	r3, r0
}
     94e:	0018      	movs	r0, r3
     950:	46bd      	mov	sp, r7
     952:	b002      	add	sp, #8
     954:	bd80      	pop	{r7, pc}

00000956 <_ZN7Serial_17availableForWriteEv>:

int Serial_::availableForWrite(void)
{
     956:	b580      	push	{r7, lr}
     958:	b082      	sub	sp, #8
     95a:	af00      	add	r7, sp, #0
     95c:	6078      	str	r0, [r7, #4]
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
     95e:	233f      	movs	r3, #63	; 0x3f
}
     960:	0018      	movs	r0, r3
     962:	46bd      	mov	sp, r7
     964:	b002      	add	sp, #8
     966:	bd80      	pop	{r7, pc}

00000968 <_ZN7Serial_4peekEv>:

int _serialPeek = -1;

int Serial_::peek(void)
{
     968:	b580      	push	{r7, lr}
     96a:	b082      	sub	sp, #8
     96c:	af00      	add	r7, sp, #0
     96e:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1)
     970:	4b0b      	ldr	r3, [pc, #44]	; (9a0 <_ZN7Serial_4peekEv+0x38>)
     972:	681b      	ldr	r3, [r3, #0]
     974:	3301      	adds	r3, #1
     976:	d002      	beq.n	97e <_ZN7Serial_4peekEv+0x16>
		return _serialPeek;
     978:	4b09      	ldr	r3, [pc, #36]	; (9a0 <_ZN7Serial_4peekEv+0x38>)
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	e00b      	b.n	996 <_ZN7Serial_4peekEv+0x2e>
	_serialPeek = read();
     97e:	687b      	ldr	r3, [r7, #4]
     980:	681b      	ldr	r3, [r3, #0]
     982:	3314      	adds	r3, #20
     984:	681b      	ldr	r3, [r3, #0]
     986:	687a      	ldr	r2, [r7, #4]
     988:	0010      	movs	r0, r2
     98a:	4798      	blx	r3
     98c:	0002      	movs	r2, r0
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <_ZN7Serial_4peekEv+0x38>)
     990:	601a      	str	r2, [r3, #0]
	return _serialPeek;
     992:	4b03      	ldr	r3, [pc, #12]	; (9a0 <_ZN7Serial_4peekEv+0x38>)
     994:	681b      	ldr	r3, [r3, #0]
}
     996:	0018      	movs	r0, r3
     998:	46bd      	mov	sp, r7
     99a:	b002      	add	sp, #8
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	20000008 	.word	0x20000008

000009a4 <_ZN7Serial_4readEv>:

int Serial_::read(void)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	b084      	sub	sp, #16
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
	if (_serialPeek != -1) {
     9ac:	4b0b      	ldr	r3, [pc, #44]	; (9dc <_ZN7Serial_4readEv+0x38>)
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	3301      	adds	r3, #1
     9b2:	d008      	beq.n	9c6 <_ZN7Serial_4readEv+0x22>
		int res = _serialPeek;
     9b4:	4b09      	ldr	r3, [pc, #36]	; (9dc <_ZN7Serial_4readEv+0x38>)
     9b6:	681b      	ldr	r3, [r3, #0]
     9b8:	60fb      	str	r3, [r7, #12]
		_serialPeek = -1;
     9ba:	4b08      	ldr	r3, [pc, #32]	; (9dc <_ZN7Serial_4readEv+0x38>)
     9bc:	2201      	movs	r2, #1
     9be:	4252      	negs	r2, r2
     9c0:	601a      	str	r2, [r3, #0]
		return res;
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	e006      	b.n	9d4 <_ZN7Serial_4readEv+0x30>
	}
	return usb.recv(CDC_ENDPOINT_OUT);
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	691b      	ldr	r3, [r3, #16]
     9ca:	2102      	movs	r1, #2
     9cc:	0018      	movs	r0, r3
     9ce:	f000 fab5 	bl	f3c <_ZN14USBDeviceClass4recvEm>
     9d2:	0003      	movs	r3, r0
}
     9d4:	0018      	movs	r0, r3
     9d6:	46bd      	mov	sp, r7
     9d8:	b004      	add	sp, #16
     9da:	bd80      	pop	{r7, pc}
     9dc:	20000008 	.word	0x20000008

000009e0 <_ZN7Serial_5flushEv>:
	}
	return count;
}

void Serial_::flush(void)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b082      	sub	sp, #8
     9e4:	af00      	add	r7, sp, #0
     9e6:	6078      	str	r0, [r7, #4]
	usb.flush(CDC_ENDPOINT_IN);
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	691b      	ldr	r3, [r3, #16]
     9ec:	2103      	movs	r1, #3
     9ee:	0018      	movs	r0, r3
     9f0:	f000 f9be 	bl	d70 <_ZN14USBDeviceClass5flushEm>
}
     9f4:	46c0      	nop			; (mov r8, r8)
     9f6:	46bd      	mov	sp, r7
     9f8:	b002      	add	sp, #8
     9fa:	bd80      	pop	{r7, pc}

000009fc <_ZN7Serial_5writeEPKhj>:

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b086      	sub	sp, #24
     a00:	af00      	add	r7, sp, #0
     a02:	60f8      	str	r0, [r7, #12]
     a04:	60b9      	str	r1, [r7, #8]
     a06:	607a      	str	r2, [r7, #4]
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     a08:	68fb      	ldr	r3, [r7, #12]
     a0a:	6918      	ldr	r0, [r3, #16]
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	68ba      	ldr	r2, [r7, #8]
     a10:	2103      	movs	r1, #3
     a12:	f000 fae9 	bl	fe8 <_ZN14USBDeviceClass4sendEmPKvm>
     a16:	0003      	movs	r3, r0
     a18:	617b      	str	r3, [r7, #20]

	if (r > 0) {
     a1a:	697b      	ldr	r3, [r7, #20]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d001      	beq.n	a24 <_ZN7Serial_5writeEPKhj+0x28>
		return r;
     a20:	697b      	ldr	r3, [r7, #20]
     a22:	e005      	b.n	a30 <_ZN7Serial_5writeEPKhj+0x34>
	} else {
		setWriteError();
     a24:	68fb      	ldr	r3, [r7, #12]
     a26:	2101      	movs	r1, #1
     a28:	0018      	movs	r0, r3
     a2a:	f7ff ff25 	bl	878 <_ZN5Print13setWriteErrorEi>
		return 0;
     a2e:	2300      	movs	r3, #0
	}
}
     a30:	0018      	movs	r0, r3
     a32:	46bd      	mov	sp, r7
     a34:	b006      	add	sp, #24
     a36:	bd80      	pop	{r7, pc}

00000a38 <_ZN7Serial_5writeEh>:

size_t Serial_::write(uint8_t c) {
     a38:	b580      	push	{r7, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	af00      	add	r7, sp, #0
     a3e:	6078      	str	r0, [r7, #4]
     a40:	000a      	movs	r2, r1
     a42:	1cfb      	adds	r3, r7, #3
     a44:	701a      	strb	r2, [r3, #0]
	return write(&c, 1);
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	681b      	ldr	r3, [r3, #0]
     a4a:	3304      	adds	r3, #4
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	1cf9      	adds	r1, r7, #3
     a50:	6878      	ldr	r0, [r7, #4]
     a52:	2201      	movs	r2, #1
     a54:	4798      	blx	r3
     a56:	0003      	movs	r3, r0
}
     a58:	0018      	movs	r0, r3
     a5a:	46bd      	mov	sp, r7
     a5c:	b002      	add	sp, #8
     a5e:	bd80      	pop	{r7, pc}

00000a60 <_Z41__static_initialization_and_destruction_0ii>:

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
     a60:	b580      	push	{r7, lr}
     a62:	b082      	sub	sp, #8
     a64:	af00      	add	r7, sp, #0
     a66:	6078      	str	r0, [r7, #4]
     a68:	6039      	str	r1, [r7, #0]
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	2b01      	cmp	r3, #1
     a6e:	d109      	bne.n	a84 <_Z41__static_initialization_and_destruction_0ii+0x24>
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	4a06      	ldr	r2, [pc, #24]	; (a8c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     a74:	4293      	cmp	r3, r2
     a76:	d105      	bne.n	a84 <_Z41__static_initialization_and_destruction_0ii+0x24>
     a78:	4a05      	ldr	r2, [pc, #20]	; (a90 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     a7a:	4b06      	ldr	r3, [pc, #24]	; (a94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     a7c:	0011      	movs	r1, r2
     a7e:	0018      	movs	r0, r3
     a80:	f7ff ff40 	bl	904 <_ZN7Serial_C1ER14USBDeviceClass>
     a84:	46c0      	nop			; (mov r8, r8)
     a86:	46bd      	mov	sp, r7
     a88:	b002      	add	sp, #8
     a8a:	bd80      	pop	{r7, pc}
     a8c:	0000ffff 	.word	0x0000ffff
     a90:	20000540 	.word	0x20000540
     a94:	20000074 	.word	0x20000074

00000a98 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
     a98:	b580      	push	{r7, lr}
     a9a:	af00      	add	r7, sp, #0
     a9c:	4b03      	ldr	r3, [pc, #12]	; (aac <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x14>)
     a9e:	0019      	movs	r1, r3
     aa0:	2001      	movs	r0, #1
     aa2:	f7ff ffdd 	bl	a60 <_Z41__static_initialization_and_destruction_0ii>
     aa6:	46bd      	mov	sp, r7
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	0000ffff 	.word	0x0000ffff

00000ab0 <_ZN14USBDeviceClassC1Ev>:
	USBDeviceClass() {};
     ab0:	b580      	push	{r7, lr}
     ab2:	b082      	sub	sp, #8
     ab4:	af00      	add	r7, sp, #0
     ab6:	6078      	str	r0, [r7, #4]
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	0018      	movs	r0, r3
     abc:	46bd      	mov	sp, r7
     abe:	b002      	add	sp, #8
     ac0:	bd80      	pop	{r7, pc}

00000ac2 <_ZN17UsbDeviceDescBankC1Ev>:
  __IO USB_DEVICE_ADDR_Type      ADDR;        /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  __IO USB_DEVICE_PCKSIZE_Type   PCKSIZE;     /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  __IO USB_DEVICE_EXTREG_Type    EXTREG;      /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  __IO USB_DEVICE_STATUS_BK_Type STATUS_BK;   /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8                    Reserved1[0x5];
} UsbDeviceDescBank;
     ac2:	b580      	push	{r7, lr}
     ac4:	b082      	sub	sp, #8
     ac6:	af00      	add	r7, sp, #0
     ac8:	6078      	str	r0, [r7, #4]
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	0018      	movs	r0, r3
     ace:	46bd      	mov	sp, r7
     ad0:	b002      	add	sp, #8
     ad2:	bd80      	pop	{r7, pc}

00000ad4 <_ZN19UsbDeviceDescriptorC1Ev>:

/** \brief USB_DEVICE Descriptor SRAM registers */
#if !(defined(__ASSEMBLY__) || defined(__IAR_SYSTEMS_ASM__))
typedef struct { /* USB is Device */
       UsbDeviceDescBank         DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;
     ad4:	b5b0      	push	{r4, r5, r7, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	af00      	add	r7, sp, #0
     ada:	6078      	str	r0, [r7, #4]
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	2401      	movs	r4, #1
     ae0:	001d      	movs	r5, r3
     ae2:	2c00      	cmp	r4, #0
     ae4:	db05      	blt.n	af2 <_ZN19UsbDeviceDescriptorC1Ev+0x1e>
     ae6:	0028      	movs	r0, r5
     ae8:	f7ff ffeb 	bl	ac2 <_ZN17UsbDeviceDescBankC1Ev>
     aec:	3510      	adds	r5, #16
     aee:	3c01      	subs	r4, #1
     af0:	e7f7      	b.n	ae2 <_ZN19UsbDeviceDescriptorC1Ev+0xe>
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	0018      	movs	r0, r3
     af6:	46bd      	mov	sp, r7
     af8:	b002      	add	sp, #8
     afa:	bdb0      	pop	{r4, r5, r7, pc}

00000afc <_ZN20USBDevice_SAMD21G18xC1Ev>:

typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
     afc:	b5b0      	push	{r4, r5, r7, lr}
     afe:	b082      	sub	sp, #8
     b00:	af00      	add	r7, sp, #0
     b02:	6078      	str	r0, [r7, #4]
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	4a09      	ldr	r2, [pc, #36]	; (b2c <_ZN20USBDevice_SAMD21G18xC1Ev+0x30>)
     b08:	601a      	str	r2, [r3, #0]
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	3304      	adds	r3, #4
     b0e:	2407      	movs	r4, #7
     b10:	001d      	movs	r5, r3
     b12:	2c00      	cmp	r4, #0
     b14:	db05      	blt.n	b22 <_ZN20USBDevice_SAMD21G18xC1Ev+0x26>
     b16:	0028      	movs	r0, r5
     b18:	f7ff ffdc 	bl	ad4 <_ZN19UsbDeviceDescriptorC1Ev>
     b1c:	3520      	adds	r5, #32
     b1e:	3c01      	subs	r4, #1
     b20:	e7f7      	b.n	b12 <_ZN20USBDevice_SAMD21G18xC1Ev+0x16>
		// Empty
	}
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	0018      	movs	r0, r3
     b26:	46bd      	mov	sp, r7
     b28:	b002      	add	sp, #8
     b2a:	bdb0      	pop	{r4, r5, r7, pc}
     b2c:	41005000 	.word	0x41005000

00000b30 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>:

	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     b30:	b580      	push	{r7, lr}
     b32:	b082      	sub	sp, #8
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	000a      	movs	r2, r1
     b3a:	1cfb      	adds	r3, r7, #3
     b3c:	701a      	strb	r2, [r3, #0]
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	681a      	ldr	r2, [r3, #0]
     b42:	1cfb      	adds	r3, r7, #3
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	3308      	adds	r3, #8
     b48:	015b      	lsls	r3, r3, #5
     b4a:	18d3      	adds	r3, r2, r3
     b4c:	79db      	ldrb	r3, [r3, #7]
     b4e:	079b      	lsls	r3, r3, #30
     b50:	0fdb      	lsrs	r3, r3, #31
     b52:	b2db      	uxtb	r3, r3
     b54:	0018      	movs	r0, r3
     b56:	46bd      	mov	sp, r7
     b58:	b002      	add	sp, #8
     b5a:	bd80      	pop	{r7, pc}

00000b5c <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>:

	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
	inline void epBank0AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(1); }
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     b5c:	b580      	push	{r7, lr}
     b5e:	b082      	sub	sp, #8
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
     b64:	000a      	movs	r2, r1
     b66:	1cfb      	adds	r3, r7, #3
     b68:	701a      	strb	r2, [r3, #0]
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	681a      	ldr	r2, [r3, #0]
     b6e:	1cfb      	adds	r3, r7, #3
     b70:	781b      	ldrb	r3, [r3, #0]
     b72:	3308      	adds	r3, #8
     b74:	015b      	lsls	r3, r3, #5
     b76:	18d3      	adds	r3, r2, r3
     b78:	3307      	adds	r3, #7
     b7a:	2201      	movs	r2, #1
     b7c:	701a      	strb	r2, [r3, #0]
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	46bd      	mov	sp, r7
     b82:	b002      	add	sp, #8
     b84:	bd80      	pop	{r7, pc}

00000b86 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>:
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     b86:	b580      	push	{r7, lr}
     b88:	b082      	sub	sp, #8
     b8a:	af00      	add	r7, sp, #0
     b8c:	6078      	str	r0, [r7, #4]
     b8e:	000a      	movs	r2, r1
     b90:	1cfb      	adds	r3, r7, #3
     b92:	701a      	strb	r2, [r3, #0]
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	681a      	ldr	r2, [r3, #0]
     b98:	1cfb      	adds	r3, r7, #3
     b9a:	781b      	ldrb	r3, [r3, #0]
     b9c:	3308      	adds	r3, #8
     b9e:	015b      	lsls	r3, r3, #5
     ba0:	18d3      	adds	r3, r2, r3
     ba2:	3307      	adds	r3, #7
     ba4:	2202      	movs	r2, #2
     ba6:	701a      	strb	r2, [r3, #0]
     ba8:	46c0      	nop			; (mov r8, r8)
     baa:	46bd      	mov	sp, r7
     bac:	b002      	add	sp, #8
     bae:	bd80      	pop	{r7, pc}

00000bb0 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>:

	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     bb0:	b580      	push	{r7, lr}
     bb2:	b082      	sub	sp, #8
     bb4:	af00      	add	r7, sp, #0
     bb6:	6078      	str	r0, [r7, #4]
     bb8:	000a      	movs	r2, r1
     bba:	1cfb      	adds	r3, r7, #3
     bbc:	701a      	strb	r2, [r3, #0]
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	6819      	ldr	r1, [r3, #0]
     bc2:	1cfb      	adds	r3, r7, #3
     bc4:	781a      	ldrb	r2, [r3, #0]
     bc6:	2384      	movs	r3, #132	; 0x84
     bc8:	005b      	lsls	r3, r3, #1
     bca:	0152      	lsls	r2, r2, #5
     bcc:	188a      	adds	r2, r1, r2
     bce:	18d2      	adds	r2, r2, r3
     bd0:	7853      	ldrb	r3, [r2, #1]
     bd2:	2101      	movs	r1, #1
     bd4:	430b      	orrs	r3, r1
     bd6:	7053      	strb	r3, [r2, #1]
     bd8:	46c0      	nop			; (mov r8, r8)
     bda:	46bd      	mov	sp, r7
     bdc:	b002      	add	sp, #8
     bde:	bd80      	pop	{r7, pc}

00000be0 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>:
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

	inline void epBank0DisableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     be0:	b580      	push	{r7, lr}
     be2:	b082      	sub	sp, #8
     be4:	af00      	add	r7, sp, #0
     be6:	6078      	str	r0, [r7, #4]
     be8:	000a      	movs	r2, r1
     bea:	1cfb      	adds	r3, r7, #3
     bec:	701a      	strb	r2, [r3, #0]
     bee:	687b      	ldr	r3, [r7, #4]
     bf0:	6819      	ldr	r1, [r3, #0]
     bf2:	1cfb      	adds	r3, r7, #3
     bf4:	781a      	ldrb	r2, [r3, #0]
     bf6:	2384      	movs	r3, #132	; 0x84
     bf8:	005b      	lsls	r3, r3, #1
     bfa:	0152      	lsls	r2, r2, #5
     bfc:	188a      	adds	r2, r1, r2
     bfe:	18d2      	adds	r2, r2, r3
     c00:	7813      	ldrb	r3, [r2, #0]
     c02:	2101      	movs	r1, #1
     c04:	430b      	orrs	r3, r1
     c06:	7013      	strb	r3, [r2, #0]
     c08:	46c0      	nop			; (mov r8, r8)
     c0a:	46bd      	mov	sp, r7
     c0c:	b002      	add	sp, #8
     c0e:	bd80      	pop	{r7, pc}

00000c10 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>:
	inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

	// Status
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
     c10:	b580      	push	{r7, lr}
     c12:	b082      	sub	sp, #8
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
     c18:	000a      	movs	r2, r1
     c1a:	1cfb      	adds	r3, r7, #3
     c1c:	701a      	strb	r2, [r3, #0]
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	1cfb      	adds	r3, r7, #3
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	3308      	adds	r3, #8
     c28:	015b      	lsls	r3, r3, #5
     c2a:	18d3      	adds	r3, r2, r3
     c2c:	799b      	ldrb	r3, [r3, #6]
     c2e:	061b      	lsls	r3, r3, #24
     c30:	0fdb      	lsrs	r3, r3, #31
     c32:	b2db      	uxtb	r3, r3
     c34:	0018      	movs	r0, r3
     c36:	46bd      	mov	sp, r7
     c38:	b002      	add	sp, #8
     c3a:	bd80      	pop	{r7, pc}

00000c3c <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>:
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     c3c:	b580      	push	{r7, lr}
     c3e:	b082      	sub	sp, #8
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
     c44:	000a      	movs	r2, r1
     c46:	1cfb      	adds	r3, r7, #3
     c48:	701a      	strb	r2, [r3, #0]
     c4a:	687b      	ldr	r3, [r7, #4]
     c4c:	681a      	ldr	r2, [r3, #0]
     c4e:	1cfb      	adds	r3, r7, #3
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	3308      	adds	r3, #8
     c54:	015b      	lsls	r3, r3, #5
     c56:	18d2      	adds	r2, r2, r3
     c58:	7953      	ldrb	r3, [r2, #5]
     c5a:	2180      	movs	r1, #128	; 0x80
     c5c:	4249      	negs	r1, r1
     c5e:	430b      	orrs	r3, r1
     c60:	7153      	strb	r3, [r2, #5]
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	46bd      	mov	sp, r7
     c66:	b002      	add	sp, #8
     c68:	bd80      	pop	{r7, pc}

00000c6a <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>:
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c6a:	b580      	push	{r7, lr}
     c6c:	b082      	sub	sp, #8
     c6e:	af00      	add	r7, sp, #0
     c70:	6078      	str	r0, [r7, #4]
     c72:	000a      	movs	r2, r1
     c74:	1cfb      	adds	r3, r7, #3
     c76:	701a      	strb	r2, [r3, #0]
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	681a      	ldr	r2, [r3, #0]
     c7c:	1cfb      	adds	r3, r7, #3
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	3308      	adds	r3, #8
     c82:	015b      	lsls	r3, r3, #5
     c84:	18d2      	adds	r2, r2, r3
     c86:	7913      	ldrb	r3, [r2, #4]
     c88:	2140      	movs	r1, #64	; 0x40
     c8a:	430b      	orrs	r3, r1
     c8c:	7113      	strb	r3, [r2, #4]
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	46bd      	mov	sp, r7
     c92:	b002      	add	sp, #8
     c94:	bd80      	pop	{r7, pc}

00000c96 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>:
	inline void epBank1SetStallReq(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
	inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
	inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

	// Packet
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     c96:	b580      	push	{r7, lr}
     c98:	b082      	sub	sp, #8
     c9a:	af00      	add	r7, sp, #0
     c9c:	6078      	str	r0, [r7, #4]
     c9e:	000a      	movs	r2, r1
     ca0:	1cfb      	adds	r3, r7, #3
     ca2:	701a      	strb	r2, [r3, #0]
     ca4:	1cfb      	adds	r3, r7, #3
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	687a      	ldr	r2, [r7, #4]
     caa:	015b      	lsls	r3, r3, #5
     cac:	18d3      	adds	r3, r2, r3
     cae:	689b      	ldr	r3, [r3, #8]
     cb0:	049b      	lsls	r3, r3, #18
     cb2:	0c9b      	lsrs	r3, r3, #18
     cb4:	b29b      	uxth	r3, r3
     cb6:	0018      	movs	r0, r3
     cb8:	46bd      	mov	sp, r7
     cba:	b002      	add	sp, #8
     cbc:	bd80      	pop	{r7, pc}

00000cbe <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>:
	inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     cbe:	b580      	push	{r7, lr}
     cc0:	b082      	sub	sp, #8
     cc2:	af00      	add	r7, sp, #0
     cc4:	6078      	str	r0, [r7, #4]
     cc6:	0008      	movs	r0, r1
     cc8:	0011      	movs	r1, r2
     cca:	1cfb      	adds	r3, r7, #3
     ccc:	1c02      	adds	r2, r0, #0
     cce:	701a      	strb	r2, [r3, #0]
     cd0:	003b      	movs	r3, r7
     cd2:	1c0a      	adds	r2, r1, #0
     cd4:	801a      	strh	r2, [r3, #0]
     cd6:	1cfb      	adds	r3, r7, #3
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	003a      	movs	r2, r7
     cdc:	8812      	ldrh	r2, [r2, #0]
     cde:	0492      	lsls	r2, r2, #18
     ce0:	0c92      	lsrs	r2, r2, #18
     ce2:	b291      	uxth	r1, r2
     ce4:	687a      	ldr	r2, [r7, #4]
     ce6:	015b      	lsls	r3, r3, #5
     ce8:	18d3      	adds	r3, r2, r3
     cea:	689a      	ldr	r2, [r3, #8]
     cec:	0489      	lsls	r1, r1, #18
     cee:	0c89      	lsrs	r1, r1, #18
     cf0:	0b92      	lsrs	r2, r2, #14
     cf2:	0392      	lsls	r2, r2, #14
     cf4:	430a      	orrs	r2, r1
     cf6:	609a      	str	r2, [r3, #8]
     cf8:	46c0      	nop			; (mov r8, r8)
     cfa:	46bd      	mov	sp, r7
     cfc:	b002      	add	sp, #8
     cfe:	bd80      	pop	{r7, pc}

00000d00 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>:
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     d00:	b580      	push	{r7, lr}
     d02:	b082      	sub	sp, #8
     d04:	af00      	add	r7, sp, #0
     d06:	6078      	str	r0, [r7, #4]
     d08:	0008      	movs	r0, r1
     d0a:	0011      	movs	r1, r2
     d0c:	1cfb      	adds	r3, r7, #3
     d0e:	1c02      	adds	r2, r0, #0
     d10:	701a      	strb	r2, [r3, #0]
     d12:	003b      	movs	r3, r7
     d14:	1c0a      	adds	r2, r1, #0
     d16:	801a      	strh	r2, [r3, #0]
     d18:	1cfb      	adds	r3, r7, #3
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	003a      	movs	r2, r7
     d1e:	8812      	ldrh	r2, [r2, #0]
     d20:	0492      	lsls	r2, r2, #18
     d22:	0c92      	lsrs	r2, r2, #18
     d24:	b291      	uxth	r1, r2
     d26:	687a      	ldr	r2, [r7, #4]
     d28:	015b      	lsls	r3, r3, #5
     d2a:	18d3      	adds	r3, r2, r3
     d2c:	3310      	adds	r3, #16
     d2e:	689a      	ldr	r2, [r3, #8]
     d30:	0489      	lsls	r1, r1, #18
     d32:	0c89      	lsrs	r1, r1, #18
     d34:	0b92      	lsrs	r2, r2, #14
     d36:	0392      	lsls	r2, r2, #14
     d38:	430a      	orrs	r2, r1
     d3a:	609a      	str	r2, [r3, #8]
     d3c:	46c0      	nop			; (mov r8, r8)
     d3e:	46bd      	mov	sp, r7
     d40:	b002      	add	sp, #8
     d42:	bd80      	pop	{r7, pc}

00000d44 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>:
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d44:	b580      	push	{r7, lr}
     d46:	b084      	sub	sp, #16
     d48:	af00      	add	r7, sp, #0
     d4a:	60f8      	str	r0, [r7, #12]
     d4c:	607a      	str	r2, [r7, #4]
     d4e:	230b      	movs	r3, #11
     d50:	18fb      	adds	r3, r7, r3
     d52:	1c0a      	adds	r2, r1, #0
     d54:	701a      	strb	r2, [r3, #0]
     d56:	230b      	movs	r3, #11
     d58:	18fb      	adds	r3, r7, r3
     d5a:	781b      	ldrb	r3, [r3, #0]
     d5c:	687a      	ldr	r2, [r7, #4]
     d5e:	68f9      	ldr	r1, [r7, #12]
     d60:	015b      	lsls	r3, r3, #5
     d62:	18cb      	adds	r3, r1, r3
     d64:	3314      	adds	r3, #20
     d66:	601a      	str	r2, [r3, #0]
     d68:	46c0      	nop			; (mov r8, r8)
     d6a:	46bd      	mov	sp, r7
     d6c:	b004      	add	sp, #16
     d6e:	bd80      	pop	{r7, pc}

00000d70 <_ZN14USBDeviceClass5flushEm>:
		usbd.epBank0SetReady(ep);
	}
}

void USBDeviceClass::flush(uint32_t ep)
{
     d70:	b580      	push	{r7, lr}
     d72:	b082      	sub	sp, #8
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	6039      	str	r1, [r7, #0]
	if (available(ep)) {
     d7a:	683a      	ldr	r2, [r7, #0]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	0011      	movs	r1, r2
     d80:	0018      	movs	r0, r3
     d82:	f000 f81b 	bl	dbc <_ZN14USBDeviceClass9availableEm>
     d86:	0003      	movs	r3, r0
     d88:	1e5a      	subs	r2, r3, #1
     d8a:	4193      	sbcs	r3, r2
     d8c:	b2db      	uxtb	r3, r3
     d8e:	2b00      	cmp	r3, #0
     d90:	d00d      	beq.n	dae <_ZN14USBDeviceClass5flushEm+0x3e>
		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
     d92:	683b      	ldr	r3, [r7, #0]
     d94:	b2da      	uxtb	r2, r3
     d96:	4b08      	ldr	r3, [pc, #32]	; (db8 <_ZN14USBDeviceClass5flushEm+0x48>)
     d98:	0011      	movs	r1, r2
     d9a:	0018      	movs	r0, r3
     d9c:	f7ff ff4e 	bl	c3c <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

	 	// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
     da0:	683b      	ldr	r3, [r7, #0]
     da2:	b2da      	uxtb	r2, r3
     da4:	4b04      	ldr	r3, [pc, #16]	; (db8 <_ZN14USBDeviceClass5flushEm+0x48>)
     da6:	0011      	movs	r1, r2
     da8:	0018      	movs	r0, r3
     daa:	f7ff feec 	bl	b86 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>
	}
}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	46bd      	mov	sp, r7
     db2:	b002      	add	sp, #8
     db4:	bd80      	pop	{r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	20000090 	.word	0x20000090

00000dbc <_ZN14USBDeviceClass9availableEm>:
	return read;
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b082      	sub	sp, #8
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
     dc4:	6039      	str	r1, [r7, #0]
	if (epHandlers[ep]) {
     dc6:	4b10      	ldr	r3, [pc, #64]	; (e08 <_ZN14USBDeviceClass9availableEm+0x4c>)
     dc8:	683a      	ldr	r2, [r7, #0]
     dca:	0092      	lsls	r2, r2, #2
     dcc:	58d3      	ldr	r3, [r2, r3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00e      	beq.n	df0 <_ZN14USBDeviceClass9availableEm+0x34>
		return epHandlers[ep]->available();
     dd2:	4b0d      	ldr	r3, [pc, #52]	; (e08 <_ZN14USBDeviceClass9availableEm+0x4c>)
     dd4:	683a      	ldr	r2, [r7, #0]
     dd6:	0092      	lsls	r2, r2, #2
     dd8:	58d3      	ldr	r3, [r2, r3]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	3308      	adds	r3, #8
     dde:	681b      	ldr	r3, [r3, #0]
     de0:	4a09      	ldr	r2, [pc, #36]	; (e08 <_ZN14USBDeviceClass9availableEm+0x4c>)
     de2:	6839      	ldr	r1, [r7, #0]
     de4:	0089      	lsls	r1, r1, #2
     de6:	588a      	ldr	r2, [r1, r2]
     de8:	0010      	movs	r0, r2
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
     dee:	e007      	b.n	e00 <_ZN14USBDeviceClass9availableEm+0x44>
	} else {
		return usbd.epBank0ByteCount(ep);
     df0:	683b      	ldr	r3, [r7, #0]
     df2:	b2da      	uxtb	r2, r3
     df4:	4b05      	ldr	r3, [pc, #20]	; (e0c <_ZN14USBDeviceClass9availableEm+0x50>)
     df6:	0011      	movs	r1, r2
     df8:	0018      	movs	r0, r3
     dfa:	f7ff ff4c 	bl	c96 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
     dfe:	0003      	movs	r3, r0
	}
}
     e00:	0018      	movs	r0, r3
     e02:	46bd      	mov	sp, r7
     e04:	b002      	add	sp, #8
     e06:	bd80      	pop	{r7, pc}
     e08:	2000051c 	.word	0x2000051c
     e0c:	20000090 	.word	0x20000090

00000e10 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
     e10:	b580      	push	{r7, lr}
     e12:	b084      	sub	sp, #16
     e14:	af00      	add	r7, sp, #0
     e16:	60f8      	str	r0, [r7, #12]
     e18:	60b9      	str	r1, [r7, #8]
     e1a:	607a      	str	r2, [r7, #4]
     e1c:	603b      	str	r3, [r7, #0]
	if (!_usbConfiguration)
     e1e:	4b42      	ldr	r3, [pc, #264]	; (f28 <_ZN14USBDeviceClass4recvEmPvm+0x118>)
     e20:	681b      	ldr	r3, [r3, #0]
     e22:	425a      	negs	r2, r3
     e24:	4153      	adcs	r3, r2
     e26:	b2db      	uxtb	r3, r3
     e28:	2b00      	cmp	r3, #0
     e2a:	d002      	beq.n	e32 <_ZN14USBDeviceClass4recvEmPvm+0x22>
		return -1;
     e2c:	2301      	movs	r3, #1
     e2e:	425b      	negs	r3, r3
     e30:	e076      	b.n	f20 <_ZN14USBDeviceClass4recvEmPvm+0x110>

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
     e32:	4b3e      	ldr	r3, [pc, #248]	; (f2c <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	b2db      	uxtb	r3, r3
     e38:	425a      	negs	r2, r3
     e3a:	4153      	adcs	r3, r2
     e3c:	b2db      	uxtb	r3, r3
     e3e:	2b00      	cmp	r3, #0
     e40:	d003      	beq.n	e4a <_ZN14USBDeviceClass4recvEmPvm+0x3a>
		digitalWrite(PIN_LED_RXL, LOW);
     e42:	2100      	movs	r1, #0
     e44:	201e      	movs	r0, #30
     e46:	f001 f825 	bl	1e94 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
     e4a:	4b38      	ldr	r3, [pc, #224]	; (f2c <_ZN14USBDeviceClass4recvEmPvm+0x11c>)
     e4c:	2264      	movs	r2, #100	; 0x64
     e4e:	701a      	strb	r2, [r3, #0]
#endif

	if (epHandlers[ep]) {
     e50:	4b37      	ldr	r3, [pc, #220]	; (f30 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
     e52:	68ba      	ldr	r2, [r7, #8]
     e54:	0092      	lsls	r2, r2, #2
     e56:	58d3      	ldr	r3, [r2, r3]
     e58:	2b00      	cmp	r3, #0
     e5a:	d00f      	beq.n	e7c <_ZN14USBDeviceClass4recvEmPvm+0x6c>
		return epHandlers[ep]->recv(_data, len);
     e5c:	4b34      	ldr	r3, [pc, #208]	; (f30 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
     e5e:	68ba      	ldr	r2, [r7, #8]
     e60:	0092      	lsls	r2, r2, #2
     e62:	58d3      	ldr	r3, [r2, r3]
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	3304      	adds	r3, #4
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	4a31      	ldr	r2, [pc, #196]	; (f30 <_ZN14USBDeviceClass4recvEmPvm+0x120>)
     e6c:	68b9      	ldr	r1, [r7, #8]
     e6e:	0089      	lsls	r1, r1, #2
     e70:	5888      	ldr	r0, [r1, r2]
     e72:	683a      	ldr	r2, [r7, #0]
     e74:	6879      	ldr	r1, [r7, #4]
     e76:	4798      	blx	r3
     e78:	0003      	movs	r3, r0
     e7a:	e051      	b.n	f20 <_ZN14USBDeviceClass4recvEmPvm+0x110>
	}

	if (available(ep) < len)
     e7c:	68ba      	ldr	r2, [r7, #8]
     e7e:	68fb      	ldr	r3, [r7, #12]
     e80:	0011      	movs	r1, r2
     e82:	0018      	movs	r0, r3
     e84:	f7ff ff9a 	bl	dbc <_ZN14USBDeviceClass9availableEm>
     e88:	0002      	movs	r2, r0
     e8a:	683b      	ldr	r3, [r7, #0]
     e8c:	429a      	cmp	r2, r3
     e8e:	419b      	sbcs	r3, r3
     e90:	425b      	negs	r3, r3
     e92:	b2db      	uxtb	r3, r3
     e94:	2b00      	cmp	r3, #0
     e96:	d007      	beq.n	ea8 <_ZN14USBDeviceClass4recvEmPvm+0x98>
		len = available(ep);
     e98:	68ba      	ldr	r2, [r7, #8]
     e9a:	68fb      	ldr	r3, [r7, #12]
     e9c:	0011      	movs	r1, r2
     e9e:	0018      	movs	r0, r3
     ea0:	f7ff ff8c 	bl	dbc <_ZN14USBDeviceClass9availableEm>
     ea4:	0003      	movs	r3, r0
     ea6:	603b      	str	r3, [r7, #0]

	armRecv(ep);
     ea8:	68ba      	ldr	r2, [r7, #8]
     eaa:	68fb      	ldr	r3, [r7, #12]
     eac:	0011      	movs	r1, r2
     eae:	0018      	movs	r0, r3
     eb0:	f000 f862 	bl	f78 <_ZN14USBDeviceClass7armRecvEm>

	usbd.epBank0DisableTransferComplete(ep);
     eb4:	68bb      	ldr	r3, [r7, #8]
     eb6:	b2da      	uxtb	r2, r3
     eb8:	4b1e      	ldr	r3, [pc, #120]	; (f34 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
     eba:	0011      	movs	r1, r2
     ebc:	0018      	movs	r0, r3
     ebe:	f7ff fe8f 	bl	be0 <_ZN20USBDevice_SAMD21G18x30epBank0DisableTransferCompleteEh>

	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     ec2:	68bb      	ldr	r3, [r7, #8]
     ec4:	019a      	lsls	r2, r3, #6
     ec6:	4b1c      	ldr	r3, [pc, #112]	; (f38 <_ZN14USBDeviceClass4recvEmPvm+0x128>)
     ec8:	18d1      	adds	r1, r2, r3
     eca:	683a      	ldr	r2, [r7, #0]
     ecc:	687b      	ldr	r3, [r7, #4]
     ece:	0018      	movs	r0, r3
     ed0:	f002 f95e 	bl	3190 <memcpy>

	// release empty buffer
	if (len && !available(ep)) {
     ed4:	683b      	ldr	r3, [r7, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d009      	beq.n	eee <_ZN14USBDeviceClass4recvEmPvm+0xde>
     eda:	68ba      	ldr	r2, [r7, #8]
     edc:	68fb      	ldr	r3, [r7, #12]
     ede:	0011      	movs	r1, r2
     ee0:	0018      	movs	r0, r3
     ee2:	f7ff ff6b 	bl	dbc <_ZN14USBDeviceClass9availableEm>
     ee6:	1e03      	subs	r3, r0, #0
     ee8:	d101      	bne.n	eee <_ZN14USBDeviceClass4recvEmPvm+0xde>
     eea:	2301      	movs	r3, #1
     eec:	e000      	b.n	ef0 <_ZN14USBDeviceClass4recvEmPvm+0xe0>
     eee:	2300      	movs	r3, #0
     ef0:	2b00      	cmp	r3, #0
     ef2:	d014      	beq.n	f1e <_ZN14USBDeviceClass4recvEmPvm+0x10e>
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(ep);
     ef4:	68bb      	ldr	r3, [r7, #8]
     ef6:	b2da      	uxtb	r2, r3
     ef8:	4b0e      	ldr	r3, [pc, #56]	; (f34 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
     efa:	0011      	movs	r1, r2
     efc:	0018      	movs	r0, r3
     efe:	f7ff feb4 	bl	c6a <_ZN20USBDevice_SAMD21G18x17epBank0ResetReadyEh>

		// Clear Transfer complete 0 flag
		usbd.epBank0AckTransferComplete(ep);
     f02:	68bb      	ldr	r3, [r7, #8]
     f04:	b2da      	uxtb	r2, r3
     f06:	4b0b      	ldr	r3, [pc, #44]	; (f34 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
     f08:	0011      	movs	r1, r2
     f0a:	0018      	movs	r0, r3
     f0c:	f7ff fe26 	bl	b5c <_ZN20USBDevice_SAMD21G18x26epBank0AckTransferCompleteEh>

		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
     f10:	68bb      	ldr	r3, [r7, #8]
     f12:	b2da      	uxtb	r2, r3
     f14:	4b07      	ldr	r3, [pc, #28]	; (f34 <_ZN14USBDeviceClass4recvEmPvm+0x124>)
     f16:	0011      	movs	r1, r2
     f18:	0018      	movs	r0, r3
     f1a:	f7ff fe49 	bl	bb0 <_ZN20USBDevice_SAMD21G18x29epBank0EnableTransferCompleteEh>
	}

	return len;
     f1e:	683b      	ldr	r3, [r7, #0]
}
     f20:	0018      	movs	r0, r3
     f22:	46bd      	mov	sp, r7
     f24:	b004      	add	sp, #16
     f26:	bd80      	pop	{r7, pc}
     f28:	20000198 	.word	0x20000198
     f2c:	20000195 	.word	0x20000195
     f30:	2000051c 	.word	0x2000051c
     f34:	20000090 	.word	0x20000090
     f38:	2000019c 	.word	0x2000019c

00000f3c <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
     f3c:	b580      	push	{r7, lr}
     f3e:	b084      	sub	sp, #16
     f40:	af00      	add	r7, sp, #0
     f42:	6078      	str	r0, [r7, #4]
     f44:	6039      	str	r1, [r7, #0]
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
     f46:	230f      	movs	r3, #15
     f48:	18fa      	adds	r2, r7, r3
     f4a:	6839      	ldr	r1, [r7, #0]
     f4c:	6878      	ldr	r0, [r7, #4]
     f4e:	2301      	movs	r3, #1
     f50:	f7ff ff5e 	bl	e10 <_ZN14USBDeviceClass4recvEmPvm>
     f54:	0003      	movs	r3, r0
     f56:	3b01      	subs	r3, #1
     f58:	1e5a      	subs	r2, r3, #1
     f5a:	4193      	sbcs	r3, r2
     f5c:	b2db      	uxtb	r3, r3
     f5e:	2b00      	cmp	r3, #0
     f60:	d002      	beq.n	f68 <_ZN14USBDeviceClass4recvEm+0x2c>
		return -1;
     f62:	2301      	movs	r3, #1
     f64:	425b      	negs	r3, r3
     f66:	e002      	b.n	f6e <_ZN14USBDeviceClass4recvEm+0x32>
	} else {
		return c;
     f68:	230f      	movs	r3, #15
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	781b      	ldrb	r3, [r3, #0]
	}
}
     f6e:	0018      	movs	r0, r3
     f70:	46bd      	mov	sp, r7
     f72:	b004      	add	sp, #16
     f74:	bd80      	pop	{r7, pc}
	...

00000f78 <_ZN14USBDeviceClass7armRecvEm>:
	while (!usbd.epBank0IsTransferComplete(ep)) {}
	return usbd.epBank0ByteCount(ep);
}

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     f78:	b590      	push	{r4, r7, lr}
     f7a:	b085      	sub	sp, #20
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
     f80:	6039      	str	r1, [r7, #0]
	uint16_t count = usbd.epBank0ByteCount(ep);
     f82:	683b      	ldr	r3, [r7, #0]
     f84:	b2da      	uxtb	r2, r3
     f86:	230e      	movs	r3, #14
     f88:	18fc      	adds	r4, r7, r3
     f8a:	4b16      	ldr	r3, [pc, #88]	; (fe4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
     f8c:	0011      	movs	r1, r2
     f8e:	0018      	movs	r0, r3
     f90:	f7ff fe81 	bl	c96 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
     f94:	0003      	movs	r3, r0
     f96:	8023      	strh	r3, [r4, #0]
	if (count >= 64) {
     f98:	230e      	movs	r3, #14
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	881b      	ldrh	r3, [r3, #0]
     f9e:	2b3f      	cmp	r3, #63	; 0x3f
     fa0:	dd0b      	ble.n	fba <_ZN14USBDeviceClass7armRecvEm+0x42>
		usbd.epBank0SetByteCount(ep, count - 64);
     fa2:	683b      	ldr	r3, [r7, #0]
     fa4:	b2d9      	uxtb	r1, r3
     fa6:	230e      	movs	r3, #14
     fa8:	18fb      	adds	r3, r7, r3
     faa:	881b      	ldrh	r3, [r3, #0]
     fac:	3b40      	subs	r3, #64	; 0x40
     fae:	b29a      	uxth	r2, r3
     fb0:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
     fb2:	0018      	movs	r0, r3
     fb4:	f7ff fe83 	bl	cbe <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
     fb8:	e006      	b.n	fc8 <_ZN14USBDeviceClass7armRecvEm+0x50>
	} else {
		usbd.epBank0SetByteCount(ep, 0);
     fba:	683b      	ldr	r3, [r7, #0]
     fbc:	b2d9      	uxtb	r1, r3
     fbe:	4b09      	ldr	r3, [pc, #36]	; (fe4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
     fc0:	2200      	movs	r2, #0
     fc2:	0018      	movs	r0, r3
     fc4:	f7ff fe7b 	bl	cbe <_ZN20USBDevice_SAMD21G18x19epBank0SetByteCountEht>
	}
	return usbd.epBank0ByteCount(ep);
     fc8:	683b      	ldr	r3, [r7, #0]
     fca:	b2da      	uxtb	r2, r3
     fcc:	4b05      	ldr	r3, [pc, #20]	; (fe4 <_ZN14USBDeviceClass7armRecvEm+0x6c>)
     fce:	0011      	movs	r1, r2
     fd0:	0018      	movs	r0, r3
     fd2:	f7ff fe60 	bl	c96 <_ZN20USBDevice_SAMD21G18x16epBank0ByteCountEh>
     fd6:	0003      	movs	r3, r0
     fd8:	b2db      	uxtb	r3, r3
}
     fda:	0018      	movs	r0, r3
     fdc:	46bd      	mov	sp, r7
     fde:	b005      	add	sp, #20
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	20000090 	.word	0x20000090

00000fe8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     fe8:	b580      	push	{r7, lr}
     fea:	b088      	sub	sp, #32
     fec:	af00      	add	r7, sp, #0
     fee:	60f8      	str	r0, [r7, #12]
     ff0:	60b9      	str	r1, [r7, #8]
     ff2:	607a      	str	r2, [r7, #4]
     ff4:	603b      	str	r3, [r7, #0]
	uint32_t written = 0;
     ff6:	2300      	movs	r3, #0
     ff8:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
     ffa:	2300      	movs	r3, #0
     ffc:	61bb      	str	r3, [r7, #24]

	if (!_usbConfiguration)
     ffe:	4b59      	ldr	r3, [pc, #356]	; (1164 <_ZN14USBDeviceClass4sendEmPKvm+0x17c>)
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	425a      	negs	r2, r3
    1004:	4153      	adcs	r3, r2
    1006:	b2db      	uxtb	r3, r3
    1008:	2b00      	cmp	r3, #0
    100a:	d002      	beq.n	1012 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		return -1;
    100c:	2301      	movs	r3, #1
    100e:	425b      	negs	r3, r3
    1010:	e0a4      	b.n	115c <_ZN14USBDeviceClass4sendEmPKvm+0x174>
	if (len > 16384)
    1012:	683a      	ldr	r2, [r7, #0]
    1014:	2380      	movs	r3, #128	; 0x80
    1016:	01db      	lsls	r3, r3, #7
    1018:	429a      	cmp	r2, r3
    101a:	d902      	bls.n	1022 <_ZN14USBDeviceClass4sendEmPKvm+0x3a>
		return -1;
    101c:	2301      	movs	r3, #1
    101e:	425b      	negs	r3, r3
    1020:	e09c      	b.n	115c <_ZN14USBDeviceClass4sendEmPKvm+0x174>

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    1022:	4b51      	ldr	r3, [pc, #324]	; (1168 <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	b2db      	uxtb	r3, r3
    1028:	425a      	negs	r2, r3
    102a:	4153      	adcs	r3, r2
    102c:	b2db      	uxtb	r3, r3
    102e:	2b00      	cmp	r3, #0
    1030:	d003      	beq.n	103a <_ZN14USBDeviceClass4sendEmPKvm+0x52>
		digitalWrite(PIN_LED_TXL, LOW);
    1032:	2100      	movs	r1, #0
    1034:	201f      	movs	r0, #31
    1036:	f000 ff2d 	bl	1e94 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    103a:	4b4b      	ldr	r3, [pc, #300]	; (1168 <_ZN14USBDeviceClass4sendEmPKvm+0x180>)
    103c:	2264      	movs	r2, #100	; 0x64
    103e:	701a      	strb	r2, [r3, #0]
#endif

	// Flash area
	while (len != 0)
    1040:	683b      	ldr	r3, [r7, #0]
    1042:	2b00      	cmp	r3, #0
    1044:	d100      	bne.n	1048 <_ZN14USBDeviceClass4sendEmPKvm+0x60>
    1046:	e088      	b.n	115a <_ZN14USBDeviceClass4sendEmPKvm+0x172>
	{
		if (usbd.epBank1IsReady(ep)) {
    1048:	68bb      	ldr	r3, [r7, #8]
    104a:	b2da      	uxtb	r2, r3
    104c:	4b47      	ldr	r3, [pc, #284]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    104e:	0011      	movs	r1, r2
    1050:	0018      	movs	r0, r3
    1052:	f7ff fddd 	bl	c10 <_ZN20USBDevice_SAMD21G18x14epBank1IsReadyEh>
    1056:	1e03      	subs	r3, r0, #0
    1058:	d03c      	beq.n	10d4 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
			// previous transfer is still not complete

			// convert the timeout from microseconds to a number of times through
			// the wait loop; it takes (roughly) 23 clock cycles per iteration.
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    105a:	4b45      	ldr	r3, [pc, #276]	; (1170 <_ZN14USBDeviceClass4sendEmPKvm+0x188>)
    105c:	681b      	ldr	r3, [r3, #0]
    105e:	4945      	ldr	r1, [pc, #276]	; (1174 <_ZN14USBDeviceClass4sendEmPKvm+0x18c>)
    1060:	0018      	movs	r0, r3
    1062:	f001 ffd7 	bl	3014 <__udivsi3>
    1066:	0003      	movs	r3, r0
    1068:	001a      	movs	r2, r3
    106a:	4b43      	ldr	r3, [pc, #268]	; (1178 <_ZN14USBDeviceClass4sendEmPKvm+0x190>)
    106c:	4353      	muls	r3, r2
    106e:	2117      	movs	r1, #23
    1070:	0018      	movs	r0, r3
    1072:	f001 ffcf 	bl	3014 <__udivsi3>
    1076:	0003      	movs	r3, r0
    1078:	617b      	str	r3, [r7, #20]

			// Wait for (previous) transfer to complete
			// inspired by Paul Stoffregen's work on Teensy
			while (!usbd.epBank1IsTransferComplete(ep)) {
    107a:	68bb      	ldr	r3, [r7, #8]
    107c:	b2da      	uxtb	r2, r3
    107e:	4b3b      	ldr	r3, [pc, #236]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    1080:	0011      	movs	r1, r2
    1082:	0018      	movs	r0, r3
    1084:	f7ff fd54 	bl	b30 <_ZN20USBDevice_SAMD21G18x25epBank1IsTransferCompleteEh>
    1088:	0003      	movs	r3, r0
    108a:	001a      	movs	r2, r3
    108c:	2301      	movs	r3, #1
    108e:	4053      	eors	r3, r2
    1090:	b2db      	uxtb	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	d01e      	beq.n	10d4 <_ZN14USBDeviceClass4sendEmPKvm+0xec>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1096:	4a39      	ldr	r2, [pc, #228]	; (117c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    1098:	68bb      	ldr	r3, [r7, #8]
    109a:	18d3      	adds	r3, r2, r3
    109c:	781b      	ldrb	r3, [r3, #0]
    109e:	2b00      	cmp	r3, #0
    10a0:	d104      	bne.n	10ac <_ZN14USBDeviceClass4sendEmPKvm+0xc4>
    10a2:	697b      	ldr	r3, [r7, #20]
    10a4:	1e5a      	subs	r2, r3, #1
    10a6:	617a      	str	r2, [r7, #20]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d101      	bne.n	10b0 <_ZN14USBDeviceClass4sendEmPKvm+0xc8>
    10ac:	2301      	movs	r3, #1
    10ae:	e000      	b.n	10b2 <_ZN14USBDeviceClass4sendEmPKvm+0xca>
    10b0:	2300      	movs	r3, #0
    10b2:	2b00      	cmp	r3, #0
    10b4:	d0e1      	beq.n	107a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
					LastTransmitTimedOut[ep] = 1;
    10b6:	4a31      	ldr	r2, [pc, #196]	; (117c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    10b8:	68bb      	ldr	r3, [r7, #8]
    10ba:	18d3      	adds	r3, r2, r3
    10bc:	2201      	movs	r2, #1
    10be:	701a      	strb	r2, [r3, #0]

					// set byte count to zero, so that ZLP is sent
					// instead of stale data
					usbd.epBank1SetByteCount(ep, 0);
    10c0:	68bb      	ldr	r3, [r7, #8]
    10c2:	b2d9      	uxtb	r1, r3
    10c4:	4b29      	ldr	r3, [pc, #164]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    10c6:	2200      	movs	r2, #0
    10c8:	0018      	movs	r0, r3
    10ca:	f7ff fe19 	bl	d00 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>
					return -1;
    10ce:	2301      	movs	r3, #1
    10d0:	425b      	negs	r3, r3
    10d2:	e043      	b.n	115c <_ZN14USBDeviceClass4sendEmPKvm+0x174>
				}
			}
		}

		LastTransmitTimedOut[ep] = 0;
    10d4:	4a29      	ldr	r2, [pc, #164]	; (117c <_ZN14USBDeviceClass4sendEmPKvm+0x194>)
    10d6:	68bb      	ldr	r3, [r7, #8]
    10d8:	18d3      	adds	r3, r2, r3
    10da:	2200      	movs	r2, #0
    10dc:	701a      	strb	r2, [r3, #0]

		if (len >= EPX_SIZE) {
    10de:	683b      	ldr	r3, [r7, #0]
    10e0:	2b3f      	cmp	r3, #63	; 0x3f
    10e2:	d902      	bls.n	10ea <_ZN14USBDeviceClass4sendEmPKvm+0x102>
			length = EPX_SIZE - 1;
    10e4:	233f      	movs	r3, #63	; 0x3f
    10e6:	61bb      	str	r3, [r7, #24]
    10e8:	e001      	b.n	10ee <_ZN14USBDeviceClass4sendEmPKvm+0x106>
		} else {
			length = len;
    10ea:	683b      	ldr	r3, [r7, #0]
    10ec:	61bb      	str	r3, [r7, #24]
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    10ee:	68bb      	ldr	r3, [r7, #8]
    10f0:	019a      	lsls	r2, r3, #6
    10f2:	4b23      	ldr	r3, [pc, #140]	; (1180 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    10f4:	18d3      	adds	r3, r2, r3
    10f6:	69ba      	ldr	r2, [r7, #24]
    10f8:	6879      	ldr	r1, [r7, #4]
    10fa:	0018      	movs	r0, r3
    10fc:	f002 f848 	bl	3190 <memcpy>

		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1100:	68bb      	ldr	r3, [r7, #8]
    1102:	b2d9      	uxtb	r1, r3
    1104:	68bb      	ldr	r3, [r7, #8]
    1106:	019a      	lsls	r2, r3, #6
    1108:	4b1d      	ldr	r3, [pc, #116]	; (1180 <_ZN14USBDeviceClass4sendEmPKvm+0x198>)
    110a:	18d2      	adds	r2, r2, r3
    110c:	4b17      	ldr	r3, [pc, #92]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    110e:	0018      	movs	r0, r3
    1110:	f7ff fe18 	bl	d44 <_ZN20USBDevice_SAMD21G18x17epBank1SetAddressEhPv>
		usbd.epBank1SetByteCount(ep, length);
    1114:	68bb      	ldr	r3, [r7, #8]
    1116:	b2d9      	uxtb	r1, r3
    1118:	69bb      	ldr	r3, [r7, #24]
    111a:	b29a      	uxth	r2, r3
    111c:	4b13      	ldr	r3, [pc, #76]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    111e:	0018      	movs	r0, r3
    1120:	f7ff fdee 	bl	d00 <_ZN20USBDevice_SAMD21G18x19epBank1SetByteCountEht>

		// Clear the transfer complete flag
		usbd.epBank1AckTransferComplete(ep);
    1124:	68bb      	ldr	r3, [r7, #8]
    1126:	b2da      	uxtb	r2, r3
    1128:	4b10      	ldr	r3, [pc, #64]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    112a:	0011      	movs	r1, r2
    112c:	0018      	movs	r0, r3
    112e:	f7ff fd2a 	bl	b86 <_ZN20USBDevice_SAMD21G18x26epBank1AckTransferCompleteEh>

		// RAM buffer is full, we can send data (IN)
		usbd.epBank1SetReady(ep);
    1132:	68bb      	ldr	r3, [r7, #8]
    1134:	b2da      	uxtb	r2, r3
    1136:	4b0d      	ldr	r3, [pc, #52]	; (116c <_ZN14USBDeviceClass4sendEmPKvm+0x184>)
    1138:	0011      	movs	r1, r2
    113a:	0018      	movs	r0, r3
    113c:	f7ff fd7e 	bl	c3c <_ZN20USBDevice_SAMD21G18x15epBank1SetReadyEh>

		written += length;
    1140:	69fa      	ldr	r2, [r7, #28]
    1142:	69bb      	ldr	r3, [r7, #24]
    1144:	18d3      	adds	r3, r2, r3
    1146:	61fb      	str	r3, [r7, #28]
		len -= length;
    1148:	683a      	ldr	r2, [r7, #0]
    114a:	69bb      	ldr	r3, [r7, #24]
    114c:	1ad3      	subs	r3, r2, r3
    114e:	603b      	str	r3, [r7, #0]
		data = (char *)data + length;
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	69bb      	ldr	r3, [r7, #24]
    1154:	18d3      	adds	r3, r2, r3
    1156:	607b      	str	r3, [r7, #4]
	while (len != 0)
    1158:	e772      	b.n	1040 <_ZN14USBDeviceClass4sendEmPKvm+0x58>
	}
	return written;
    115a:	69fb      	ldr	r3, [r7, #28]
}
    115c:	0018      	movs	r0, r3
    115e:	46bd      	mov	sp, r7
    1160:	b008      	add	sp, #32
    1162:	bd80      	pop	{r7, pc}
    1164:	20000198 	.word	0x20000198
    1168:	20000194 	.word	0x20000194
    116c:	20000090 	.word	0x20000090
    1170:	2000000c 	.word	0x2000000c
    1174:	000f4240 	.word	0x000f4240
    1178:	00011170 	.word	0x00011170
    117c:	20000538 	.word	0x20000538
    1180:	2000035c 	.word	0x2000035c

00001184 <_Z41__static_initialization_and_destruction_0ii>:
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1184:	b580      	push	{r7, lr}
    1186:	b082      	sub	sp, #8
    1188:	af00      	add	r7, sp, #0
    118a:	6078      	str	r0, [r7, #4]
    118c:	6039      	str	r1, [r7, #0]
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	2b01      	cmp	r3, #1
    1192:	d10b      	bne.n	11ac <_Z41__static_initialization_and_destruction_0ii+0x28>
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	4a07      	ldr	r2, [pc, #28]	; (11b4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
    1198:	4293      	cmp	r3, r2
    119a:	d107      	bne.n	11ac <_Z41__static_initialization_and_destruction_0ii+0x28>
USBDevice_SAMD21G18x usbd;
    119c:	4b06      	ldr	r3, [pc, #24]	; (11b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    119e:	0018      	movs	r0, r3
    11a0:	f7ff fcac 	bl	afc <_ZN20USBDevice_SAMD21G18xC1Ev>
USBDeviceClass USBDevice;
    11a4:	4b05      	ldr	r3, [pc, #20]	; (11bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
    11a6:	0018      	movs	r0, r3
    11a8:	f7ff fc82 	bl	ab0 <_ZN14USBDeviceClassC1Ev>
    11ac:	46c0      	nop			; (mov r8, r8)
    11ae:	46bd      	mov	sp, r7
    11b0:	b002      	add	sp, #8
    11b2:	bd80      	pop	{r7, pc}
    11b4:	0000ffff 	.word	0x0000ffff
    11b8:	20000090 	.word	0x20000090
    11bc:	20000540 	.word	0x20000540

000011c0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
    11c0:	b580      	push	{r7, lr}
    11c2:	af00      	add	r7, sp, #0
    11c4:	4b03      	ldr	r3, [pc, #12]	; (11d4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x14>)
    11c6:	0019      	movs	r1, r3
    11c8:	2001      	movs	r0, #1
    11ca:	f7ff ffdb 	bl	1184 <_Z41__static_initialization_and_destruction_0ii>
    11ce:	46bd      	mov	sp, r7
    11d0:	bd80      	pop	{r7, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	0000ffff 	.word	0x0000ffff

000011d8 <NVIC_EnableIRQ>:
{
    11d8:	b580      	push	{r7, lr}
    11da:	b082      	sub	sp, #8
    11dc:	af00      	add	r7, sp, #0
    11de:	0002      	movs	r2, r0
    11e0:	1dfb      	adds	r3, r7, #7
    11e2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    11e4:	4b06      	ldr	r3, [pc, #24]	; (1200 <NVIC_EnableIRQ+0x28>)
    11e6:	1dfa      	adds	r2, r7, #7
    11e8:	7812      	ldrb	r2, [r2, #0]
    11ea:	0011      	movs	r1, r2
    11ec:	221f      	movs	r2, #31
    11ee:	400a      	ands	r2, r1
    11f0:	2101      	movs	r1, #1
    11f2:	4091      	lsls	r1, r2
    11f4:	000a      	movs	r2, r1
    11f6:	601a      	str	r2, [r3, #0]
}
    11f8:	46c0      	nop			; (mov r8, r8)
    11fa:	46bd      	mov	sp, r7
    11fc:	b002      	add	sp, #8
    11fe:	bd80      	pop	{r7, pc}
    1200:	e000e100 	.word	0xe000e100

00001204 <NVIC_DisableIRQ>:
{
    1204:	b580      	push	{r7, lr}
    1206:	b082      	sub	sp, #8
    1208:	af00      	add	r7, sp, #0
    120a:	0002      	movs	r2, r0
    120c:	1dfb      	adds	r3, r7, #7
    120e:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1210:	4907      	ldr	r1, [pc, #28]	; (1230 <NVIC_DisableIRQ+0x2c>)
    1212:	1dfb      	adds	r3, r7, #7
    1214:	781b      	ldrb	r3, [r3, #0]
    1216:	001a      	movs	r2, r3
    1218:	231f      	movs	r3, #31
    121a:	4013      	ands	r3, r2
    121c:	2201      	movs	r2, #1
    121e:	409a      	lsls	r2, r3
    1220:	0013      	movs	r3, r2
    1222:	2280      	movs	r2, #128	; 0x80
    1224:	508b      	str	r3, [r1, r2]
}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	46bd      	mov	sp, r7
    122a:	b002      	add	sp, #8
    122c:	bd80      	pop	{r7, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	e000e100 	.word	0xe000e100

00001234 <NVIC_ClearPendingIRQ>:
{
    1234:	b580      	push	{r7, lr}
    1236:	b082      	sub	sp, #8
    1238:	af00      	add	r7, sp, #0
    123a:	0002      	movs	r2, r0
    123c:	1dfb      	adds	r3, r7, #7
    123e:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1240:	4907      	ldr	r1, [pc, #28]	; (1260 <NVIC_ClearPendingIRQ+0x2c>)
    1242:	1dfb      	adds	r3, r7, #7
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	001a      	movs	r2, r3
    1248:	231f      	movs	r3, #31
    124a:	4013      	ands	r3, r2
    124c:	2201      	movs	r2, #1
    124e:	409a      	lsls	r2, r3
    1250:	23c0      	movs	r3, #192	; 0xc0
    1252:	005b      	lsls	r3, r3, #1
    1254:	50ca      	str	r2, [r1, r3]
}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	46bd      	mov	sp, r7
    125a:	b002      	add	sp, #8
    125c:	bd80      	pop	{r7, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	e000e100 	.word	0xe000e100

00001264 <NVIC_SetPriority>:
{
    1264:	b5b0      	push	{r4, r5, r7, lr}
    1266:	b082      	sub	sp, #8
    1268:	af00      	add	r7, sp, #0
    126a:	0002      	movs	r2, r0
    126c:	6039      	str	r1, [r7, #0]
    126e:	1dfb      	adds	r3, r7, #7
    1270:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
    1272:	1dfb      	adds	r3, r7, #7
    1274:	781b      	ldrb	r3, [r3, #0]
    1276:	2b7f      	cmp	r3, #127	; 0x7f
    1278:	d932      	bls.n	12e0 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    127a:	4c2f      	ldr	r4, [pc, #188]	; (1338 <NVIC_SetPriority+0xd4>)
    127c:	1dfb      	adds	r3, r7, #7
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	001a      	movs	r2, r3
    1282:	230f      	movs	r3, #15
    1284:	4013      	ands	r3, r2
    1286:	3b08      	subs	r3, #8
    1288:	0899      	lsrs	r1, r3, #2
    128a:	4a2b      	ldr	r2, [pc, #172]	; (1338 <NVIC_SetPriority+0xd4>)
    128c:	1dfb      	adds	r3, r7, #7
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	0018      	movs	r0, r3
    1292:	230f      	movs	r3, #15
    1294:	4003      	ands	r3, r0
    1296:	3b08      	subs	r3, #8
    1298:	089b      	lsrs	r3, r3, #2
    129a:	3306      	adds	r3, #6
    129c:	009b      	lsls	r3, r3, #2
    129e:	18d3      	adds	r3, r2, r3
    12a0:	3304      	adds	r3, #4
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	1dfa      	adds	r2, r7, #7
    12a6:	7812      	ldrb	r2, [r2, #0]
    12a8:	0010      	movs	r0, r2
    12aa:	2203      	movs	r2, #3
    12ac:	4002      	ands	r2, r0
    12ae:	00d2      	lsls	r2, r2, #3
    12b0:	20ff      	movs	r0, #255	; 0xff
    12b2:	4090      	lsls	r0, r2
    12b4:	0002      	movs	r2, r0
    12b6:	43d2      	mvns	r2, r2
    12b8:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    12ba:	683b      	ldr	r3, [r7, #0]
    12bc:	019b      	lsls	r3, r3, #6
    12be:	20ff      	movs	r0, #255	; 0xff
    12c0:	4018      	ands	r0, r3
    12c2:	1dfb      	adds	r3, r7, #7
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	001d      	movs	r5, r3
    12c8:	2303      	movs	r3, #3
    12ca:	402b      	ands	r3, r5
    12cc:	00db      	lsls	r3, r3, #3
    12ce:	4098      	lsls	r0, r3
    12d0:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    12d2:	431a      	orrs	r2, r3
    12d4:	1d8b      	adds	r3, r1, #6
    12d6:	009b      	lsls	r3, r3, #2
    12d8:	18e3      	adds	r3, r4, r3
    12da:	3304      	adds	r3, #4
    12dc:	601a      	str	r2, [r3, #0]
}
    12de:	e027      	b.n	1330 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    12e0:	4c16      	ldr	r4, [pc, #88]	; (133c <NVIC_SetPriority+0xd8>)
    12e2:	1dfb      	adds	r3, r7, #7
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	b25b      	sxtb	r3, r3
    12e8:	089b      	lsrs	r3, r3, #2
    12ea:	4914      	ldr	r1, [pc, #80]	; (133c <NVIC_SetPriority+0xd8>)
    12ec:	1dfa      	adds	r2, r7, #7
    12ee:	7812      	ldrb	r2, [r2, #0]
    12f0:	b252      	sxtb	r2, r2
    12f2:	0892      	lsrs	r2, r2, #2
    12f4:	32c0      	adds	r2, #192	; 0xc0
    12f6:	0092      	lsls	r2, r2, #2
    12f8:	5852      	ldr	r2, [r2, r1]
    12fa:	1df9      	adds	r1, r7, #7
    12fc:	7809      	ldrb	r1, [r1, #0]
    12fe:	0008      	movs	r0, r1
    1300:	2103      	movs	r1, #3
    1302:	4001      	ands	r1, r0
    1304:	00c9      	lsls	r1, r1, #3
    1306:	20ff      	movs	r0, #255	; 0xff
    1308:	4088      	lsls	r0, r1
    130a:	0001      	movs	r1, r0
    130c:	43c9      	mvns	r1, r1
    130e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1310:	683a      	ldr	r2, [r7, #0]
    1312:	0192      	lsls	r2, r2, #6
    1314:	20ff      	movs	r0, #255	; 0xff
    1316:	4010      	ands	r0, r2
    1318:	1dfa      	adds	r2, r7, #7
    131a:	7812      	ldrb	r2, [r2, #0]
    131c:	0015      	movs	r5, r2
    131e:	2203      	movs	r2, #3
    1320:	402a      	ands	r2, r5
    1322:	00d2      	lsls	r2, r2, #3
    1324:	4090      	lsls	r0, r2
    1326:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1328:	430a      	orrs	r2, r1
    132a:	33c0      	adds	r3, #192	; 0xc0
    132c:	009b      	lsls	r3, r3, #2
    132e:	511a      	str	r2, [r3, r4]
}
    1330:	46c0      	nop			; (mov r8, r8)
    1332:	46bd      	mov	sp, r7
    1334:	b002      	add	sp, #8
    1336:	bdb0      	pop	{r4, r5, r7, pc}
    1338:	e000ed00 	.word	0xe000ed00
    133c:	e000e100 	.word	0xe000e100

00001340 <__initialize>:

static voidFuncPtr callbacksInt[EXTERNAL_NUM_INTERRUPTS];

/* Configure I/O interrupt sources */
static void __initialize()
{
    1340:	b580      	push	{r7, lr}
    1342:	af00      	add	r7, sp, #0
  memset(callbacksInt, 0, sizeof(callbacksInt));
    1344:	4b12      	ldr	r3, [pc, #72]	; (1390 <__initialize+0x50>)
    1346:	2244      	movs	r2, #68	; 0x44
    1348:	2100      	movs	r1, #0
    134a:	0018      	movs	r0, r3
    134c:	f001 ff29 	bl	31a2 <memset>

  NVIC_DisableIRQ(EIC_IRQn);
    1350:	2004      	movs	r0, #4
    1352:	f7ff ff57 	bl	1204 <NVIC_DisableIRQ>
  NVIC_ClearPendingIRQ(EIC_IRQn);
    1356:	2004      	movs	r0, #4
    1358:	f7ff ff6c 	bl	1234 <NVIC_ClearPendingIRQ>
  NVIC_SetPriority(EIC_IRQn, 0);
    135c:	2100      	movs	r1, #0
    135e:	2004      	movs	r0, #4
    1360:	f7ff ff80 	bl	1264 <NVIC_SetPriority>
  NVIC_EnableIRQ(EIC_IRQn);
    1364:	2004      	movs	r0, #4
    1366:	f7ff ff37 	bl	11d8 <NVIC_EnableIRQ>

  // Enable GCLK for IEC (External Interrupt Controller)
  GCLK->CLKCTRL.reg = (uint16_t) (GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID(GCM_EIC));
    136a:	4b0a      	ldr	r3, [pc, #40]	; (1394 <__initialize+0x54>)
    136c:	4a0a      	ldr	r2, [pc, #40]	; (1398 <__initialize+0x58>)
    136e:	805a      	strh	r2, [r3, #2]
  EIC->CTRL.SWRST.bit = 1 ;
  while ((EIC->CTRL.SWRST.bit == 1) && (EIC->STATUS.SYNCBUSY.bit == 1)) { }
*/

  // Enable EIC
  EIC->CTRL.bit.ENABLE = 1;
    1370:	4a0a      	ldr	r2, [pc, #40]	; (139c <__initialize+0x5c>)
    1372:	7813      	ldrb	r3, [r2, #0]
    1374:	2102      	movs	r1, #2
    1376:	430b      	orrs	r3, r1
    1378:	7013      	strb	r3, [r2, #0]
  while (EIC->STATUS.bit.SYNCBUSY == 1) { }
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	4b07      	ldr	r3, [pc, #28]	; (139c <__initialize+0x5c>)
    137e:	785b      	ldrb	r3, [r3, #1]
    1380:	061b      	lsls	r3, r3, #24
    1382:	0fdb      	lsrs	r3, r3, #31
    1384:	b2db      	uxtb	r3, r3
    1386:	2b01      	cmp	r3, #1
    1388:	d0f8      	beq.n	137c <__initialize+0x3c>
}
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	46bd      	mov	sp, r7
    138e:	bd80      	pop	{r7, pc}
    1390:	20000544 	.word	0x20000544
    1394:	40000c00 	.word	0x40000c00
    1398:	00004005 	.word	0x00004005
    139c:	40001800 	.word	0x40001800

000013a0 <attachInterrupt>:
/*
 * \brief Specifies a named Interrupt Service Routine (ISR) to call when an interrupt occurs.
 *        Replaces any previous function that was attached to the interrupt.
 */
void attachInterrupt(uint32_t pin, voidFuncPtr callback, uint32_t mode)
{
    13a0:	b580      	push	{r7, lr}
    13a2:	b088      	sub	sp, #32
    13a4:	af00      	add	r7, sp, #0
    13a6:	60f8      	str	r0, [r7, #12]
    13a8:	60b9      	str	r1, [r7, #8]
    13aa:	607a      	str	r2, [r7, #4]
  static int enabled = 0;
  uint32_t config;
  uint32_t pos;

#if ARDUINO_SAMD_VARIANT_COMPLIANCE >= 10606
  EExt_Interrupts in = g_APinDescription[pin].ulExtInt;
    13ac:	231b      	movs	r3, #27
    13ae:	18f9      	adds	r1, r7, r3
    13b0:	485b      	ldr	r0, [pc, #364]	; (1520 <attachInterrupt+0x180>)
    13b2:	68fa      	ldr	r2, [r7, #12]
    13b4:	0013      	movs	r3, r2
    13b6:	005b      	lsls	r3, r3, #1
    13b8:	189b      	adds	r3, r3, r2
    13ba:	00db      	lsls	r3, r3, #3
    13bc:	18c3      	adds	r3, r0, r3
    13be:	3316      	adds	r3, #22
    13c0:	781b      	ldrb	r3, [r3, #0]
    13c2:	700b      	strb	r3, [r1, #0]
#else
  EExt_Interrupts in = digitalPinToInterrupt(pin);
#endif
  if (in == NOT_AN_INTERRUPT || in == EXTERNAL_INT_NMI)
    13c4:	231b      	movs	r3, #27
    13c6:	18fb      	adds	r3, r7, r3
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	b25b      	sxtb	r3, r3
    13cc:	3301      	adds	r3, #1
    13ce:	d100      	bne.n	13d2 <attachInterrupt+0x32>
    13d0:	e0a1      	b.n	1516 <attachInterrupt+0x176>
    13d2:	231b      	movs	r3, #27
    13d4:	18fb      	adds	r3, r7, r3
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	b25b      	sxtb	r3, r3
    13da:	2b10      	cmp	r3, #16
    13dc:	d100      	bne.n	13e0 <attachInterrupt+0x40>
    13de:	e09a      	b.n	1516 <attachInterrupt+0x176>
    return;

  if (!enabled) {
    13e0:	4b50      	ldr	r3, [pc, #320]	; (1524 <attachInterrupt+0x184>)
    13e2:	681b      	ldr	r3, [r3, #0]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d104      	bne.n	13f2 <attachInterrupt+0x52>
    __initialize();
    13e8:	f7ff ffaa 	bl	1340 <__initialize>
    enabled = 1;
    13ec:	4b4d      	ldr	r3, [pc, #308]	; (1524 <attachInterrupt+0x184>)
    13ee:	2201      	movs	r2, #1
    13f0:	601a      	str	r2, [r3, #0]
  }

  // Enable wakeup capability on pin in case being used during sleep
  EIC->WAKEUP.reg |= (1 << in);
    13f2:	4b4d      	ldr	r3, [pc, #308]	; (1528 <attachInterrupt+0x188>)
    13f4:	4a4c      	ldr	r2, [pc, #304]	; (1528 <attachInterrupt+0x188>)
    13f6:	6952      	ldr	r2, [r2, #20]
    13f8:	211b      	movs	r1, #27
    13fa:	1879      	adds	r1, r7, r1
    13fc:	7809      	ldrb	r1, [r1, #0]
    13fe:	b249      	sxtb	r1, r1
    1400:	2001      	movs	r0, #1
    1402:	4088      	lsls	r0, r1
    1404:	0001      	movs	r1, r0
    1406:	430a      	orrs	r2, r1
    1408:	615a      	str	r2, [r3, #20]

  // Assign pin to EIC
  pinPeripheral(pin, PIO_EXTINT);
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	2100      	movs	r1, #0
    140e:	0018      	movs	r0, r3
    1410:	f000 fdb2 	bl	1f78 <pinPeripheral>

  // Assign callback to interrupt
  callbacksInt[in] = callback;
    1414:	231b      	movs	r3, #27
    1416:	18fb      	adds	r3, r7, r3
    1418:	2200      	movs	r2, #0
    141a:	569a      	ldrsb	r2, [r3, r2]
    141c:	4b43      	ldr	r3, [pc, #268]	; (152c <attachInterrupt+0x18c>)
    141e:	0092      	lsls	r2, r2, #2
    1420:	68b9      	ldr	r1, [r7, #8]
    1422:	50d1      	str	r1, [r2, r3]

  // Look for right CONFIG register to be addressed
  if (in > EXTERNAL_INT_7) {
    1424:	231b      	movs	r3, #27
    1426:	18fb      	adds	r3, r7, r3
    1428:	781b      	ldrb	r3, [r3, #0]
    142a:	b25b      	sxtb	r3, r3
    142c:	2b07      	cmp	r3, #7
    142e:	dd02      	ble.n	1436 <attachInterrupt+0x96>
    config = 1;
    1430:	2301      	movs	r3, #1
    1432:	61fb      	str	r3, [r7, #28]
    1434:	e001      	b.n	143a <attachInterrupt+0x9a>
  } else {
    config = 0;
    1436:	2300      	movs	r3, #0
    1438:	61fb      	str	r3, [r7, #28]
  }

  // Configure the interrupt mode
  pos = (in - (8 * config)) << 2;
    143a:	231b      	movs	r3, #27
    143c:	18fb      	adds	r3, r7, r3
    143e:	2200      	movs	r2, #0
    1440:	569a      	ldrsb	r2, [r3, r2]
    1442:	69fb      	ldr	r3, [r7, #28]
    1444:	00db      	lsls	r3, r3, #3
    1446:	1ad3      	subs	r3, r2, r3
    1448:	009b      	lsls	r3, r3, #2
    144a:	617b      	str	r3, [r7, #20]
  switch (mode)
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	2b04      	cmp	r3, #4
    1450:	d855      	bhi.n	14fe <attachInterrupt+0x15e>
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	009a      	lsls	r2, r3, #2
    1456:	4b36      	ldr	r3, [pc, #216]	; (1530 <attachInterrupt+0x190>)
    1458:	18d3      	adds	r3, r2, r3
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	469f      	mov	pc, r3
  {
    case LOW:
      EIC->CONFIG[config].reg |= EIC_CONFIG_SENSE0_LOW_Val << pos;
    145e:	4932      	ldr	r1, [pc, #200]	; (1528 <attachInterrupt+0x188>)
    1460:	4a31      	ldr	r2, [pc, #196]	; (1528 <attachInterrupt+0x188>)
    1462:	69fb      	ldr	r3, [r7, #28]
    1464:	3306      	adds	r3, #6
    1466:	009b      	lsls	r3, r3, #2
    1468:	589a      	ldr	r2, [r3, r2]
    146a:	2005      	movs	r0, #5
    146c:	697b      	ldr	r3, [r7, #20]
    146e:	4098      	lsls	r0, r3
    1470:	0003      	movs	r3, r0
    1472:	431a      	orrs	r2, r3
    1474:	69fb      	ldr	r3, [r7, #28]
    1476:	3306      	adds	r3, #6
    1478:	009b      	lsls	r3, r3, #2
    147a:	505a      	str	r2, [r3, r1]
      break;
    147c:	e03f      	b.n	14fe <attachInterrupt+0x15e>

    case HIGH:
      EIC->CONFIG[config].reg |= EIC_CONFIG_SENSE0_HIGH_Val << pos;
    147e:	492a      	ldr	r1, [pc, #168]	; (1528 <attachInterrupt+0x188>)
    1480:	4a29      	ldr	r2, [pc, #164]	; (1528 <attachInterrupt+0x188>)
    1482:	69fb      	ldr	r3, [r7, #28]
    1484:	3306      	adds	r3, #6
    1486:	009b      	lsls	r3, r3, #2
    1488:	589a      	ldr	r2, [r3, r2]
    148a:	2004      	movs	r0, #4
    148c:	697b      	ldr	r3, [r7, #20]
    148e:	4098      	lsls	r0, r3
    1490:	0003      	movs	r3, r0
    1492:	431a      	orrs	r2, r3
    1494:	69fb      	ldr	r3, [r7, #28]
    1496:	3306      	adds	r3, #6
    1498:	009b      	lsls	r3, r3, #2
    149a:	505a      	str	r2, [r3, r1]
      break;
    149c:	e02f      	b.n	14fe <attachInterrupt+0x15e>

    case CHANGE:
      EIC->CONFIG[config].reg |= EIC_CONFIG_SENSE0_BOTH_Val << pos;
    149e:	4922      	ldr	r1, [pc, #136]	; (1528 <attachInterrupt+0x188>)
    14a0:	4a21      	ldr	r2, [pc, #132]	; (1528 <attachInterrupt+0x188>)
    14a2:	69fb      	ldr	r3, [r7, #28]
    14a4:	3306      	adds	r3, #6
    14a6:	009b      	lsls	r3, r3, #2
    14a8:	589a      	ldr	r2, [r3, r2]
    14aa:	2003      	movs	r0, #3
    14ac:	697b      	ldr	r3, [r7, #20]
    14ae:	4098      	lsls	r0, r3
    14b0:	0003      	movs	r3, r0
    14b2:	431a      	orrs	r2, r3
    14b4:	69fb      	ldr	r3, [r7, #28]
    14b6:	3306      	adds	r3, #6
    14b8:	009b      	lsls	r3, r3, #2
    14ba:	505a      	str	r2, [r3, r1]
      break;
    14bc:	e01f      	b.n	14fe <attachInterrupt+0x15e>

    case FALLING:
      EIC->CONFIG[config].reg |= EIC_CONFIG_SENSE0_FALL_Val << pos;
    14be:	491a      	ldr	r1, [pc, #104]	; (1528 <attachInterrupt+0x188>)
    14c0:	4a19      	ldr	r2, [pc, #100]	; (1528 <attachInterrupt+0x188>)
    14c2:	69fb      	ldr	r3, [r7, #28]
    14c4:	3306      	adds	r3, #6
    14c6:	009b      	lsls	r3, r3, #2
    14c8:	589a      	ldr	r2, [r3, r2]
    14ca:	2002      	movs	r0, #2
    14cc:	697b      	ldr	r3, [r7, #20]
    14ce:	4098      	lsls	r0, r3
    14d0:	0003      	movs	r3, r0
    14d2:	431a      	orrs	r2, r3
    14d4:	69fb      	ldr	r3, [r7, #28]
    14d6:	3306      	adds	r3, #6
    14d8:	009b      	lsls	r3, r3, #2
    14da:	505a      	str	r2, [r3, r1]
      break;
    14dc:	e00f      	b.n	14fe <attachInterrupt+0x15e>

    case RISING:
      EIC->CONFIG[config].reg |= EIC_CONFIG_SENSE0_RISE_Val << pos;
    14de:	4912      	ldr	r1, [pc, #72]	; (1528 <attachInterrupt+0x188>)
    14e0:	4a11      	ldr	r2, [pc, #68]	; (1528 <attachInterrupt+0x188>)
    14e2:	69fb      	ldr	r3, [r7, #28]
    14e4:	3306      	adds	r3, #6
    14e6:	009b      	lsls	r3, r3, #2
    14e8:	589a      	ldr	r2, [r3, r2]
    14ea:	2001      	movs	r0, #1
    14ec:	697b      	ldr	r3, [r7, #20]
    14ee:	4098      	lsls	r0, r3
    14f0:	0003      	movs	r3, r0
    14f2:	431a      	orrs	r2, r3
    14f4:	69fb      	ldr	r3, [r7, #28]
    14f6:	3306      	adds	r3, #6
    14f8:	009b      	lsls	r3, r3, #2
    14fa:	505a      	str	r2, [r3, r1]
      break;
    14fc:	46c0      	nop			; (mov r8, r8)
  }

  // Enable the interrupt
  EIC->INTENSET.reg = EIC_INTENSET_EXTINT(1 << in);
    14fe:	4b0a      	ldr	r3, [pc, #40]	; (1528 <attachInterrupt+0x188>)
    1500:	221b      	movs	r2, #27
    1502:	18ba      	adds	r2, r7, r2
    1504:	7812      	ldrb	r2, [r2, #0]
    1506:	b252      	sxtb	r2, r2
    1508:	2101      	movs	r1, #1
    150a:	4091      	lsls	r1, r2
    150c:	000a      	movs	r2, r1
    150e:	0412      	lsls	r2, r2, #16
    1510:	0c12      	lsrs	r2, r2, #16
    1512:	60da      	str	r2, [r3, #12]
    1514:	e000      	b.n	1518 <attachInterrupt+0x178>
    return;
    1516:	46c0      	nop			; (mov r8, r8)
}
    1518:	46bd      	mov	sp, r7
    151a:	b008      	add	sp, #32
    151c:	bd80      	pop	{r7, pc}
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	00003284 	.word	0x00003284
    1524:	20000588 	.word	0x20000588
    1528:	40001800 	.word	0x40001800
    152c:	20000544 	.word	0x20000544
    1530:	00003214 	.word	0x00003214

00001534 <EIC_Handler>:

/*
 * External Interrupt Controller NVIC Interrupt Handler
 */
void EIC_Handler(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	b082      	sub	sp, #8
    1538:	af00      	add	r7, sp, #0
  // Test the 16 normal interrupts
  for (uint32_t i=EXTERNAL_INT_0; i<=EXTERNAL_INT_15; i++)
    153a:	2300      	movs	r3, #0
    153c:	607b      	str	r3, [r7, #4]
    153e:	e01b      	b.n	1578 <EIC_Handler+0x44>
  {
    if ((EIC->INTFLAG.reg & (1 << i)) != 0)
    1540:	4b11      	ldr	r3, [pc, #68]	; (1588 <EIC_Handler+0x54>)
    1542:	691b      	ldr	r3, [r3, #16]
    1544:	2101      	movs	r1, #1
    1546:	687a      	ldr	r2, [r7, #4]
    1548:	4091      	lsls	r1, r2
    154a:	000a      	movs	r2, r1
    154c:	4013      	ands	r3, r2
    154e:	d010      	beq.n	1572 <EIC_Handler+0x3e>
    {
      // Call the callback function if assigned
      if (callbacksInt[i]) {
    1550:	4b0e      	ldr	r3, [pc, #56]	; (158c <EIC_Handler+0x58>)
    1552:	687a      	ldr	r2, [r7, #4]
    1554:	0092      	lsls	r2, r2, #2
    1556:	58d3      	ldr	r3, [r2, r3]
    1558:	2b00      	cmp	r3, #0
    155a:	d004      	beq.n	1566 <EIC_Handler+0x32>
        callbacksInt[i]();
    155c:	4b0b      	ldr	r3, [pc, #44]	; (158c <EIC_Handler+0x58>)
    155e:	687a      	ldr	r2, [r7, #4]
    1560:	0092      	lsls	r2, r2, #2
    1562:	58d3      	ldr	r3, [r2, r3]
    1564:	4798      	blx	r3
      }

      // Clear the interrupt
      EIC->INTFLAG.reg = 1 << i;
    1566:	4b08      	ldr	r3, [pc, #32]	; (1588 <EIC_Handler+0x54>)
    1568:	2101      	movs	r1, #1
    156a:	687a      	ldr	r2, [r7, #4]
    156c:	4091      	lsls	r1, r2
    156e:	000a      	movs	r2, r1
    1570:	611a      	str	r2, [r3, #16]
  for (uint32_t i=EXTERNAL_INT_0; i<=EXTERNAL_INT_15; i++)
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	3301      	adds	r3, #1
    1576:	607b      	str	r3, [r7, #4]
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	2b0f      	cmp	r3, #15
    157c:	d9e0      	bls.n	1540 <EIC_Handler+0xc>
    }
  }
}
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	46bd      	mov	sp, r7
    1582:	b002      	add	sp, #8
    1584:	bd80      	pop	{r7, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	40001800 	.word	0x40001800
    158c:	20000544 	.word	0x20000544

00001590 <NVIC_SetPriority>:
{
    1590:	b5b0      	push	{r4, r5, r7, lr}
    1592:	b082      	sub	sp, #8
    1594:	af00      	add	r7, sp, #0
    1596:	0002      	movs	r2, r0
    1598:	6039      	str	r1, [r7, #0]
    159a:	1dfb      	adds	r3, r7, #7
    159c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
    159e:	1dfb      	adds	r3, r7, #7
    15a0:	781b      	ldrb	r3, [r3, #0]
    15a2:	2b7f      	cmp	r3, #127	; 0x7f
    15a4:	d932      	bls.n	160c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15a6:	4c2f      	ldr	r4, [pc, #188]	; (1664 <NVIC_SetPriority+0xd4>)
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	001a      	movs	r2, r3
    15ae:	230f      	movs	r3, #15
    15b0:	4013      	ands	r3, r2
    15b2:	3b08      	subs	r3, #8
    15b4:	0899      	lsrs	r1, r3, #2
    15b6:	4a2b      	ldr	r2, [pc, #172]	; (1664 <NVIC_SetPriority+0xd4>)
    15b8:	1dfb      	adds	r3, r7, #7
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	0018      	movs	r0, r3
    15be:	230f      	movs	r3, #15
    15c0:	4003      	ands	r3, r0
    15c2:	3b08      	subs	r3, #8
    15c4:	089b      	lsrs	r3, r3, #2
    15c6:	3306      	adds	r3, #6
    15c8:	009b      	lsls	r3, r3, #2
    15ca:	18d3      	adds	r3, r2, r3
    15cc:	3304      	adds	r3, #4
    15ce:	681b      	ldr	r3, [r3, #0]
    15d0:	1dfa      	adds	r2, r7, #7
    15d2:	7812      	ldrb	r2, [r2, #0]
    15d4:	0010      	movs	r0, r2
    15d6:	2203      	movs	r2, #3
    15d8:	4002      	ands	r2, r0
    15da:	00d2      	lsls	r2, r2, #3
    15dc:	20ff      	movs	r0, #255	; 0xff
    15de:	4090      	lsls	r0, r2
    15e0:	0002      	movs	r2, r0
    15e2:	43d2      	mvns	r2, r2
    15e4:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    15e6:	683b      	ldr	r3, [r7, #0]
    15e8:	019b      	lsls	r3, r3, #6
    15ea:	20ff      	movs	r0, #255	; 0xff
    15ec:	4018      	ands	r0, r3
    15ee:	1dfb      	adds	r3, r7, #7
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	001d      	movs	r5, r3
    15f4:	2303      	movs	r3, #3
    15f6:	402b      	ands	r3, r5
    15f8:	00db      	lsls	r3, r3, #3
    15fa:	4098      	lsls	r0, r3
    15fc:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15fe:	431a      	orrs	r2, r3
    1600:	1d8b      	adds	r3, r1, #6
    1602:	009b      	lsls	r3, r3, #2
    1604:	18e3      	adds	r3, r4, r3
    1606:	3304      	adds	r3, #4
    1608:	601a      	str	r2, [r3, #0]
}
    160a:	e027      	b.n	165c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    160c:	4c16      	ldr	r4, [pc, #88]	; (1668 <NVIC_SetPriority+0xd8>)
    160e:	1dfb      	adds	r3, r7, #7
    1610:	781b      	ldrb	r3, [r3, #0]
    1612:	b25b      	sxtb	r3, r3
    1614:	089b      	lsrs	r3, r3, #2
    1616:	4914      	ldr	r1, [pc, #80]	; (1668 <NVIC_SetPriority+0xd8>)
    1618:	1dfa      	adds	r2, r7, #7
    161a:	7812      	ldrb	r2, [r2, #0]
    161c:	b252      	sxtb	r2, r2
    161e:	0892      	lsrs	r2, r2, #2
    1620:	32c0      	adds	r2, #192	; 0xc0
    1622:	0092      	lsls	r2, r2, #2
    1624:	5852      	ldr	r2, [r2, r1]
    1626:	1df9      	adds	r1, r7, #7
    1628:	7809      	ldrb	r1, [r1, #0]
    162a:	0008      	movs	r0, r1
    162c:	2103      	movs	r1, #3
    162e:	4001      	ands	r1, r0
    1630:	00c9      	lsls	r1, r1, #3
    1632:	20ff      	movs	r0, #255	; 0xff
    1634:	4088      	lsls	r0, r1
    1636:	0001      	movs	r1, r0
    1638:	43c9      	mvns	r1, r1
    163a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    163c:	683a      	ldr	r2, [r7, #0]
    163e:	0192      	lsls	r2, r2, #6
    1640:	20ff      	movs	r0, #255	; 0xff
    1642:	4010      	ands	r0, r2
    1644:	1dfa      	adds	r2, r7, #7
    1646:	7812      	ldrb	r2, [r2, #0]
    1648:	0015      	movs	r5, r2
    164a:	2203      	movs	r2, #3
    164c:	402a      	ands	r2, r5
    164e:	00d2      	lsls	r2, r2, #3
    1650:	4090      	lsls	r0, r2
    1652:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1654:	430a      	orrs	r2, r1
    1656:	33c0      	adds	r3, #192	; 0xc0
    1658:	009b      	lsls	r3, r3, #2
    165a:	511a      	str	r2, [r3, r4]
}
    165c:	46c0      	nop			; (mov r8, r8)
    165e:	46bd      	mov	sp, r7
    1660:	b002      	add	sp, #8
    1662:	bdb0      	pop	{r4, r5, r7, pc}
    1664:	e000ed00 	.word	0xe000ed00
    1668:	e000e100 	.word	0xe000e100

0000166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	3b01      	subs	r3, #1
    1678:	4a0c      	ldr	r2, [pc, #48]	; (16ac <SysTick_Config+0x40>)
    167a:	4293      	cmp	r3, r2
    167c:	d901      	bls.n	1682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    167e:	2301      	movs	r3, #1
    1680:	e010      	b.n	16a4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1682:	4b0b      	ldr	r3, [pc, #44]	; (16b0 <SysTick_Config+0x44>)
    1684:	687a      	ldr	r2, [r7, #4]
    1686:	3a01      	subs	r2, #1
    1688:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    168a:	2301      	movs	r3, #1
    168c:	425b      	negs	r3, r3
    168e:	2103      	movs	r1, #3
    1690:	0018      	movs	r0, r3
    1692:	f7ff ff7d 	bl	1590 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1696:	4b06      	ldr	r3, [pc, #24]	; (16b0 <SysTick_Config+0x44>)
    1698:	2200      	movs	r2, #0
    169a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    169c:	4b04      	ldr	r3, [pc, #16]	; (16b0 <SysTick_Config+0x44>)
    169e:	2207      	movs	r2, #7
    16a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    16a2:	2300      	movs	r3, #0
}
    16a4:	0018      	movs	r0, r3
    16a6:	46bd      	mov	sp, r7
    16a8:	b002      	add	sp, #8
    16aa:	bd80      	pop	{r7, pc}
    16ac:	00ffffff 	.word	0x00ffffff
    16b0:	e000e010 	.word	0xe000e010

000016b4 <init>:
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz.
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    16b4:	b580      	push	{r7, lr}
    16b6:	af00      	add	r7, sp, #0
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    16b8:	4b35      	ldr	r3, [pc, #212]	; (1790 <init+0xdc>)
    16ba:	681a      	ldr	r2, [r3, #0]
    16bc:	23fa      	movs	r3, #250	; 0xfa
    16be:	0099      	lsls	r1, r3, #2
    16c0:	0010      	movs	r0, r2
    16c2:	f001 fca7 	bl	3014 <__udivsi3>
    16c6:	0003      	movs	r3, r0
    16c8:	0018      	movs	r0, r3
    16ca:	f7ff ffcf 	bl	166c <SysTick_Config>
    16ce:	1e03      	subs	r3, r0, #0
    16d0:	d000      	beq.n	16d4 <init+0x20>
  {
    // Capture error
    while ( 1 ) ;
    16d2:	e7fe      	b.n	16d2 <init+0x1e>
  }
  NVIC_SetPriority (SysTick_IRQn,  (1 << __NVIC_PRIO_BITS) - 2);  /* set Priority for Systick Interrupt (2nd lowest) */
    16d4:	2301      	movs	r3, #1
    16d6:	425b      	negs	r3, r3
    16d8:	2102      	movs	r1, #2
    16da:	0018      	movs	r0, r3
    16dc:	f7ff ff58 	bl	1590 <NVIC_SetPriority>
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    16e0:	4b2c      	ldr	r3, [pc, #176]	; (1794 <init+0xe0>)
    16e2:	4a2c      	ldr	r2, [pc, #176]	; (1794 <init+0xe0>)
    16e4:	6a12      	ldr	r2, [r2, #32]
    16e6:	21fc      	movs	r1, #252	; 0xfc
    16e8:	430a      	orrs	r2, r1
    16ea:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    16ec:	4b29      	ldr	r3, [pc, #164]	; (1794 <init+0xe0>)
    16ee:	4a29      	ldr	r2, [pc, #164]	; (1794 <init+0xe0>)
    16f0:	6a12      	ldr	r2, [r2, #32]
    16f2:	21fc      	movs	r1, #252	; 0xfc
    16f4:	0189      	lsls	r1, r1, #6
    16f6:	430a      	orrs	r2, r1
    16f8:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    16fa:	4b26      	ldr	r3, [pc, #152]	; (1794 <init+0xe0>)
    16fc:	4a25      	ldr	r2, [pc, #148]	; (1794 <init+0xe0>)
    16fe:	6a12      	ldr	r2, [r2, #32]
    1700:	21a0      	movs	r1, #160	; 0xa0
    1702:	02c9      	lsls	r1, r1, #11
    1704:	430a      	orrs	r2, r1
    1706:	621a      	str	r2, [r3, #32]
  //  pinMode( ul, INPUT ) ;
 // }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1708:	46c0      	nop			; (mov r8, r8)
    170a:	4b23      	ldr	r3, [pc, #140]	; (1798 <init+0xe4>)
    170c:	785b      	ldrb	r3, [r3, #1]
    170e:	b2db      	uxtb	r3, r3
    1710:	b25b      	sxtb	r3, r3
    1712:	2b00      	cmp	r3, #0
    1714:	dbf9      	blt.n	170a <init+0x56>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1716:	4b20      	ldr	r3, [pc, #128]	; (1798 <init+0xe4>)
    1718:	4a20      	ldr	r2, [pc, #128]	; (179c <init+0xe8>)
    171a:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    171c:	46c0      	nop			; (mov r8, r8)
    171e:	4b20      	ldr	r3, [pc, #128]	; (17a0 <init+0xec>)
    1720:	7e5b      	ldrb	r3, [r3, #25]
    1722:	061b      	lsls	r3, r3, #24
    1724:	0fdb      	lsrs	r3, r3, #31
    1726:	b2db      	uxtb	r3, r3
    1728:	2b01      	cmp	r3, #1
    172a:	d0f8      	beq.n	171e <init+0x6a>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    172c:	4b1c      	ldr	r3, [pc, #112]	; (17a0 <init+0xec>)
    172e:	22e4      	movs	r2, #228	; 0xe4
    1730:	00d2      	lsls	r2, r2, #3
    1732:	809a      	strh	r2, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1734:	4b1a      	ldr	r3, [pc, #104]	; (17a0 <init+0xec>)
    1736:	223f      	movs	r2, #63	; 0x3f
    1738:	70da      	strb	r2, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	4b18      	ldr	r3, [pc, #96]	; (17a0 <init+0xec>)
    173e:	7e5b      	ldrb	r3, [r3, #25]
    1740:	061b      	lsls	r3, r3, #24
    1742:	0fdb      	lsrs	r3, r3, #31
    1744:	b2db      	uxtb	r3, r3
    1746:	2b01      	cmp	r3, #1
    1748:	d0f8      	beq.n	173c <init+0x88>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    174a:	4b15      	ldr	r3, [pc, #84]	; (17a0 <init+0xec>)
    174c:	22c0      	movs	r2, #192	; 0xc0
    174e:	0152      	lsls	r2, r2, #5
    1750:	611a      	str	r2, [r3, #16]

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1752:	4b13      	ldr	r3, [pc, #76]	; (17a0 <init+0xec>)
    1754:	2200      	movs	r2, #0
    1756:	709a      	strb	r2, [r3, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1758:	2000      	movs	r0, #0
    175a:	f000 f849 	bl	17f0 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	4b0d      	ldr	r3, [pc, #52]	; (1798 <init+0xe4>)
    1762:	785b      	ldrb	r3, [r3, #1]
    1764:	b2db      	uxtb	r3, r3
    1766:	b25b      	sxtb	r3, r3
    1768:	2b00      	cmp	r3, #0
    176a:	dbf9      	blt.n	1760 <init+0xac>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    176c:	4b0a      	ldr	r3, [pc, #40]	; (1798 <init+0xe4>)
    176e:	4a0d      	ldr	r2, [pc, #52]	; (17a4 <init+0xf0>)
    1770:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	4b0c      	ldr	r3, [pc, #48]	; (17a8 <init+0xf4>)
    1776:	79db      	ldrb	r3, [r3, #7]
    1778:	061b      	lsls	r3, r3, #24
    177a:	0fdb      	lsrs	r3, r3, #31
    177c:	b2db      	uxtb	r3, r3
    177e:	2b01      	cmp	r3, #1
    1780:	d0f8      	beq.n	1774 <init+0xc0>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1782:	4b09      	ldr	r3, [pc, #36]	; (17a8 <init+0xf4>)
    1784:	2241      	movs	r2, #65	; 0x41
    1786:	705a      	strb	r2, [r3, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1788:	46c0      	nop			; (mov r8, r8)
    178a:	46bd      	mov	sp, r7
    178c:	bd80      	pop	{r7, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	2000000c 	.word	0x2000000c
    1794:	40000400 	.word	0x40000400
    1798:	40000c00 	.word	0x40000c00
    179c:	0000401e 	.word	0x0000401e
    17a0:	42004000 	.word	0x42004000
    17a4:	00004021 	.word	0x00004021
    17a8:	42004800 	.word	0x42004800

000017ac <mapResolution>:
{
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	b084      	sub	sp, #16
    17b0:	af00      	add	r7, sp, #0
    17b2:	60f8      	str	r0, [r7, #12]
    17b4:	60b9      	str	r1, [r7, #8]
    17b6:	607a      	str	r2, [r7, #4]
  if (from == to) {
    17b8:	68ba      	ldr	r2, [r7, #8]
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	429a      	cmp	r2, r3
    17be:	d101      	bne.n	17c4 <mapResolution+0x18>
    return value;
    17c0:	68fb      	ldr	r3, [r7, #12]
    17c2:	e010      	b.n	17e6 <mapResolution+0x3a>
  }
  if (from > to) {
    17c4:	68ba      	ldr	r2, [r7, #8]
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	429a      	cmp	r2, r3
    17ca:	d906      	bls.n	17da <mapResolution+0x2e>
    return value >> (from-to);
    17cc:	68ba      	ldr	r2, [r7, #8]
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	1ad3      	subs	r3, r2, r3
    17d2:	68fa      	ldr	r2, [r7, #12]
    17d4:	40da      	lsrs	r2, r3
    17d6:	0013      	movs	r3, r2
    17d8:	e005      	b.n	17e6 <mapResolution+0x3a>
  }
  return value << (to-from);
    17da:	687a      	ldr	r2, [r7, #4]
    17dc:	68bb      	ldr	r3, [r7, #8]
    17de:	1ad3      	subs	r3, r2, r3
    17e0:	68fa      	ldr	r2, [r7, #12]
    17e2:	409a      	lsls	r2, r3
    17e4:	0013      	movs	r3, r2
}
    17e6:	0018      	movs	r0, r3
    17e8:	46bd      	mov	sp, r7
    17ea:	b004      	add	sp, #16
    17ec:	bd80      	pop	{r7, pc}
	...

000017f0 <analogReference>:
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    17f0:	b580      	push	{r7, lr}
    17f2:	b082      	sub	sp, #8
    17f4:	af00      	add	r7, sp, #0
    17f6:	0002      	movs	r2, r0
    17f8:	1dfb      	adds	r3, r7, #7
    17fa:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    17fc:	4b2b      	ldr	r3, [pc, #172]	; (18ac <analogReference+0xbc>)
    17fe:	7e5b      	ldrb	r3, [r3, #25]
    1800:	061b      	lsls	r3, r3, #24
    1802:	0fdb      	lsrs	r3, r3, #31
    1804:	b2db      	uxtb	r3, r3
    1806:	2b01      	cmp	r3, #1
    1808:	d0f8      	beq.n	17fc <analogReference+0xc>
  syncADC();
  switch (mode)
    180a:	1dfb      	adds	r3, r7, #7
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	2b05      	cmp	r3, #5
    1810:	d839      	bhi.n	1886 <analogReference+0x96>
    1812:	009a      	lsls	r2, r3, #2
    1814:	4b26      	ldr	r3, [pc, #152]	; (18b0 <analogReference+0xc0>)
    1816:	18d3      	adds	r3, r2, r3
    1818:	681b      	ldr	r3, [r3, #0]
    181a:	469f      	mov	pc, r3
  {
    case AR_INTERNAL:
    case AR_INTERNAL2V23:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    181c:	4a23      	ldr	r2, [pc, #140]	; (18ac <analogReference+0xbc>)
    181e:	6913      	ldr	r3, [r2, #16]
    1820:	4924      	ldr	r1, [pc, #144]	; (18b4 <analogReference+0xc4>)
    1822:	400b      	ands	r3, r1
    1824:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1826:	4a21      	ldr	r2, [pc, #132]	; (18ac <analogReference+0xbc>)
    1828:	7853      	ldrb	r3, [r2, #1]
    182a:	210f      	movs	r1, #15
    182c:	438b      	bics	r3, r1
    182e:	1c19      	adds	r1, r3, #0
    1830:	2301      	movs	r3, #1
    1832:	430b      	orrs	r3, r1
    1834:	7053      	strb	r3, [r2, #1]
      break;
    1836:	e035      	b.n	18a4 <analogReference+0xb4>

    case AR_EXTERNAL:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1838:	4a1c      	ldr	r2, [pc, #112]	; (18ac <analogReference+0xbc>)
    183a:	6913      	ldr	r3, [r2, #16]
    183c:	491d      	ldr	r1, [pc, #116]	; (18b4 <analogReference+0xc4>)
    183e:	400b      	ands	r3, r1
    1840:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1842:	4a1a      	ldr	r2, [pc, #104]	; (18ac <analogReference+0xbc>)
    1844:	7853      	ldrb	r3, [r2, #1]
    1846:	210f      	movs	r1, #15
    1848:	438b      	bics	r3, r1
    184a:	1c19      	adds	r1, r3, #0
    184c:	2303      	movs	r3, #3
    184e:	430b      	orrs	r3, r1
    1850:	7053      	strb	r3, [r2, #1]
      break;
    1852:	e027      	b.n	18a4 <analogReference+0xb4>

    case AR_INTERNAL1V0:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1854:	4a15      	ldr	r2, [pc, #84]	; (18ac <analogReference+0xbc>)
    1856:	6913      	ldr	r3, [r2, #16]
    1858:	4916      	ldr	r1, [pc, #88]	; (18b4 <analogReference+0xc4>)
    185a:	400b      	ands	r3, r1
    185c:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
    185e:	4a13      	ldr	r2, [pc, #76]	; (18ac <analogReference+0xbc>)
    1860:	7853      	ldrb	r3, [r2, #1]
    1862:	210f      	movs	r1, #15
    1864:	438b      	bics	r3, r1
    1866:	7053      	strb	r3, [r2, #1]
      break;
    1868:	e01c      	b.n	18a4 <analogReference+0xb4>

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    186a:	4a10      	ldr	r2, [pc, #64]	; (18ac <analogReference+0xbc>)
    186c:	6913      	ldr	r3, [r2, #16]
    186e:	4911      	ldr	r1, [pc, #68]	; (18b4 <analogReference+0xc4>)
    1870:	400b      	ands	r3, r1
    1872:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1874:	4a0d      	ldr	r2, [pc, #52]	; (18ac <analogReference+0xbc>)
    1876:	7853      	ldrb	r3, [r2, #1]
    1878:	210f      	movs	r1, #15
    187a:	438b      	bics	r3, r1
    187c:	1c19      	adds	r1, r3, #0
    187e:	2302      	movs	r3, #2
    1880:	430b      	orrs	r3, r1
    1882:	7053      	strb	r3, [r2, #1]
      break;
    1884:	e00e      	b.n	18a4 <analogReference+0xb4>

    case AR_DEFAULT:
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1886:	4a09      	ldr	r2, [pc, #36]	; (18ac <analogReference+0xbc>)
    1888:	6913      	ldr	r3, [r2, #16]
    188a:	21f0      	movs	r1, #240	; 0xf0
    188c:	0509      	lsls	r1, r1, #20
    188e:	430b      	orrs	r3, r1
    1890:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1892:	4a06      	ldr	r2, [pc, #24]	; (18ac <analogReference+0xbc>)
    1894:	7853      	ldrb	r3, [r2, #1]
    1896:	210f      	movs	r1, #15
    1898:	438b      	bics	r3, r1
    189a:	1c19      	adds	r1, r3, #0
    189c:	2302      	movs	r3, #2
    189e:	430b      	orrs	r3, r1
    18a0:	7053      	strb	r3, [r2, #1]
      break;
    18a2:	46c0      	nop			; (mov r8, r8)
  }
}
    18a4:	46c0      	nop			; (mov r8, r8)
    18a6:	46bd      	mov	sp, r7
    18a8:	b002      	add	sp, #8
    18aa:	bd80      	pop	{r7, pc}
    18ac:	42004000 	.word	0x42004000
    18b0:	00003228 	.word	0x00003228
    18b4:	f0ffffff 	.word	0xf0ffffff

000018b8 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint32_t pin, uint32_t value)
{
    18b8:	b590      	push	{r4, r7, lr}
    18ba:	b0a1      	sub	sp, #132	; 0x84
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	6039      	str	r1, [r7, #0]
  PinDescription pinDesc = g_APinDescription[pin];
    18c2:	2318      	movs	r3, #24
    18c4:	18f8      	adds	r0, r7, r3
    18c6:	49d3      	ldr	r1, [pc, #844]	; (1c14 <analogWrite+0x35c>)
    18c8:	687a      	ldr	r2, [r7, #4]
    18ca:	0013      	movs	r3, r2
    18cc:	005b      	lsls	r3, r3, #1
    18ce:	189b      	adds	r3, r3, r2
    18d0:	00db      	lsls	r3, r3, #3
    18d2:	0002      	movs	r2, r0
    18d4:	18cb      	adds	r3, r1, r3
    18d6:	cb13      	ldmia	r3!, {r0, r1, r4}
    18d8:	c213      	stmia	r2!, {r0, r1, r4}
    18da:	cb13      	ldmia	r3!, {r0, r1, r4}
    18dc:	c213      	stmia	r2!, {r0, r1, r4}
  uint32_t attr = pinDesc.ulPinAttribute;
    18de:	2318      	movs	r3, #24
    18e0:	18fb      	adds	r3, r7, r3
    18e2:	68db      	ldr	r3, [r3, #12]
    18e4:	67fb      	str	r3, [r7, #124]	; 0x7c

  if ((attr & PIN_ATTR_ANALOG) == PIN_ATTR_ANALOG)
    18e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    18e8:	2202      	movs	r2, #2
    18ea:	4013      	ands	r3, r2
    18ec:	d02f      	beq.n	194e <analogWrite+0x96>
  {
    // DAC handling code

    if (pin != PIN_A0) { // Only 1 DAC on A0 (PA02)
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	2b18      	cmp	r3, #24
    18f2:	d000      	beq.n	18f6 <analogWrite+0x3e>
    18f4:	e1a0      	b.n	1c38 <analogWrite+0x380>
      return;
    }

    value = mapResolution(value, _writeResolution, 10);
    18f6:	4bc8      	ldr	r3, [pc, #800]	; (1c18 <analogWrite+0x360>)
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	0019      	movs	r1, r3
    18fc:	683b      	ldr	r3, [r7, #0]
    18fe:	220a      	movs	r2, #10
    1900:	0018      	movs	r0, r3
    1902:	f7ff ff53 	bl	17ac <mapResolution>
    1906:	0003      	movs	r3, r0
    1908:	603b      	str	r3, [r7, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    190a:	4bc4      	ldr	r3, [pc, #784]	; (1c1c <analogWrite+0x364>)
    190c:	79db      	ldrb	r3, [r3, #7]
    190e:	061b      	lsls	r3, r3, #24
    1910:	0fdb      	lsrs	r3, r3, #31
    1912:	b2db      	uxtb	r3, r3
    1914:	2b01      	cmp	r3, #1
    1916:	d0f8      	beq.n	190a <analogWrite+0x52>

    syncDAC();
    DAC->DATA.reg = value & 0x3FF;  // DAC on 10 bits.
    1918:	4ac0      	ldr	r2, [pc, #768]	; (1c1c <analogWrite+0x364>)
    191a:	683b      	ldr	r3, [r7, #0]
    191c:	b29b      	uxth	r3, r3
    191e:	059b      	lsls	r3, r3, #22
    1920:	0d9b      	lsrs	r3, r3, #22
    1922:	b29b      	uxth	r3, r3
    1924:	8113      	strh	r3, [r2, #8]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1926:	4bbd      	ldr	r3, [pc, #756]	; (1c1c <analogWrite+0x364>)
    1928:	79db      	ldrb	r3, [r3, #7]
    192a:	061b      	lsls	r3, r3, #24
    192c:	0fdb      	lsrs	r3, r3, #31
    192e:	b2db      	uxtb	r3, r3
    1930:	2b01      	cmp	r3, #1
    1932:	d0f8      	beq.n	1926 <analogWrite+0x6e>
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC
    1934:	4ab9      	ldr	r2, [pc, #740]	; (1c1c <analogWrite+0x364>)
    1936:	7813      	ldrb	r3, [r2, #0]
    1938:	2102      	movs	r1, #2
    193a:	430b      	orrs	r3, r1
    193c:	7013      	strb	r3, [r2, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    193e:	4bb7      	ldr	r3, [pc, #732]	; (1c1c <analogWrite+0x364>)
    1940:	79db      	ldrb	r3, [r3, #7]
    1942:	061b      	lsls	r3, r3, #24
    1944:	0fdb      	lsrs	r3, r3, #31
    1946:	b2db      	uxtb	r3, r3
    1948:	2b01      	cmp	r3, #1
    194a:	d0f8      	beq.n	193e <analogWrite+0x86>
    syncDAC();
    return;
    194c:	e175      	b.n	1c3a <analogWrite+0x382>
  }

  if ((attr & PIN_ATTR_PWM) == PIN_ATTR_PWM)
    194e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1950:	2208      	movs	r2, #8
    1952:	4013      	ands	r3, r2
    1954:	d100      	bne.n	1958 <analogWrite+0xa0>
    1956:	e13f      	b.n	1bd8 <analogWrite+0x320>
  {
    value = mapResolution(value, _writeResolution, 16);
    1958:	4baf      	ldr	r3, [pc, #700]	; (1c18 <analogWrite+0x360>)
    195a:	681b      	ldr	r3, [r3, #0]
    195c:	0019      	movs	r1, r3
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	2210      	movs	r2, #16
    1962:	0018      	movs	r0, r3
    1964:	f7ff ff22 	bl	17ac <mapResolution>
    1968:	0003      	movs	r3, r0
    196a:	603b      	str	r3, [r7, #0]

    uint32_t tcNum = GetTCNumber(pinDesc.ulPWMChannel);
    196c:	2318      	movs	r3, #24
    196e:	18fb      	adds	r3, r7, r3
    1970:	2212      	movs	r2, #18
    1972:	5e9b      	ldrsh	r3, [r3, r2]
    1974:	121b      	asrs	r3, r3, #8
    1976:	b21b      	sxth	r3, r3
    1978:	67bb      	str	r3, [r7, #120]	; 0x78
    uint8_t tcChannel = GetTCChannelNumber(pinDesc.ulPWMChannel);
    197a:	2318      	movs	r3, #24
    197c:	18fb      	adds	r3, r7, r3
    197e:	2212      	movs	r2, #18
    1980:	5e9a      	ldrsh	r2, [r3, r2]
    1982:	2377      	movs	r3, #119	; 0x77
    1984:	18fb      	adds	r3, r7, r3
    1986:	701a      	strb	r2, [r3, #0]
    static bool tcEnabled[TCC_INST_NUM+TC_INST_NUM];

    if (attr & PIN_ATTR_TIMER) {
    1988:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    198a:	2210      	movs	r2, #16
    198c:	4013      	ands	r3, r2
    198e:	d005      	beq.n	199c <analogWrite+0xe4>
      if (pinDesc.ulPinType == PIO_TIMER_ALT) {
        pinPeripheral(pin, PIO_TIMER_ALT);
      } else
      #endif
      {
        pinPeripheral(pin, PIO_TIMER);
    1990:	687b      	ldr	r3, [r7, #4]
    1992:	2104      	movs	r1, #4
    1994:	0018      	movs	r0, r3
    1996:	f000 faef 	bl	1f78 <pinPeripheral>
    199a:	e004      	b.n	19a6 <analogWrite+0xee>
      }
    } else {
      // We suppose that attr has PIN_ATTR_TIMER_ALT bit set...
      pinPeripheral(pin, PIO_TIMER_ALT);
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	2105      	movs	r1, #5
    19a0:	0018      	movs	r0, r3
    19a2:	f000 fae9 	bl	1f78 <pinPeripheral>
    }

    if (!tcEnabled[tcNum]) {
    19a6:	4a9e      	ldr	r2, [pc, #632]	; (1c20 <analogWrite+0x368>)
    19a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    19aa:	18d3      	adds	r3, r2, r3
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2201      	movs	r2, #1
    19b0:	4053      	eors	r3, r2
    19b2:	b2db      	uxtb	r3, r3
    19b4:	2b00      	cmp	r3, #0
    19b6:	d100      	bne.n	19ba <analogWrite+0x102>
    19b8:	e0ba      	b.n	1b30 <analogWrite+0x278>
      tcEnabled[tcNum] = true;
    19ba:	4a99      	ldr	r2, [pc, #612]	; (1c20 <analogWrite+0x368>)
    19bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    19be:	18d3      	adds	r3, r2, r3
    19c0:	2201      	movs	r2, #1
    19c2:	701a      	strb	r2, [r3, #0]

      uint16_t GCLK_CLKCTRL_IDs[] = {
    19c4:	2308      	movs	r3, #8
    19c6:	18fa      	adds	r2, r7, r3
    19c8:	4b96      	ldr	r3, [pc, #600]	; (1c24 <analogWrite+0x36c>)
    19ca:	0010      	movs	r0, r2
    19cc:	0019      	movs	r1, r3
    19ce:	2310      	movs	r3, #16
    19d0:	001a      	movs	r2, r3
    19d2:	f001 fbdd 	bl	3190 <memcpy>
        GCLK_CLKCTRL_ID(GCM_TC4_TC5),   // TC4
        GCLK_CLKCTRL_ID(GCM_TC4_TC5),   // TC5
        GCLK_CLKCTRL_ID(GCM_TC6_TC7),   // TC6
        GCLK_CLKCTRL_ID(GCM_TC6_TC7),   // TC7
      };
      GCLK->CLKCTRL.reg = (uint16_t) (GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_IDs[tcNum]);
    19d6:	4994      	ldr	r1, [pc, #592]	; (1c28 <analogWrite+0x370>)
    19d8:	2308      	movs	r3, #8
    19da:	18fb      	adds	r3, r7, r3
    19dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
    19de:	0052      	lsls	r2, r2, #1
    19e0:	5ad3      	ldrh	r3, [r2, r3]
    19e2:	2280      	movs	r2, #128	; 0x80
    19e4:	01d2      	lsls	r2, r2, #7
    19e6:	4313      	orrs	r3, r2
    19e8:	b29b      	uxth	r3, r3
    19ea:	804b      	strh	r3, [r1, #2]
      while (GCLK->STATUS.bit.SYNCBUSY == 1);
    19ec:	46c0      	nop			; (mov r8, r8)
    19ee:	4b8e      	ldr	r3, [pc, #568]	; (1c28 <analogWrite+0x370>)
    19f0:	785b      	ldrb	r3, [r3, #1]
    19f2:	061b      	lsls	r3, r3, #24
    19f4:	0fdb      	lsrs	r3, r3, #31
    19f6:	b2db      	uxtb	r3, r3
    19f8:	2b01      	cmp	r3, #1
    19fa:	d0f8      	beq.n	19ee <analogWrite+0x136>

      // Set PORT
      if (tcNum >= TCC_INST_NUM) {
    19fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    19fe:	2b02      	cmp	r3, #2
    1a00:	d94a      	bls.n	1a98 <analogWrite+0x1e0>
        // -- Configure TC
        Tc* TCx = (Tc*) GetTC(pinDesc.ulPWMChannel);
    1a02:	2318      	movs	r3, #24
    1a04:	18fb      	adds	r3, r7, r3
    1a06:	2212      	movs	r2, #18
    1a08:	5e9b      	ldrsh	r3, [r3, r2]
    1a0a:	121b      	asrs	r3, r3, #8
    1a0c:	b21b      	sxth	r3, r3
    1a0e:	001a      	movs	r2, r3
    1a10:	4b86      	ldr	r3, [pc, #536]	; (1c2c <analogWrite+0x374>)
    1a12:	0092      	lsls	r2, r2, #2
    1a14:	58d3      	ldr	r3, [r2, r3]
    1a16:	673b      	str	r3, [r7, #112]	; 0x70
        // Disable TCx
        TCx->COUNT16.CTRLA.bit.ENABLE = 0;
    1a18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1a1a:	8813      	ldrh	r3, [r2, #0]
    1a1c:	2102      	movs	r1, #2
    1a1e:	438b      	bics	r3, r1
    1a20:	8013      	strh	r3, [r2, #0]
    1a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a24:	657b      	str	r3, [r7, #84]	; 0x54
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1a28:	7bdb      	ldrb	r3, [r3, #15]
    1a2a:	061b      	lsls	r3, r3, #24
    1a2c:	0fdb      	lsrs	r3, r3, #31
    1a2e:	b2db      	uxtb	r3, r3
    1a30:	2b00      	cmp	r3, #0
    1a32:	d1f8      	bne.n	1a26 <analogWrite+0x16e>
        syncTC_16(TCx);
        // Set Timer counter Mode to 16 bits, normal PWM
        TCx->COUNT16.CTRLA.reg |= TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_NPWM;
    1a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a36:	881b      	ldrh	r3, [r3, #0]
    1a38:	b29b      	uxth	r3, r3
    1a3a:	2240      	movs	r2, #64	; 0x40
    1a3c:	4313      	orrs	r3, r2
    1a3e:	b29a      	uxth	r2, r3
    1a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a42:	801a      	strh	r2, [r3, #0]
    1a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a46:	65bb      	str	r3, [r7, #88]	; 0x58
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1a4a:	7bdb      	ldrb	r3, [r3, #15]
    1a4c:	061b      	lsls	r3, r3, #24
    1a4e:	0fdb      	lsrs	r3, r3, #31
    1a50:	b2db      	uxtb	r3, r3
    1a52:	2b00      	cmp	r3, #0
    1a54:	d1f8      	bne.n	1a48 <analogWrite+0x190>
        syncTC_16(TCx);
        // Set the initial value
        TCx->COUNT16.CC[tcChannel].reg = (uint32_t) value;
    1a56:	2377      	movs	r3, #119	; 0x77
    1a58:	18fb      	adds	r3, r7, r3
    1a5a:	781a      	ldrb	r2, [r3, #0]
    1a5c:	683b      	ldr	r3, [r7, #0]
    1a5e:	b299      	uxth	r1, r3
    1a60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a62:	320c      	adds	r2, #12
    1a64:	0052      	lsls	r2, r2, #1
    1a66:	52d1      	strh	r1, [r2, r3]
    1a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1a6e:	7bdb      	ldrb	r3, [r3, #15]
    1a70:	061b      	lsls	r3, r3, #24
    1a72:	0fdb      	lsrs	r3, r3, #31
    1a74:	b2db      	uxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	d1f8      	bne.n	1a6c <analogWrite+0x1b4>
        syncTC_16(TCx);
        // Enable TCx
        TCx->COUNT16.CTRLA.bit.ENABLE = 1;
    1a7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1a7c:	8813      	ldrh	r3, [r2, #0]
    1a7e:	2102      	movs	r1, #2
    1a80:	430b      	orrs	r3, r1
    1a82:	8013      	strh	r3, [r2, #0]
    1a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1a86:	663b      	str	r3, [r7, #96]	; 0x60
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1a8a:	7bdb      	ldrb	r3, [r3, #15]
    1a8c:	061b      	lsls	r3, r3, #24
    1a8e:	0fdb      	lsrs	r3, r3, #31
    1a90:	b2db      	uxtb	r3, r3
    1a92:	2b00      	cmp	r3, #0
    1a94:	d1f8      	bne.n	1a88 <analogWrite+0x1d0>
        syncTCC(TCCx);
        TCCx->CTRLBCLR.bit.LUPD = 1;
        syncTCC(TCCx);
      }
    }
    return;
    1a96:	e0d0      	b.n	1c3a <analogWrite+0x382>
        Tcc* TCCx = (Tcc*) GetTC(pinDesc.ulPWMChannel);
    1a98:	2318      	movs	r3, #24
    1a9a:	18fb      	adds	r3, r7, r3
    1a9c:	2212      	movs	r2, #18
    1a9e:	5e9b      	ldrsh	r3, [r3, r2]
    1aa0:	121b      	asrs	r3, r3, #8
    1aa2:	b21b      	sxth	r3, r3
    1aa4:	001a      	movs	r2, r3
    1aa6:	4b61      	ldr	r3, [pc, #388]	; (1c2c <analogWrite+0x374>)
    1aa8:	0092      	lsls	r2, r2, #2
    1aaa:	58d3      	ldr	r3, [r2, r3]
    1aac:	66fb      	str	r3, [r7, #108]	; 0x6c
        TCCx->CTRLA.bit.ENABLE = 0;
    1aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ab0:	681a      	ldr	r2, [r3, #0]
    1ab2:	2102      	movs	r1, #2
    1ab4:	438a      	bics	r2, r1
    1ab6:	601a      	str	r2, [r3, #0]
    1ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1aba:	643b      	str	r3, [r7, #64]	; 0x40
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1abe:	689b      	ldr	r3, [r3, #8]
    1ac0:	4a5b      	ldr	r2, [pc, #364]	; (1c30 <analogWrite+0x378>)
    1ac2:	4013      	ands	r3, r2
    1ac4:	d1fa      	bne.n	1abc <analogWrite+0x204>
        TCCx->WAVE.reg |= TCC_WAVE_WAVEGEN_NPWM;
    1ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1aca:	2202      	movs	r2, #2
    1acc:	431a      	orrs	r2, r3
    1ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ad0:	63da      	str	r2, [r3, #60]	; 0x3c
    1ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ad4:	647b      	str	r3, [r7, #68]	; 0x44
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ad8:	689b      	ldr	r3, [r3, #8]
    1ada:	4a55      	ldr	r2, [pc, #340]	; (1c30 <analogWrite+0x378>)
    1adc:	4013      	ands	r3, r2
    1ade:	d1fa      	bne.n	1ad6 <analogWrite+0x21e>
        TCCx->CC[tcChannel].reg = (uint32_t) value;
    1ae0:	2377      	movs	r3, #119	; 0x77
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	781b      	ldrb	r3, [r3, #0]
    1ae6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    1ae8:	3310      	adds	r3, #16
    1aea:	009b      	lsls	r3, r3, #2
    1aec:	18d3      	adds	r3, r2, r3
    1aee:	3304      	adds	r3, #4
    1af0:	683a      	ldr	r2, [r7, #0]
    1af2:	601a      	str	r2, [r3, #0]
    1af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1af6:	64bb      	str	r3, [r7, #72]	; 0x48
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1afa:	689b      	ldr	r3, [r3, #8]
    1afc:	4a4c      	ldr	r2, [pc, #304]	; (1c30 <analogWrite+0x378>)
    1afe:	4013      	ands	r3, r2
    1b00:	d1fa      	bne.n	1af8 <analogWrite+0x240>
        TCCx->PER.reg = 0xFFFF;
    1b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1b04:	4a4b      	ldr	r2, [pc, #300]	; (1c34 <analogWrite+0x37c>)
    1b06:	641a      	str	r2, [r3, #64]	; 0x40
    1b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1b0e:	689b      	ldr	r3, [r3, #8]
    1b10:	4a47      	ldr	r2, [pc, #284]	; (1c30 <analogWrite+0x378>)
    1b12:	4013      	ands	r3, r2
    1b14:	d1fa      	bne.n	1b0c <analogWrite+0x254>
        TCCx->CTRLA.bit.ENABLE = 1;
    1b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1b18:	681a      	ldr	r2, [r3, #0]
    1b1a:	2102      	movs	r1, #2
    1b1c:	430a      	orrs	r2, r1
    1b1e:	601a      	str	r2, [r3, #0]
    1b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1b22:	653b      	str	r3, [r7, #80]	; 0x50
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1b26:	689b      	ldr	r3, [r3, #8]
    1b28:	4a41      	ldr	r2, [pc, #260]	; (1c30 <analogWrite+0x378>)
    1b2a:	4013      	ands	r3, r2
    1b2c:	d1fa      	bne.n	1b24 <analogWrite+0x26c>
    return;
    1b2e:	e084      	b.n	1c3a <analogWrite+0x382>
      if (tcNum >= TCC_INST_NUM) {
    1b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1b32:	2b02      	cmp	r3, #2
    1b34:	d91d      	bls.n	1b72 <analogWrite+0x2ba>
        Tc* TCx = (Tc*) GetTC(pinDesc.ulPWMChannel);
    1b36:	2318      	movs	r3, #24
    1b38:	18fb      	adds	r3, r7, r3
    1b3a:	2212      	movs	r2, #18
    1b3c:	5e9b      	ldrsh	r3, [r3, r2]
    1b3e:	121b      	asrs	r3, r3, #8
    1b40:	b21b      	sxth	r3, r3
    1b42:	001a      	movs	r2, r3
    1b44:	4b39      	ldr	r3, [pc, #228]	; (1c2c <analogWrite+0x374>)
    1b46:	0092      	lsls	r2, r2, #2
    1b48:	58d3      	ldr	r3, [r2, r3]
    1b4a:	66bb      	str	r3, [r7, #104]	; 0x68
        TCx->COUNT16.CC[tcChannel].reg = (uint32_t) value;
    1b4c:	2377      	movs	r3, #119	; 0x77
    1b4e:	18fb      	adds	r3, r7, r3
    1b50:	781a      	ldrb	r2, [r3, #0]
    1b52:	683b      	ldr	r3, [r7, #0]
    1b54:	b299      	uxth	r1, r3
    1b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b58:	320c      	adds	r2, #12
    1b5a:	0052      	lsls	r2, r2, #1
    1b5c:	52d1      	strh	r1, [r2, r3]
    1b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (TCx->COUNT16.STATUS.bit.SYNCBUSY);
    1b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b64:	7bdb      	ldrb	r3, [r3, #15]
    1b66:	061b      	lsls	r3, r3, #24
    1b68:	0fdb      	lsrs	r3, r3, #31
    1b6a:	b2db      	uxtb	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d1f8      	bne.n	1b62 <analogWrite+0x2aa>
    return;
    1b70:	e063      	b.n	1c3a <analogWrite+0x382>
        Tcc* TCCx = (Tcc*) GetTC(pinDesc.ulPWMChannel);
    1b72:	2318      	movs	r3, #24
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	2212      	movs	r2, #18
    1b78:	5e9b      	ldrsh	r3, [r3, r2]
    1b7a:	121b      	asrs	r3, r3, #8
    1b7c:	b21b      	sxth	r3, r3
    1b7e:	001a      	movs	r2, r3
    1b80:	4b2a      	ldr	r3, [pc, #168]	; (1c2c <analogWrite+0x374>)
    1b82:	0092      	lsls	r2, r2, #2
    1b84:	58d3      	ldr	r3, [r2, r3]
    1b86:	667b      	str	r3, [r7, #100]	; 0x64
        TCCx->CTRLBSET.bit.LUPD = 1;
    1b88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1b8a:	7953      	ldrb	r3, [r2, #5]
    1b8c:	2102      	movs	r1, #2
    1b8e:	430b      	orrs	r3, r1
    1b90:	7153      	strb	r3, [r2, #5]
    1b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1b94:	633b      	str	r3, [r7, #48]	; 0x30
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1b98:	689b      	ldr	r3, [r3, #8]
    1b9a:	4a25      	ldr	r2, [pc, #148]	; (1c30 <analogWrite+0x378>)
    1b9c:	4013      	ands	r3, r2
    1b9e:	d1fa      	bne.n	1b96 <analogWrite+0x2de>
        TCCx->CCB[tcChannel].reg = (uint32_t) value;
    1ba0:	2377      	movs	r3, #119	; 0x77
    1ba2:	18fb      	adds	r3, r7, r3
    1ba4:	781a      	ldrb	r2, [r3, #0]
    1ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1ba8:	321c      	adds	r2, #28
    1baa:	0092      	lsls	r2, r2, #2
    1bac:	6839      	ldr	r1, [r7, #0]
    1bae:	50d1      	str	r1, [r2, r3]
    1bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1bb2:	637b      	str	r3, [r7, #52]	; 0x34
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bb6:	689b      	ldr	r3, [r3, #8]
    1bb8:	4a1d      	ldr	r2, [pc, #116]	; (1c30 <analogWrite+0x378>)
    1bba:	4013      	ands	r3, r2
    1bbc:	d1fa      	bne.n	1bb4 <analogWrite+0x2fc>
        TCCx->CTRLBCLR.bit.LUPD = 1;
    1bbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1bc0:	7913      	ldrb	r3, [r2, #4]
    1bc2:	2102      	movs	r1, #2
    1bc4:	430b      	orrs	r3, r1
    1bc6:	7113      	strb	r3, [r2, #4]
    1bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1bca:	63bb      	str	r3, [r7, #56]	; 0x38
  while (TCCx->SYNCBUSY.reg & TCC_SYNCBUSY_MASK);
    1bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bce:	689b      	ldr	r3, [r3, #8]
    1bd0:	4a17      	ldr	r2, [pc, #92]	; (1c30 <analogWrite+0x378>)
    1bd2:	4013      	ands	r3, r2
    1bd4:	d1fa      	bne.n	1bcc <analogWrite+0x314>
    return;
    1bd6:	e030      	b.n	1c3a <analogWrite+0x382>
  }

  // -- Defaults to digital write
  pinMode(pin, OUTPUT);
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	2101      	movs	r1, #1
    1bdc:	0018      	movs	r0, r3
    1bde:	f000 f82f 	bl	1c40 <pinMode>
  value = mapResolution(value, _writeResolution, 8);
    1be2:	4b0d      	ldr	r3, [pc, #52]	; (1c18 <analogWrite+0x360>)
    1be4:	681b      	ldr	r3, [r3, #0]
    1be6:	0019      	movs	r1, r3
    1be8:	683b      	ldr	r3, [r7, #0]
    1bea:	2208      	movs	r2, #8
    1bec:	0018      	movs	r0, r3
    1bee:	f7ff fddd 	bl	17ac <mapResolution>
    1bf2:	0003      	movs	r3, r0
    1bf4:	603b      	str	r3, [r7, #0]
  if (value < 128) {
    1bf6:	683b      	ldr	r3, [r7, #0]
    1bf8:	2b7f      	cmp	r3, #127	; 0x7f
    1bfa:	d805      	bhi.n	1c08 <analogWrite+0x350>
    digitalWrite(pin, LOW);
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	2100      	movs	r1, #0
    1c00:	0018      	movs	r0, r3
    1c02:	f000 f947 	bl	1e94 <digitalWrite>
    1c06:	e018      	b.n	1c3a <analogWrite+0x382>
  } else {
    digitalWrite(pin, HIGH);
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	2101      	movs	r1, #1
    1c0c:	0018      	movs	r0, r3
    1c0e:	f000 f941 	bl	1e94 <digitalWrite>
    1c12:	e012      	b.n	1c3a <analogWrite+0x382>
    1c14:	00003284 	.word	0x00003284
    1c18:	20000010 	.word	0x20000010
    1c1c:	42004800 	.word	0x42004800
    1c20:	2000058c 	.word	0x2000058c
    1c24:	00003240 	.word	0x00003240
    1c28:	40000c00 	.word	0x40000c00
    1c2c:	20000014 	.word	0x20000014
    1c30:	007f0fff 	.word	0x007f0fff
    1c34:	0000ffff 	.word	0x0000ffff
      return;
    1c38:	46c0      	nop			; (mov r8, r8)
  }
}
    1c3a:	46bd      	mov	sp, r7
    1c3c:	b021      	add	sp, #132	; 0x84
    1c3e:	bd90      	pop	{r4, r7, pc}

00001c40 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    1c40:	b590      	push	{r4, r7, lr}
    1c42:	b083      	sub	sp, #12
    1c44:	af00      	add	r7, sp, #0
    1c46:	6078      	str	r0, [r7, #4]
    1c48:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1c4a:	4990      	ldr	r1, [pc, #576]	; (1e8c <pinMode+0x24c>)
    1c4c:	687a      	ldr	r2, [r7, #4]
    1c4e:	0013      	movs	r3, r2
    1c50:	005b      	lsls	r3, r3, #1
    1c52:	189b      	adds	r3, r3, r2
    1c54:	00db      	lsls	r3, r3, #3
    1c56:	18cb      	adds	r3, r1, r3
    1c58:	3308      	adds	r3, #8
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	b25b      	sxtb	r3, r3
    1c5e:	3301      	adds	r3, #1
    1c60:	d100      	bne.n	1c64 <pinMode+0x24>
    1c62:	e10e      	b.n	1e82 <pinMode+0x242>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1c64:	683b      	ldr	r3, [r7, #0]
    1c66:	2b01      	cmp	r3, #1
    1c68:	d100      	bne.n	1c6c <pinMode+0x2c>
    1c6a:	e0d6      	b.n	1e1a <pinMode+0x1da>
    1c6c:	d305      	bcc.n	1c7a <pinMode+0x3a>
    1c6e:	2b02      	cmp	r3, #2
    1c70:	d037      	beq.n	1ce2 <pinMode+0xa2>
    1c72:	2b03      	cmp	r3, #3
    1c74:	d100      	bne.n	1c78 <pinMode+0x38>
    1c76:	e082      	b.n	1d7e <pinMode+0x13e>
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    default:
      // do nothing
    break ;
    1c78:	e104      	b.n	1e84 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1c7a:	4885      	ldr	r0, [pc, #532]	; (1e90 <pinMode+0x250>)
    1c7c:	4983      	ldr	r1, [pc, #524]	; (1e8c <pinMode+0x24c>)
    1c7e:	687a      	ldr	r2, [r7, #4]
    1c80:	0013      	movs	r3, r2
    1c82:	005b      	lsls	r3, r3, #1
    1c84:	189b      	adds	r3, r3, r2
    1c86:	00db      	lsls	r3, r3, #3
    1c88:	565b      	ldrsb	r3, [r3, r1]
    1c8a:	001c      	movs	r4, r3
    1c8c:	497f      	ldr	r1, [pc, #508]	; (1e8c <pinMode+0x24c>)
    1c8e:	687a      	ldr	r2, [r7, #4]
    1c90:	0013      	movs	r3, r2
    1c92:	005b      	lsls	r3, r3, #1
    1c94:	189b      	adds	r3, r3, r2
    1c96:	00db      	lsls	r3, r3, #3
    1c98:	18cb      	adds	r3, r1, r3
    1c9a:	3304      	adds	r3, #4
    1c9c:	681b      	ldr	r3, [r3, #0]
    1c9e:	2140      	movs	r1, #64	; 0x40
    1ca0:	01e2      	lsls	r2, r4, #7
    1ca2:	1882      	adds	r2, r0, r2
    1ca4:	18d3      	adds	r3, r2, r3
    1ca6:	185b      	adds	r3, r3, r1
    1ca8:	2202      	movs	r2, #2
    1caa:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1cac:	4878      	ldr	r0, [pc, #480]	; (1e90 <pinMode+0x250>)
    1cae:	4977      	ldr	r1, [pc, #476]	; (1e8c <pinMode+0x24c>)
    1cb0:	687a      	ldr	r2, [r7, #4]
    1cb2:	0013      	movs	r3, r2
    1cb4:	005b      	lsls	r3, r3, #1
    1cb6:	189b      	adds	r3, r3, r2
    1cb8:	00db      	lsls	r3, r3, #3
    1cba:	565b      	ldrsb	r3, [r3, r1]
    1cbc:	001c      	movs	r4, r3
    1cbe:	4973      	ldr	r1, [pc, #460]	; (1e8c <pinMode+0x24c>)
    1cc0:	687a      	ldr	r2, [r7, #4]
    1cc2:	0013      	movs	r3, r2
    1cc4:	005b      	lsls	r3, r3, #1
    1cc6:	189b      	adds	r3, r3, r2
    1cc8:	00db      	lsls	r3, r3, #3
    1cca:	18cb      	adds	r3, r1, r3
    1ccc:	3304      	adds	r3, #4
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	2201      	movs	r2, #1
    1cd2:	409a      	lsls	r2, r3
    1cd4:	0013      	movs	r3, r2
    1cd6:	001a      	movs	r2, r3
    1cd8:	01e3      	lsls	r3, r4, #7
    1cda:	18c3      	adds	r3, r0, r3
    1cdc:	3304      	adds	r3, #4
    1cde:	601a      	str	r2, [r3, #0]
    break ;
    1ce0:	e0d0      	b.n	1e84 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1ce2:	486b      	ldr	r0, [pc, #428]	; (1e90 <pinMode+0x250>)
    1ce4:	4969      	ldr	r1, [pc, #420]	; (1e8c <pinMode+0x24c>)
    1ce6:	687a      	ldr	r2, [r7, #4]
    1ce8:	0013      	movs	r3, r2
    1cea:	005b      	lsls	r3, r3, #1
    1cec:	189b      	adds	r3, r3, r2
    1cee:	00db      	lsls	r3, r3, #3
    1cf0:	565b      	ldrsb	r3, [r3, r1]
    1cf2:	001c      	movs	r4, r3
    1cf4:	4965      	ldr	r1, [pc, #404]	; (1e8c <pinMode+0x24c>)
    1cf6:	687a      	ldr	r2, [r7, #4]
    1cf8:	0013      	movs	r3, r2
    1cfa:	005b      	lsls	r3, r3, #1
    1cfc:	189b      	adds	r3, r3, r2
    1cfe:	00db      	lsls	r3, r3, #3
    1d00:	18cb      	adds	r3, r1, r3
    1d02:	3304      	adds	r3, #4
    1d04:	681b      	ldr	r3, [r3, #0]
    1d06:	2140      	movs	r1, #64	; 0x40
    1d08:	01e2      	lsls	r2, r4, #7
    1d0a:	1882      	adds	r2, r0, r2
    1d0c:	18d3      	adds	r3, r2, r3
    1d0e:	185b      	adds	r3, r3, r1
    1d10:	2206      	movs	r2, #6
    1d12:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1d14:	485e      	ldr	r0, [pc, #376]	; (1e90 <pinMode+0x250>)
    1d16:	495d      	ldr	r1, [pc, #372]	; (1e8c <pinMode+0x24c>)
    1d18:	687a      	ldr	r2, [r7, #4]
    1d1a:	0013      	movs	r3, r2
    1d1c:	005b      	lsls	r3, r3, #1
    1d1e:	189b      	adds	r3, r3, r2
    1d20:	00db      	lsls	r3, r3, #3
    1d22:	565b      	ldrsb	r3, [r3, r1]
    1d24:	001c      	movs	r4, r3
    1d26:	4959      	ldr	r1, [pc, #356]	; (1e8c <pinMode+0x24c>)
    1d28:	687a      	ldr	r2, [r7, #4]
    1d2a:	0013      	movs	r3, r2
    1d2c:	005b      	lsls	r3, r3, #1
    1d2e:	189b      	adds	r3, r3, r2
    1d30:	00db      	lsls	r3, r3, #3
    1d32:	18cb      	adds	r3, r1, r3
    1d34:	3304      	adds	r3, #4
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	2201      	movs	r2, #1
    1d3a:	409a      	lsls	r2, r3
    1d3c:	0013      	movs	r3, r2
    1d3e:	001a      	movs	r2, r3
    1d40:	01e3      	lsls	r3, r4, #7
    1d42:	18c3      	adds	r3, r0, r3
    1d44:	3304      	adds	r3, #4
    1d46:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1d48:	4851      	ldr	r0, [pc, #324]	; (1e90 <pinMode+0x250>)
    1d4a:	4950      	ldr	r1, [pc, #320]	; (1e8c <pinMode+0x24c>)
    1d4c:	687a      	ldr	r2, [r7, #4]
    1d4e:	0013      	movs	r3, r2
    1d50:	005b      	lsls	r3, r3, #1
    1d52:	189b      	adds	r3, r3, r2
    1d54:	00db      	lsls	r3, r3, #3
    1d56:	565b      	ldrsb	r3, [r3, r1]
    1d58:	001c      	movs	r4, r3
    1d5a:	494c      	ldr	r1, [pc, #304]	; (1e8c <pinMode+0x24c>)
    1d5c:	687a      	ldr	r2, [r7, #4]
    1d5e:	0013      	movs	r3, r2
    1d60:	005b      	lsls	r3, r3, #1
    1d62:	189b      	adds	r3, r3, r2
    1d64:	00db      	lsls	r3, r3, #3
    1d66:	18cb      	adds	r3, r1, r3
    1d68:	3304      	adds	r3, #4
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	2201      	movs	r2, #1
    1d6e:	409a      	lsls	r2, r3
    1d70:	0013      	movs	r3, r2
    1d72:	001a      	movs	r2, r3
    1d74:	01e3      	lsls	r3, r4, #7
    1d76:	18c3      	adds	r3, r0, r3
    1d78:	3318      	adds	r3, #24
    1d7a:	601a      	str	r2, [r3, #0]
    break ;
    1d7c:	e082      	b.n	1e84 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1d7e:	4844      	ldr	r0, [pc, #272]	; (1e90 <pinMode+0x250>)
    1d80:	4942      	ldr	r1, [pc, #264]	; (1e8c <pinMode+0x24c>)
    1d82:	687a      	ldr	r2, [r7, #4]
    1d84:	0013      	movs	r3, r2
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	189b      	adds	r3, r3, r2
    1d8a:	00db      	lsls	r3, r3, #3
    1d8c:	565b      	ldrsb	r3, [r3, r1]
    1d8e:	001c      	movs	r4, r3
    1d90:	493e      	ldr	r1, [pc, #248]	; (1e8c <pinMode+0x24c>)
    1d92:	687a      	ldr	r2, [r7, #4]
    1d94:	0013      	movs	r3, r2
    1d96:	005b      	lsls	r3, r3, #1
    1d98:	189b      	adds	r3, r3, r2
    1d9a:	00db      	lsls	r3, r3, #3
    1d9c:	18cb      	adds	r3, r1, r3
    1d9e:	3304      	adds	r3, #4
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	2140      	movs	r1, #64	; 0x40
    1da4:	01e2      	lsls	r2, r4, #7
    1da6:	1882      	adds	r2, r0, r2
    1da8:	18d3      	adds	r3, r2, r3
    1daa:	185b      	adds	r3, r3, r1
    1dac:	2206      	movs	r2, #6
    1dae:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1db0:	4837      	ldr	r0, [pc, #220]	; (1e90 <pinMode+0x250>)
    1db2:	4936      	ldr	r1, [pc, #216]	; (1e8c <pinMode+0x24c>)
    1db4:	687a      	ldr	r2, [r7, #4]
    1db6:	0013      	movs	r3, r2
    1db8:	005b      	lsls	r3, r3, #1
    1dba:	189b      	adds	r3, r3, r2
    1dbc:	00db      	lsls	r3, r3, #3
    1dbe:	565b      	ldrsb	r3, [r3, r1]
    1dc0:	001c      	movs	r4, r3
    1dc2:	4932      	ldr	r1, [pc, #200]	; (1e8c <pinMode+0x24c>)
    1dc4:	687a      	ldr	r2, [r7, #4]
    1dc6:	0013      	movs	r3, r2
    1dc8:	005b      	lsls	r3, r3, #1
    1dca:	189b      	adds	r3, r3, r2
    1dcc:	00db      	lsls	r3, r3, #3
    1dce:	18cb      	adds	r3, r1, r3
    1dd0:	3304      	adds	r3, #4
    1dd2:	681b      	ldr	r3, [r3, #0]
    1dd4:	2201      	movs	r2, #1
    1dd6:	409a      	lsls	r2, r3
    1dd8:	0013      	movs	r3, r2
    1dda:	001a      	movs	r2, r3
    1ddc:	01e3      	lsls	r3, r4, #7
    1dde:	18c3      	adds	r3, r0, r3
    1de0:	3304      	adds	r3, #4
    1de2:	601a      	str	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1de4:	482a      	ldr	r0, [pc, #168]	; (1e90 <pinMode+0x250>)
    1de6:	4929      	ldr	r1, [pc, #164]	; (1e8c <pinMode+0x24c>)
    1de8:	687a      	ldr	r2, [r7, #4]
    1dea:	0013      	movs	r3, r2
    1dec:	005b      	lsls	r3, r3, #1
    1dee:	189b      	adds	r3, r3, r2
    1df0:	00db      	lsls	r3, r3, #3
    1df2:	565b      	ldrsb	r3, [r3, r1]
    1df4:	001c      	movs	r4, r3
    1df6:	4925      	ldr	r1, [pc, #148]	; (1e8c <pinMode+0x24c>)
    1df8:	687a      	ldr	r2, [r7, #4]
    1dfa:	0013      	movs	r3, r2
    1dfc:	005b      	lsls	r3, r3, #1
    1dfe:	189b      	adds	r3, r3, r2
    1e00:	00db      	lsls	r3, r3, #3
    1e02:	18cb      	adds	r3, r1, r3
    1e04:	3304      	adds	r3, #4
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	2201      	movs	r2, #1
    1e0a:	409a      	lsls	r2, r3
    1e0c:	0013      	movs	r3, r2
    1e0e:	001a      	movs	r2, r3
    1e10:	01e3      	lsls	r3, r4, #7
    1e12:	18c3      	adds	r3, r0, r3
    1e14:	3314      	adds	r3, #20
    1e16:	601a      	str	r2, [r3, #0]
    break ;
    1e18:	e034      	b.n	1e84 <pinMode+0x244>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1e1a:	481d      	ldr	r0, [pc, #116]	; (1e90 <pinMode+0x250>)
    1e1c:	491b      	ldr	r1, [pc, #108]	; (1e8c <pinMode+0x24c>)
    1e1e:	687a      	ldr	r2, [r7, #4]
    1e20:	0013      	movs	r3, r2
    1e22:	005b      	lsls	r3, r3, #1
    1e24:	189b      	adds	r3, r3, r2
    1e26:	00db      	lsls	r3, r3, #3
    1e28:	565b      	ldrsb	r3, [r3, r1]
    1e2a:	001c      	movs	r4, r3
    1e2c:	4917      	ldr	r1, [pc, #92]	; (1e8c <pinMode+0x24c>)
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	0013      	movs	r3, r2
    1e32:	005b      	lsls	r3, r3, #1
    1e34:	189b      	adds	r3, r3, r2
    1e36:	00db      	lsls	r3, r3, #3
    1e38:	18cb      	adds	r3, r1, r3
    1e3a:	3304      	adds	r3, #4
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	2140      	movs	r1, #64	; 0x40
    1e40:	01e2      	lsls	r2, r4, #7
    1e42:	1882      	adds	r2, r0, r2
    1e44:	18d3      	adds	r3, r2, r3
    1e46:	185b      	adds	r3, r3, r1
    1e48:	2202      	movs	r2, #2
    1e4a:	701a      	strb	r2, [r3, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1e4c:	4810      	ldr	r0, [pc, #64]	; (1e90 <pinMode+0x250>)
    1e4e:	490f      	ldr	r1, [pc, #60]	; (1e8c <pinMode+0x24c>)
    1e50:	687a      	ldr	r2, [r7, #4]
    1e52:	0013      	movs	r3, r2
    1e54:	005b      	lsls	r3, r3, #1
    1e56:	189b      	adds	r3, r3, r2
    1e58:	00db      	lsls	r3, r3, #3
    1e5a:	565b      	ldrsb	r3, [r3, r1]
    1e5c:	001c      	movs	r4, r3
    1e5e:	490b      	ldr	r1, [pc, #44]	; (1e8c <pinMode+0x24c>)
    1e60:	687a      	ldr	r2, [r7, #4]
    1e62:	0013      	movs	r3, r2
    1e64:	005b      	lsls	r3, r3, #1
    1e66:	189b      	adds	r3, r3, r2
    1e68:	00db      	lsls	r3, r3, #3
    1e6a:	18cb      	adds	r3, r1, r3
    1e6c:	3304      	adds	r3, #4
    1e6e:	681b      	ldr	r3, [r3, #0]
    1e70:	2201      	movs	r2, #1
    1e72:	409a      	lsls	r2, r3
    1e74:	0013      	movs	r3, r2
    1e76:	001a      	movs	r2, r3
    1e78:	01e3      	lsls	r3, r4, #7
    1e7a:	18c3      	adds	r3, r0, r3
    1e7c:	3308      	adds	r3, #8
    1e7e:	601a      	str	r2, [r3, #0]
    break ;
    1e80:	e000      	b.n	1e84 <pinMode+0x244>
    return ;
    1e82:	46c0      	nop			; (mov r8, r8)
  }
}
    1e84:	46bd      	mov	sp, r7
    1e86:	b003      	add	sp, #12
    1e88:	bd90      	pop	{r4, r7, pc}
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	00003284 	.word	0x00003284
    1e90:	41004400 	.word	0x41004400

00001e94 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    1e94:	b590      	push	{r4, r7, lr}
    1e96:	b087      	sub	sp, #28
    1e98:	af00      	add	r7, sp, #0
    1e9a:	6078      	str	r0, [r7, #4]
    1e9c:	6039      	str	r1, [r7, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1e9e:	4934      	ldr	r1, [pc, #208]	; (1f70 <digitalWrite+0xdc>)
    1ea0:	687a      	ldr	r2, [r7, #4]
    1ea2:	0013      	movs	r3, r2
    1ea4:	005b      	lsls	r3, r3, #1
    1ea6:	189b      	adds	r3, r3, r2
    1ea8:	00db      	lsls	r3, r3, #3
    1eaa:	18cb      	adds	r3, r1, r3
    1eac:	3308      	adds	r3, #8
    1eae:	781b      	ldrb	r3, [r3, #0]
    1eb0:	b25b      	sxtb	r3, r3
    1eb2:	3301      	adds	r3, #1
    1eb4:	d058      	beq.n	1f68 <digitalWrite+0xd4>
  {
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
    1eb6:	2317      	movs	r3, #23
    1eb8:	18f9      	adds	r1, r7, r3
    1eba:	482d      	ldr	r0, [pc, #180]	; (1f70 <digitalWrite+0xdc>)
    1ebc:	687a      	ldr	r2, [r7, #4]
    1ebe:	0013      	movs	r3, r2
    1ec0:	005b      	lsls	r3, r3, #1
    1ec2:	189b      	adds	r3, r3, r2
    1ec4:	00db      	lsls	r3, r3, #3
    1ec6:	5c1b      	ldrb	r3, [r3, r0]
    1ec8:	700b      	strb	r3, [r1, #0]
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1eca:	4929      	ldr	r1, [pc, #164]	; (1f70 <digitalWrite+0xdc>)
    1ecc:	687a      	ldr	r2, [r7, #4]
    1ece:	0013      	movs	r3, r2
    1ed0:	005b      	lsls	r3, r3, #1
    1ed2:	189b      	adds	r3, r3, r2
    1ed4:	00db      	lsls	r3, r3, #3
    1ed6:	18cb      	adds	r3, r1, r3
    1ed8:	3304      	adds	r3, #4
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	613b      	str	r3, [r7, #16]
  uint32_t pinMask = (1ul << pin);
    1ede:	2201      	movs	r2, #1
    1ee0:	693b      	ldr	r3, [r7, #16]
    1ee2:	409a      	lsls	r2, r3
    1ee4:	0013      	movs	r3, r2
    1ee6:	60fb      	str	r3, [r7, #12]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1ee8:	4a22      	ldr	r2, [pc, #136]	; (1f74 <digitalWrite+0xe0>)
    1eea:	2317      	movs	r3, #23
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	b25b      	sxtb	r3, r3
    1ef2:	01db      	lsls	r3, r3, #7
    1ef4:	18d3      	adds	r3, r2, r3
    1ef6:	3308      	adds	r3, #8
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	68fa      	ldr	r2, [r7, #12]
    1efc:	4013      	ands	r3, r2
    1efe:	d118      	bne.n	1f32 <digitalWrite+0x9e>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1f00:	4c1c      	ldr	r4, [pc, #112]	; (1f74 <digitalWrite+0xe0>)
    1f02:	2317      	movs	r3, #23
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	781b      	ldrb	r3, [r3, #0]
    1f08:	b25b      	sxtb	r3, r3
    1f0a:	683a      	ldr	r2, [r7, #0]
    1f0c:	1e51      	subs	r1, r2, #1
    1f0e:	418a      	sbcs	r2, r1
    1f10:	b2d1      	uxtb	r1, r2
    1f12:	2040      	movs	r0, #64	; 0x40
    1f14:	01db      	lsls	r3, r3, #7
    1f16:	18e2      	adds	r2, r4, r3
    1f18:	693b      	ldr	r3, [r7, #16]
    1f1a:	18d3      	adds	r3, r2, r3
    1f1c:	181a      	adds	r2, r3, r0
    1f1e:	7813      	ldrb	r3, [r2, #0]
    1f20:	2001      	movs	r0, #1
    1f22:	4001      	ands	r1, r0
    1f24:	0088      	lsls	r0, r1, #2
    1f26:	2104      	movs	r1, #4
    1f28:	438b      	bics	r3, r1
    1f2a:	1c19      	adds	r1, r3, #0
    1f2c:	1c03      	adds	r3, r0, #0
    1f2e:	430b      	orrs	r3, r1
    1f30:	7013      	strb	r3, [r2, #0]
  }

  switch ( ulVal )
    1f32:	683b      	ldr	r3, [r7, #0]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d10a      	bne.n	1f4e <digitalWrite+0xba>
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1f38:	4a0e      	ldr	r2, [pc, #56]	; (1f74 <digitalWrite+0xe0>)
    1f3a:	2317      	movs	r3, #23
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	b25b      	sxtb	r3, r3
    1f42:	01db      	lsls	r3, r3, #7
    1f44:	18d3      	adds	r3, r2, r3
    1f46:	3314      	adds	r3, #20
    1f48:	68fa      	ldr	r2, [r7, #12]
    1f4a:	601a      	str	r2, [r3, #0]
    break ;
    1f4c:	e00a      	b.n	1f64 <digitalWrite+0xd0>

    default:
      PORT->Group[port].OUTSET.reg = pinMask;
    1f4e:	4a09      	ldr	r2, [pc, #36]	; (1f74 <digitalWrite+0xe0>)
    1f50:	2317      	movs	r3, #23
    1f52:	18fb      	adds	r3, r7, r3
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	b25b      	sxtb	r3, r3
    1f58:	01db      	lsls	r3, r3, #7
    1f5a:	18d3      	adds	r3, r2, r3
    1f5c:	3318      	adds	r3, #24
    1f5e:	68fa      	ldr	r2, [r7, #12]
    1f60:	601a      	str	r2, [r3, #0]
    break ;
    1f62:	46c0      	nop			; (mov r8, r8)
  }

  return ;
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	e000      	b.n	1f6a <digitalWrite+0xd6>
    return ;
    1f68:	46c0      	nop			; (mov r8, r8)
}
    1f6a:	46bd      	mov	sp, r7
    1f6c:	b007      	add	sp, #28
    1f6e:	bd90      	pop	{r4, r7, pc}
    1f70:	00003284 	.word	0x00003284
    1f74:	41004400 	.word	0x41004400

00001f78 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7a:	b085      	sub	sp, #20
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
    1f80:	000a      	movs	r2, r1
    1f82:	1cfb      	adds	r3, r7, #3
    1f84:	701a      	strb	r2, [r3, #0]
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f86:	49a0      	ldr	r1, [pc, #640]	; (2208 <pinPeripheral+0x290>)
    1f88:	687a      	ldr	r2, [r7, #4]
    1f8a:	0013      	movs	r3, r2
    1f8c:	005b      	lsls	r3, r3, #1
    1f8e:	189b      	adds	r3, r3, r2
    1f90:	00db      	lsls	r3, r3, #3
    1f92:	18cb      	adds	r3, r1, r3
    1f94:	3308      	adds	r3, #8
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	b25b      	sxtb	r3, r3
    1f9a:	3301      	adds	r3, #1
    1f9c:	d102      	bne.n	1fa4 <pinPeripheral+0x2c>
  {
    return -1 ;
    1f9e:	2301      	movs	r3, #1
    1fa0:	425b      	negs	r3, r3
    1fa2:	e12d      	b.n	2200 <pinPeripheral+0x288>
  }

  switch ( ulPeripheral )
    1fa4:	1cfb      	adds	r3, r7, #3
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	b25b      	sxtb	r3, r3
    1faa:	3301      	adds	r3, #1
    1fac:	2b0c      	cmp	r3, #12
    1fae:	d900      	bls.n	1fb2 <pinPeripheral+0x3a>
    1fb0:	e125      	b.n	21fe <pinPeripheral+0x286>
    1fb2:	009a      	lsls	r2, r3, #2
    1fb4:	4b95      	ldr	r3, [pc, #596]	; (220c <pinPeripheral+0x294>)
    1fb6:	18d3      	adds	r3, r2, r3
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	469f      	mov	pc, r3
    case PIO_OUTPUT:
      // Disable peripheral muxing, done in pinMode
//			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

      // Configure pin mode, if requested
      if ( ulPeripheral == PIO_INPUT )
    1fbc:	1cfb      	adds	r3, r7, #3
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	b25b      	sxtb	r3, r3
    1fc2:	2b09      	cmp	r3, #9
    1fc4:	d105      	bne.n	1fd2 <pinPeripheral+0x5a>
      {
        pinMode( ulPin, INPUT ) ;
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	2100      	movs	r1, #0
    1fca:	0018      	movs	r0, r3
    1fcc:	f7ff fe38 	bl	1c40 <pinMode>
          {
            // PIO_DIGITAL, do we have to do something as all cases are covered?
          }
        }
      }
    break ;
    1fd0:	e114      	b.n	21fc <pinPeripheral+0x284>
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1fd2:	1cfb      	adds	r3, r7, #3
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	b25b      	sxtb	r3, r3
    1fd8:	2b0a      	cmp	r3, #10
    1fda:	d105      	bne.n	1fe8 <pinPeripheral+0x70>
          pinMode( ulPin, INPUT_PULLUP ) ;
    1fdc:	687b      	ldr	r3, [r7, #4]
    1fde:	2102      	movs	r1, #2
    1fe0:	0018      	movs	r0, r3
    1fe2:	f7ff fe2d 	bl	1c40 <pinMode>
    break ;
    1fe6:	e109      	b.n	21fc <pinPeripheral+0x284>
          if ( ulPeripheral == PIO_OUTPUT )
    1fe8:	1cfb      	adds	r3, r7, #3
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	b25b      	sxtb	r3, r3
    1fee:	2b0b      	cmp	r3, #11
    1ff0:	d000      	beq.n	1ff4 <pinPeripheral+0x7c>
    1ff2:	e103      	b.n	21fc <pinPeripheral+0x284>
            pinMode( ulPin, OUTPUT ) ;
    1ff4:	687b      	ldr	r3, [r7, #4]
    1ff6:	2101      	movs	r1, #1
    1ff8:	0018      	movs	r0, r3
    1ffa:	f7ff fe21 	bl	1c40 <pinMode>
    break ;
    1ffe:	e0fd      	b.n	21fc <pinPeripheral+0x284>
                                                                    PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                                                                    PORT_WRCONFIG_WRPINCFG |
                                                                    PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
      }
#else
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2000:	4981      	ldr	r1, [pc, #516]	; (2208 <pinPeripheral+0x290>)
    2002:	687a      	ldr	r2, [r7, #4]
    2004:	0013      	movs	r3, r2
    2006:	005b      	lsls	r3, r3, #1
    2008:	189b      	adds	r3, r3, r2
    200a:	00db      	lsls	r3, r3, #3
    200c:	18cb      	adds	r3, r1, r3
    200e:	3304      	adds	r3, #4
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	2201      	movs	r2, #1
    2014:	4013      	ands	r3, r2
    2016:	d076      	beq.n	2106 <pinPeripheral+0x18e>
      {
        uint32_t temp ;

        // Get whole current setup for both odd and even pins and remove odd one
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2018:	487d      	ldr	r0, [pc, #500]	; (2210 <pinPeripheral+0x298>)
    201a:	497b      	ldr	r1, [pc, #492]	; (2208 <pinPeripheral+0x290>)
    201c:	687a      	ldr	r2, [r7, #4]
    201e:	0013      	movs	r3, r2
    2020:	005b      	lsls	r3, r3, #1
    2022:	189b      	adds	r3, r3, r2
    2024:	00db      	lsls	r3, r3, #3
    2026:	565b      	ldrsb	r3, [r3, r1]
    2028:	001c      	movs	r4, r3
    202a:	4977      	ldr	r1, [pc, #476]	; (2208 <pinPeripheral+0x290>)
    202c:	687a      	ldr	r2, [r7, #4]
    202e:	0013      	movs	r3, r2
    2030:	005b      	lsls	r3, r3, #1
    2032:	189b      	adds	r3, r3, r2
    2034:	00db      	lsls	r3, r3, #3
    2036:	18cb      	adds	r3, r1, r3
    2038:	3304      	adds	r3, #4
    203a:	681b      	ldr	r3, [r3, #0]
    203c:	085b      	lsrs	r3, r3, #1
    203e:	2130      	movs	r1, #48	; 0x30
    2040:	01e2      	lsls	r2, r4, #7
    2042:	1882      	adds	r2, r0, r2
    2044:	18d3      	adds	r3, r2, r3
    2046:	185b      	adds	r3, r3, r1
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	b2db      	uxtb	r3, r3
    204c:	001a      	movs	r2, r3
    204e:	230f      	movs	r3, #15
    2050:	4013      	ands	r3, r2
    2052:	60fb      	str	r3, [r7, #12]
        // Set new muxing
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2054:	486e      	ldr	r0, [pc, #440]	; (2210 <pinPeripheral+0x298>)
    2056:	496c      	ldr	r1, [pc, #432]	; (2208 <pinPeripheral+0x290>)
    2058:	687a      	ldr	r2, [r7, #4]
    205a:	0013      	movs	r3, r2
    205c:	005b      	lsls	r3, r3, #1
    205e:	189b      	adds	r3, r3, r2
    2060:	00db      	lsls	r3, r3, #3
    2062:	565b      	ldrsb	r3, [r3, r1]
    2064:	001d      	movs	r5, r3
    2066:	4968      	ldr	r1, [pc, #416]	; (2208 <pinPeripheral+0x290>)
    2068:	687a      	ldr	r2, [r7, #4]
    206a:	0013      	movs	r3, r2
    206c:	005b      	lsls	r3, r3, #1
    206e:	189b      	adds	r3, r3, r2
    2070:	00db      	lsls	r3, r3, #3
    2072:	18cb      	adds	r3, r1, r3
    2074:	3304      	adds	r3, #4
    2076:	681b      	ldr	r3, [r3, #0]
    2078:	085b      	lsrs	r3, r3, #1
    207a:	1cfa      	adds	r2, r7, #3
    207c:	7812      	ldrb	r2, [r2, #0]
    207e:	0112      	lsls	r2, r2, #4
    2080:	b2d1      	uxtb	r1, r2
    2082:	68fa      	ldr	r2, [r7, #12]
    2084:	b2d2      	uxtb	r2, r2
    2086:	430a      	orrs	r2, r1
    2088:	b2d4      	uxtb	r4, r2
    208a:	2130      	movs	r1, #48	; 0x30
    208c:	01ea      	lsls	r2, r5, #7
    208e:	1882      	adds	r2, r0, r2
    2090:	18d3      	adds	r3, r2, r3
    2092:	185b      	adds	r3, r3, r1
    2094:	1c22      	adds	r2, r4, #0
    2096:	701a      	strb	r2, [r3, #0]
        // Enable port mux
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2098:	4c5d      	ldr	r4, [pc, #372]	; (2210 <pinPeripheral+0x298>)
    209a:	495b      	ldr	r1, [pc, #364]	; (2208 <pinPeripheral+0x290>)
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	0013      	movs	r3, r2
    20a0:	005b      	lsls	r3, r3, #1
    20a2:	189b      	adds	r3, r3, r2
    20a4:	00db      	lsls	r3, r3, #3
    20a6:	565b      	ldrsb	r3, [r3, r1]
    20a8:	001e      	movs	r6, r3
    20aa:	4957      	ldr	r1, [pc, #348]	; (2208 <pinPeripheral+0x290>)
    20ac:	687a      	ldr	r2, [r7, #4]
    20ae:	0013      	movs	r3, r2
    20b0:	005b      	lsls	r3, r3, #1
    20b2:	189b      	adds	r3, r3, r2
    20b4:	00db      	lsls	r3, r3, #3
    20b6:	18cb      	adds	r3, r1, r3
    20b8:	3304      	adds	r3, #4
    20ba:	6819      	ldr	r1, [r3, #0]
    20bc:	4d54      	ldr	r5, [pc, #336]	; (2210 <pinPeripheral+0x298>)
    20be:	4852      	ldr	r0, [pc, #328]	; (2208 <pinPeripheral+0x290>)
    20c0:	687a      	ldr	r2, [r7, #4]
    20c2:	0013      	movs	r3, r2
    20c4:	005b      	lsls	r3, r3, #1
    20c6:	189b      	adds	r3, r3, r2
    20c8:	00db      	lsls	r3, r3, #3
    20ca:	561b      	ldrsb	r3, [r3, r0]
    20cc:	469c      	mov	ip, r3
    20ce:	484e      	ldr	r0, [pc, #312]	; (2208 <pinPeripheral+0x290>)
    20d0:	687a      	ldr	r2, [r7, #4]
    20d2:	0013      	movs	r3, r2
    20d4:	005b      	lsls	r3, r3, #1
    20d6:	189b      	adds	r3, r3, r2
    20d8:	00db      	lsls	r3, r3, #3
    20da:	18c3      	adds	r3, r0, r3
    20dc:	3304      	adds	r3, #4
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	2040      	movs	r0, #64	; 0x40
    20e2:	4662      	mov	r2, ip
    20e4:	01d2      	lsls	r2, r2, #7
    20e6:	18aa      	adds	r2, r5, r2
    20e8:	18d3      	adds	r3, r2, r3
    20ea:	181b      	adds	r3, r3, r0
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	b2db      	uxtb	r3, r3
    20f0:	2201      	movs	r2, #1
    20f2:	4313      	orrs	r3, r2
    20f4:	b2d8      	uxtb	r0, r3
    20f6:	2240      	movs	r2, #64	; 0x40
    20f8:	01f3      	lsls	r3, r6, #7
    20fa:	18e3      	adds	r3, r4, r3
    20fc:	185b      	adds	r3, r3, r1
    20fe:	189b      	adds	r3, r3, r2
    2100:	1c02      	adds	r2, r0, #0
    2102:	701a      	strb	r2, [r3, #0]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
      }
#endif
    break ;
    2104:	e07b      	b.n	21fe <pinPeripheral+0x286>
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    2106:	4842      	ldr	r0, [pc, #264]	; (2210 <pinPeripheral+0x298>)
    2108:	493f      	ldr	r1, [pc, #252]	; (2208 <pinPeripheral+0x290>)
    210a:	687a      	ldr	r2, [r7, #4]
    210c:	0013      	movs	r3, r2
    210e:	005b      	lsls	r3, r3, #1
    2110:	189b      	adds	r3, r3, r2
    2112:	00db      	lsls	r3, r3, #3
    2114:	565b      	ldrsb	r3, [r3, r1]
    2116:	001c      	movs	r4, r3
    2118:	493b      	ldr	r1, [pc, #236]	; (2208 <pinPeripheral+0x290>)
    211a:	687a      	ldr	r2, [r7, #4]
    211c:	0013      	movs	r3, r2
    211e:	005b      	lsls	r3, r3, #1
    2120:	189b      	adds	r3, r3, r2
    2122:	00db      	lsls	r3, r3, #3
    2124:	18cb      	adds	r3, r1, r3
    2126:	3304      	adds	r3, #4
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	085b      	lsrs	r3, r3, #1
    212c:	2130      	movs	r1, #48	; 0x30
    212e:	01e2      	lsls	r2, r4, #7
    2130:	1882      	adds	r2, r0, r2
    2132:	18d3      	adds	r3, r2, r3
    2134:	185b      	adds	r3, r3, r1
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	b2db      	uxtb	r3, r3
    213a:	001a      	movs	r2, r3
    213c:	23f0      	movs	r3, #240	; 0xf0
    213e:	4013      	ands	r3, r2
    2140:	60bb      	str	r3, [r7, #8]
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2142:	4833      	ldr	r0, [pc, #204]	; (2210 <pinPeripheral+0x298>)
    2144:	4930      	ldr	r1, [pc, #192]	; (2208 <pinPeripheral+0x290>)
    2146:	687a      	ldr	r2, [r7, #4]
    2148:	0013      	movs	r3, r2
    214a:	005b      	lsls	r3, r3, #1
    214c:	189b      	adds	r3, r3, r2
    214e:	00db      	lsls	r3, r3, #3
    2150:	565b      	ldrsb	r3, [r3, r1]
    2152:	001d      	movs	r5, r3
    2154:	492c      	ldr	r1, [pc, #176]	; (2208 <pinPeripheral+0x290>)
    2156:	687a      	ldr	r2, [r7, #4]
    2158:	0013      	movs	r3, r2
    215a:	005b      	lsls	r3, r3, #1
    215c:	189b      	adds	r3, r3, r2
    215e:	00db      	lsls	r3, r3, #3
    2160:	18cb      	adds	r3, r1, r3
    2162:	3304      	adds	r3, #4
    2164:	681b      	ldr	r3, [r3, #0]
    2166:	085b      	lsrs	r3, r3, #1
    2168:	1cfa      	adds	r2, r7, #3
    216a:	7812      	ldrb	r2, [r2, #0]
    216c:	210f      	movs	r1, #15
    216e:	400a      	ands	r2, r1
    2170:	b2d1      	uxtb	r1, r2
    2172:	68ba      	ldr	r2, [r7, #8]
    2174:	b2d2      	uxtb	r2, r2
    2176:	430a      	orrs	r2, r1
    2178:	b2d4      	uxtb	r4, r2
    217a:	2130      	movs	r1, #48	; 0x30
    217c:	01ea      	lsls	r2, r5, #7
    217e:	1882      	adds	r2, r0, r2
    2180:	18d3      	adds	r3, r2, r3
    2182:	185b      	adds	r3, r3, r1
    2184:	1c22      	adds	r2, r4, #0
    2186:	701a      	strb	r2, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    2188:	4c21      	ldr	r4, [pc, #132]	; (2210 <pinPeripheral+0x298>)
    218a:	491f      	ldr	r1, [pc, #124]	; (2208 <pinPeripheral+0x290>)
    218c:	687a      	ldr	r2, [r7, #4]
    218e:	0013      	movs	r3, r2
    2190:	005b      	lsls	r3, r3, #1
    2192:	189b      	adds	r3, r3, r2
    2194:	00db      	lsls	r3, r3, #3
    2196:	565b      	ldrsb	r3, [r3, r1]
    2198:	001e      	movs	r6, r3
    219a:	491b      	ldr	r1, [pc, #108]	; (2208 <pinPeripheral+0x290>)
    219c:	687a      	ldr	r2, [r7, #4]
    219e:	0013      	movs	r3, r2
    21a0:	005b      	lsls	r3, r3, #1
    21a2:	189b      	adds	r3, r3, r2
    21a4:	00db      	lsls	r3, r3, #3
    21a6:	18cb      	adds	r3, r1, r3
    21a8:	3304      	adds	r3, #4
    21aa:	6819      	ldr	r1, [r3, #0]
    21ac:	4d18      	ldr	r5, [pc, #96]	; (2210 <pinPeripheral+0x298>)
    21ae:	4816      	ldr	r0, [pc, #88]	; (2208 <pinPeripheral+0x290>)
    21b0:	687a      	ldr	r2, [r7, #4]
    21b2:	0013      	movs	r3, r2
    21b4:	005b      	lsls	r3, r3, #1
    21b6:	189b      	adds	r3, r3, r2
    21b8:	00db      	lsls	r3, r3, #3
    21ba:	561b      	ldrsb	r3, [r3, r0]
    21bc:	469c      	mov	ip, r3
    21be:	4812      	ldr	r0, [pc, #72]	; (2208 <pinPeripheral+0x290>)
    21c0:	687a      	ldr	r2, [r7, #4]
    21c2:	0013      	movs	r3, r2
    21c4:	005b      	lsls	r3, r3, #1
    21c6:	189b      	adds	r3, r3, r2
    21c8:	00db      	lsls	r3, r3, #3
    21ca:	18c3      	adds	r3, r0, r3
    21cc:	3304      	adds	r3, #4
    21ce:	681b      	ldr	r3, [r3, #0]
    21d0:	2040      	movs	r0, #64	; 0x40
    21d2:	4662      	mov	r2, ip
    21d4:	01d2      	lsls	r2, r2, #7
    21d6:	18aa      	adds	r2, r5, r2
    21d8:	18d3      	adds	r3, r2, r3
    21da:	181b      	adds	r3, r3, r0
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	b2db      	uxtb	r3, r3
    21e0:	2201      	movs	r2, #1
    21e2:	4313      	orrs	r3, r2
    21e4:	b2d8      	uxtb	r0, r3
    21e6:	2240      	movs	r2, #64	; 0x40
    21e8:	01f3      	lsls	r3, r6, #7
    21ea:	18e3      	adds	r3, r4, r3
    21ec:	185b      	adds	r3, r3, r1
    21ee:	189b      	adds	r3, r3, r2
    21f0:	1c02      	adds	r2, r0, #0
    21f2:	701a      	strb	r2, [r3, #0]
    break ;
    21f4:	e003      	b.n	21fe <pinPeripheral+0x286>

    case PIO_NOT_A_PIN:
      return -1l ;
    21f6:	2301      	movs	r3, #1
    21f8:	425b      	negs	r3, r3
    21fa:	e001      	b.n	2200 <pinPeripheral+0x288>
    break ;
    21fc:	46c0      	nop			; (mov r8, r8)
    break ;
  }

  return 0l ;
    21fe:	2300      	movs	r3, #0
}
    2200:	0018      	movs	r0, r3
    2202:	46bd      	mov	sp, r7
    2204:	b005      	add	sp, #20
    2206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2208:	00003284 	.word	0x00003284
    220c:	00003250 	.word	0x00003250
    2210:	41004400 	.word	0x41004400

00002214 <_ZN14HardwareSerialD1Ev>:

class HardwareSerial : public Stream
{
  public:
	HardwareSerial(){};
	~HardwareSerial(){};
    2214:	b580      	push	{r7, lr}
    2216:	b082      	sub	sp, #8
    2218:	af00      	add	r7, sp, #0
    221a:	6078      	str	r0, [r7, #4]
    221c:	4a03      	ldr	r2, [pc, #12]	; (222c <_ZN14HardwareSerialD1Ev+0x18>)
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	601a      	str	r2, [r3, #0]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	0018      	movs	r0, r3
    2226:	46bd      	mov	sp, r7
    2228:	b002      	add	sp, #8
    222a:	bd80      	pop	{r7, pc}
    222c:	0000370c 	.word	0x0000370c

00002230 <_ZN14HardwareSerial5beginEm>:
    virtual void begin(unsigned long){};
    2230:	b580      	push	{r7, lr}
    2232:	b082      	sub	sp, #8
    2234:	af00      	add	r7, sp, #0
    2236:	6078      	str	r0, [r7, #4]
    2238:	6039      	str	r1, [r7, #0]
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	46bd      	mov	sp, r7
    223e:	b002      	add	sp, #8
    2240:	bd80      	pop	{r7, pc}

00002242 <_ZN14HardwareSerial5beginEmt>:
    virtual void begin(unsigned long baudrate, uint16_t config){};
    2242:	b580      	push	{r7, lr}
    2244:	b084      	sub	sp, #16
    2246:	af00      	add	r7, sp, #0
    2248:	60f8      	str	r0, [r7, #12]
    224a:	60b9      	str	r1, [r7, #8]
    224c:	1dbb      	adds	r3, r7, #6
    224e:	801a      	strh	r2, [r3, #0]
    2250:	46c0      	nop			; (mov r8, r8)
    2252:	46bd      	mov	sp, r7
    2254:	b004      	add	sp, #16
    2256:	bd80      	pop	{r7, pc}

00002258 <_ZN14HardwareSerial3endEv>:
    virtual void end(){};
    2258:	b580      	push	{r7, lr}
    225a:	b082      	sub	sp, #8
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
    2260:	46c0      	nop			; (mov r8, r8)
    2262:	46bd      	mov	sp, r7
    2264:	b002      	add	sp, #8
    2266:	bd80      	pop	{r7, pc}

00002268 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    2268:	b580      	push	{r7, lr}
    226a:	af00      	add	r7, sp, #0
  Serial1.IrqHandler();
    226c:	4b03      	ldr	r3, [pc, #12]	; (227c <SERCOM0_Handler+0x14>)
    226e:	0018      	movs	r0, r3
    2270:	f000 fcdc 	bl	2c2c <_ZN4Uart10IrqHandlerEv>
}
    2274:	46c0      	nop			; (mov r8, r8)
    2276:	46bd      	mov	sp, r7
    2278:	bd80      	pop	{r7, pc}
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	200005ac 	.word	0x200005ac

00002280 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    2280:	b580      	push	{r7, lr}
    2282:	af00      	add	r7, sp, #0
  Serial.IrqHandler();
    2284:	4b03      	ldr	r3, [pc, #12]	; (2294 <SERCOM5_Handler+0x14>)
    2286:	0018      	movs	r0, r3
    2288:	f000 fcd0 	bl	2c2c <_ZN4Uart10IrqHandlerEv>
}
    228c:	46c0      	nop			; (mov r8, r8)
    228e:	46bd      	mov	sp, r7
    2290:	bd80      	pop	{r7, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	20000654 	.word	0x20000654

00002298 <_ZN4UartD1Ev>:
#include "SERCOM.h"
#include "RingBuffer.h"

#include <cstddef>

class Uart : public HardwareSerial
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
    22a0:	4a05      	ldr	r2, [pc, #20]	; (22b8 <_ZN4UartD1Ev+0x20>)
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	601a      	str	r2, [r3, #0]
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	0018      	movs	r0, r3
    22aa:	f7ff ffb3 	bl	2214 <_ZN14HardwareSerialD1Ev>
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	0018      	movs	r0, r3
    22b2:	46bd      	mov	sp, r7
    22b4:	b002      	add	sp, #8
    22b6:	bd80      	pop	{r7, pc}
    22b8:	00003758 	.word	0x00003758

000022bc <_Z41__static_initialization_and_destruction_0ii>:
    22bc:	b580      	push	{r7, lr}
    22be:	b084      	sub	sp, #16
    22c0:	af02      	add	r7, sp, #8
    22c2:	6078      	str	r0, [r7, #4]
    22c4:	6039      	str	r1, [r7, #0]
    22c6:	687b      	ldr	r3, [r7, #4]
    22c8:	2b01      	cmp	r3, #1
    22ca:	d147      	bne.n	235c <_Z41__static_initialization_and_destruction_0ii+0xa0>
    22cc:	683b      	ldr	r3, [r7, #0]
    22ce:	4a25      	ldr	r2, [pc, #148]	; (2364 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    22d0:	4293      	cmp	r3, r2
    22d2:	d143      	bne.n	235c <_Z41__static_initialization_and_destruction_0ii+0xa0>
SERCOM sercom0( SERCOM0 ) ;
    22d4:	4a24      	ldr	r2, [pc, #144]	; (2368 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    22d6:	4b25      	ldr	r3, [pc, #148]	; (236c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    22d8:	0011      	movs	r1, r2
    22da:	0018      	movs	r0, r3
    22dc:	f000 f922 	bl	2524 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    22e0:	4a23      	ldr	r2, [pc, #140]	; (2370 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    22e2:	4b24      	ldr	r3, [pc, #144]	; (2374 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    22e4:	0011      	movs	r1, r2
    22e6:	0018      	movs	r0, r3
    22e8:	f000 f91c 	bl	2524 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    22ec:	4a22      	ldr	r2, [pc, #136]	; (2378 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    22ee:	4b23      	ldr	r3, [pc, #140]	; (237c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    22f0:	0011      	movs	r1, r2
    22f2:	0018      	movs	r0, r3
    22f4:	f000 f916 	bl	2524 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    22f8:	4a21      	ldr	r2, [pc, #132]	; (2380 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    22fa:	4b22      	ldr	r3, [pc, #136]	; (2384 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    22fc:	0011      	movs	r1, r2
    22fe:	0018      	movs	r0, r3
    2300:	f000 f910 	bl	2524 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    2304:	4a20      	ldr	r2, [pc, #128]	; (2388 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    2306:	4b21      	ldr	r3, [pc, #132]	; (238c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    2308:	0011      	movs	r1, r2
    230a:	0018      	movs	r0, r3
    230c:	f000 f90a 	bl	2524 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    2310:	4a1f      	ldr	r2, [pc, #124]	; (2390 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    2312:	4b20      	ldr	r3, [pc, #128]	; (2394 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    2314:	0011      	movs	r1, r2
    2316:	0018      	movs	r0, r3
    2318:	f000 f904 	bl	2524 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    231c:	4913      	ldr	r1, [pc, #76]	; (236c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    231e:	481e      	ldr	r0, [pc, #120]	; (2398 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    2320:	2301      	movs	r3, #1
    2322:	9301      	str	r3, [sp, #4]
    2324:	2303      	movs	r3, #3
    2326:	9300      	str	r3, [sp, #0]
    2328:	2301      	movs	r3, #1
    232a:	2200      	movs	r2, #0
    232c:	f000 fb8e 	bl	2a4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    2330:	4a1a      	ldr	r2, [pc, #104]	; (239c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    2332:	491b      	ldr	r1, [pc, #108]	; (23a0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    2334:	4b18      	ldr	r3, [pc, #96]	; (2398 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    2336:	0018      	movs	r0, r3
    2338:	f000 fe65 	bl	3006 <__aeabi_atexit>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    233c:	4915      	ldr	r1, [pc, #84]	; (2394 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    233e:	4819      	ldr	r0, [pc, #100]	; (23a4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    2340:	2301      	movs	r3, #1
    2342:	9301      	str	r3, [sp, #4]
    2344:	2303      	movs	r3, #3
    2346:	9300      	str	r3, [sp, #0]
    2348:	2323      	movs	r3, #35	; 0x23
    234a:	2224      	movs	r2, #36	; 0x24
    234c:	f000 fb7e 	bl	2a4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    2350:	4a12      	ldr	r2, [pc, #72]	; (239c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    2352:	4913      	ldr	r1, [pc, #76]	; (23a0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    2354:	4b13      	ldr	r3, [pc, #76]	; (23a4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    2356:	0018      	movs	r0, r3
    2358:	f000 fe55 	bl	3006 <__aeabi_atexit>
}
    235c:	46c0      	nop			; (mov r8, r8)
    235e:	46bd      	mov	sp, r7
    2360:	b002      	add	sp, #8
    2362:	bd80      	pop	{r7, pc}
    2364:	0000ffff 	.word	0x0000ffff
    2368:	42000800 	.word	0x42000800
    236c:	20000594 	.word	0x20000594
    2370:	42000c00 	.word	0x42000c00
    2374:	20000598 	.word	0x20000598
    2378:	42001000 	.word	0x42001000
    237c:	2000059c 	.word	0x2000059c
    2380:	42001400 	.word	0x42001400
    2384:	200005a0 	.word	0x200005a0
    2388:	42001800 	.word	0x42001800
    238c:	200005a4 	.word	0x200005a4
    2390:	42001c00 	.word	0x42001c00
    2394:	200005a8 	.word	0x200005a8
    2398:	200005ac 	.word	0x200005ac
    239c:	20000000 	.word	0x20000000
    23a0:	00002299 	.word	0x00002299
    23a4:	20000654 	.word	0x20000654

000023a8 <_GLOBAL__sub_I_g_APinDescription>:
    23a8:	b580      	push	{r7, lr}
    23aa:	af00      	add	r7, sp, #0
    23ac:	4b03      	ldr	r3, [pc, #12]	; (23bc <_GLOBAL__sub_I_g_APinDescription+0x14>)
    23ae:	0019      	movs	r1, r3
    23b0:	2001      	movs	r0, #1
    23b2:	f7ff ff83 	bl	22bc <_Z41__static_initialization_and_destruction_0ii>
    23b6:	46bd      	mov	sp, r7
    23b8:	bd80      	pop	{r7, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	0000ffff 	.word	0x0000ffff

000023c0 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    23c0:	b580      	push	{r7, lr}
    23c2:	af00      	add	r7, sp, #0
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  while (1)
    23c4:	e7fe      	b.n	23c4 <__cxa_pure_virtual+0x4>

000023c6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    23c6:	b580      	push	{r7, lr}
    23c8:	b086      	sub	sp, #24
    23ca:	af00      	add	r7, sp, #0
    23cc:	60f8      	str	r0, [r7, #12]
    23ce:	60b9      	str	r1, [r7, #8]
    23d0:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    23d2:	2300      	movs	r3, #0
    23d4:	617b      	str	r3, [r7, #20]
  while (size--) {
    23d6:	687b      	ldr	r3, [r7, #4]
    23d8:	1e5a      	subs	r2, r3, #1
    23da:	607a      	str	r2, [r7, #4]
    23dc:	1e5a      	subs	r2, r3, #1
    23de:	4193      	sbcs	r3, r2
    23e0:	b2db      	uxtb	r3, r3
    23e2:	2b00      	cmp	r3, #0
    23e4:	d014      	beq.n	2410 <_ZN5Print5writeEPKhj+0x4a>
    if (write(*buffer++)) n++;
    23e6:	68fb      	ldr	r3, [r7, #12]
    23e8:	681b      	ldr	r3, [r3, #0]
    23ea:	681a      	ldr	r2, [r3, #0]
    23ec:	68bb      	ldr	r3, [r7, #8]
    23ee:	1c59      	adds	r1, r3, #1
    23f0:	60b9      	str	r1, [r7, #8]
    23f2:	7819      	ldrb	r1, [r3, #0]
    23f4:	68fb      	ldr	r3, [r7, #12]
    23f6:	0018      	movs	r0, r3
    23f8:	4790      	blx	r2
    23fa:	0003      	movs	r3, r0
    23fc:	1e5a      	subs	r2, r3, #1
    23fe:	4193      	sbcs	r3, r2
    2400:	b2db      	uxtb	r3, r3
    2402:	2b00      	cmp	r3, #0
    2404:	d003      	beq.n	240e <_ZN5Print5writeEPKhj+0x48>
    2406:	697b      	ldr	r3, [r7, #20]
    2408:	3301      	adds	r3, #1
    240a:	617b      	str	r3, [r7, #20]
  while (size--) {
    240c:	e7e3      	b.n	23d6 <_ZN5Print5writeEPKhj+0x10>
    else break;
    240e:	46c0      	nop			; (mov r8, r8)
  }
  return n;
    2410:	697b      	ldr	r3, [r7, #20]
}
    2412:	0018      	movs	r0, r3
    2414:	46bd      	mov	sp, r7
    2416:	b006      	add	sp, #24
    2418:	bd80      	pop	{r7, pc}
	...

0000241c <NVIC_EnableIRQ>:
{
    241c:	b580      	push	{r7, lr}
    241e:	b082      	sub	sp, #8
    2420:	af00      	add	r7, sp, #0
    2422:	0002      	movs	r2, r0
    2424:	1dfb      	adds	r3, r7, #7
    2426:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <NVIC_EnableIRQ+0x28>)
    242a:	1dfa      	adds	r2, r7, #7
    242c:	7812      	ldrb	r2, [r2, #0]
    242e:	b252      	sxtb	r2, r2
    2430:	211f      	movs	r1, #31
    2432:	400a      	ands	r2, r1
    2434:	2101      	movs	r1, #1
    2436:	4091      	lsls	r1, r2
    2438:	000a      	movs	r2, r1
    243a:	601a      	str	r2, [r3, #0]
}
    243c:	46c0      	nop			; (mov r8, r8)
    243e:	46bd      	mov	sp, r7
    2440:	b002      	add	sp, #8
    2442:	bd80      	pop	{r7, pc}
    2444:	e000e100 	.word	0xe000e100

00002448 <NVIC_SetPriority>:
{
    2448:	b5b0      	push	{r4, r5, r7, lr}
    244a:	b082      	sub	sp, #8
    244c:	af00      	add	r7, sp, #0
    244e:	0002      	movs	r2, r0
    2450:	6039      	str	r1, [r7, #0]
    2452:	1dfb      	adds	r3, r7, #7
    2454:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
    2456:	1dfb      	adds	r3, r7, #7
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	2b7f      	cmp	r3, #127	; 0x7f
    245c:	d932      	bls.n	24c4 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    245e:	4c2f      	ldr	r4, [pc, #188]	; (251c <NVIC_SetPriority+0xd4>)
    2460:	1dfb      	adds	r3, r7, #7
    2462:	781b      	ldrb	r3, [r3, #0]
    2464:	b25b      	sxtb	r3, r3
    2466:	220f      	movs	r2, #15
    2468:	4013      	ands	r3, r2
    246a:	3b08      	subs	r3, #8
    246c:	0899      	lsrs	r1, r3, #2
    246e:	4a2b      	ldr	r2, [pc, #172]	; (251c <NVIC_SetPriority+0xd4>)
    2470:	1dfb      	adds	r3, r7, #7
    2472:	781b      	ldrb	r3, [r3, #0]
    2474:	b25b      	sxtb	r3, r3
    2476:	200f      	movs	r0, #15
    2478:	4003      	ands	r3, r0
    247a:	3b08      	subs	r3, #8
    247c:	089b      	lsrs	r3, r3, #2
    247e:	3306      	adds	r3, #6
    2480:	009b      	lsls	r3, r3, #2
    2482:	18d3      	adds	r3, r2, r3
    2484:	3304      	adds	r3, #4
    2486:	681b      	ldr	r3, [r3, #0]
    2488:	1dfa      	adds	r2, r7, #7
    248a:	7812      	ldrb	r2, [r2, #0]
    248c:	b252      	sxtb	r2, r2
    248e:	2003      	movs	r0, #3
    2490:	4002      	ands	r2, r0
    2492:	00d2      	lsls	r2, r2, #3
    2494:	20ff      	movs	r0, #255	; 0xff
    2496:	4090      	lsls	r0, r2
    2498:	0002      	movs	r2, r0
    249a:	43d2      	mvns	r2, r2
    249c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    249e:	683b      	ldr	r3, [r7, #0]
    24a0:	019b      	lsls	r3, r3, #6
    24a2:	20ff      	movs	r0, #255	; 0xff
    24a4:	4018      	ands	r0, r3
    24a6:	1dfb      	adds	r3, r7, #7
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	b25b      	sxtb	r3, r3
    24ac:	2503      	movs	r5, #3
    24ae:	402b      	ands	r3, r5
    24b0:	00db      	lsls	r3, r3, #3
    24b2:	4098      	lsls	r0, r3
    24b4:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    24b6:	431a      	orrs	r2, r3
    24b8:	1d8b      	adds	r3, r1, #6
    24ba:	009b      	lsls	r3, r3, #2
    24bc:	18e3      	adds	r3, r4, r3
    24be:	3304      	adds	r3, #4
    24c0:	601a      	str	r2, [r3, #0]
}
    24c2:	e027      	b.n	2514 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    24c4:	4c16      	ldr	r4, [pc, #88]	; (2520 <NVIC_SetPriority+0xd8>)
    24c6:	1dfb      	adds	r3, r7, #7
    24c8:	781b      	ldrb	r3, [r3, #0]
    24ca:	b25b      	sxtb	r3, r3
    24cc:	089b      	lsrs	r3, r3, #2
    24ce:	4914      	ldr	r1, [pc, #80]	; (2520 <NVIC_SetPriority+0xd8>)
    24d0:	1dfa      	adds	r2, r7, #7
    24d2:	7812      	ldrb	r2, [r2, #0]
    24d4:	b252      	sxtb	r2, r2
    24d6:	0892      	lsrs	r2, r2, #2
    24d8:	32c0      	adds	r2, #192	; 0xc0
    24da:	0092      	lsls	r2, r2, #2
    24dc:	5852      	ldr	r2, [r2, r1]
    24de:	1df9      	adds	r1, r7, #7
    24e0:	7809      	ldrb	r1, [r1, #0]
    24e2:	b249      	sxtb	r1, r1
    24e4:	2003      	movs	r0, #3
    24e6:	4001      	ands	r1, r0
    24e8:	00c9      	lsls	r1, r1, #3
    24ea:	20ff      	movs	r0, #255	; 0xff
    24ec:	4088      	lsls	r0, r1
    24ee:	0001      	movs	r1, r0
    24f0:	43c9      	mvns	r1, r1
    24f2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    24f4:	683a      	ldr	r2, [r7, #0]
    24f6:	0192      	lsls	r2, r2, #6
    24f8:	20ff      	movs	r0, #255	; 0xff
    24fa:	4010      	ands	r0, r2
    24fc:	1dfa      	adds	r2, r7, #7
    24fe:	7812      	ldrb	r2, [r2, #0]
    2500:	b252      	sxtb	r2, r2
    2502:	2503      	movs	r5, #3
    2504:	402a      	ands	r2, r5
    2506:	00d2      	lsls	r2, r2, #3
    2508:	4090      	lsls	r0, r2
    250a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    250c:	430a      	orrs	r2, r1
    250e:	33c0      	adds	r3, #192	; 0xc0
    2510:	009b      	lsls	r3, r3, #2
    2512:	511a      	str	r2, [r3, r4]
}
    2514:	46c0      	nop			; (mov r8, r8)
    2516:	46bd      	mov	sp, r7
    2518:	b002      	add	sp, #8
    251a:	bdb0      	pop	{r4, r5, r7, pc}
    251c:	e000ed00 	.word	0xe000ed00
    2520:	e000e100 	.word	0xe000e100

00002524 <_ZN6SERCOMC1EP6Sercom>:
*/

#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
    2524:	b580      	push	{r7, lr}
    2526:	b082      	sub	sp, #8
    2528:	af00      	add	r7, sp, #0
    252a:	6078      	str	r0, [r7, #4]
    252c:	6039      	str	r1, [r7, #0]
{
  sercom = s;
    252e:	687b      	ldr	r3, [r7, #4]
    2530:	683a      	ldr	r2, [r7, #0]
    2532:	601a      	str	r2, [r3, #0]
}
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	0018      	movs	r0, r3
    2538:	46bd      	mov	sp, r7
    253a:	b002      	add	sp, #8
    253c:	bd80      	pop	{r7, pc}
	...

00002540 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
/* 	=========================
 *	===== Sercom UART
 *	=========================
*/
void SERCOM::initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate)
{
    2540:	b580      	push	{r7, lr}
    2542:	b086      	sub	sp, #24
    2544:	af00      	add	r7, sp, #0
    2546:	60f8      	str	r0, [r7, #12]
    2548:	0008      	movs	r0, r1
    254a:	0011      	movs	r1, r2
    254c:	607b      	str	r3, [r7, #4]
    254e:	230b      	movs	r3, #11
    2550:	18fb      	adds	r3, r7, r3
    2552:	1c02      	adds	r2, r0, #0
    2554:	701a      	strb	r2, [r3, #0]
    2556:	230a      	movs	r3, #10
    2558:	18fb      	adds	r3, r7, r3
    255a:	1c0a      	adds	r2, r1, #0
    255c:	701a      	strb	r2, [r3, #0]
  initClockNVIC();
    255e:	68fb      	ldr	r3, [r7, #12]
    2560:	0018      	movs	r0, r3
    2562:	f000 f9b9 	bl	28d8 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    2566:	68fb      	ldr	r3, [r7, #12]
    2568:	0018      	movs	r0, r3
    256a:	f000 f8d0 	bl	270e <_ZN6SERCOM9resetUARTEv>

  //Setting the CTRLA register
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	681b      	ldr	r3, [r3, #0]
    2572:	220b      	movs	r2, #11
    2574:	18ba      	adds	r2, r7, r2
    2576:	7812      	ldrb	r2, [r2, #0]
    2578:	0092      	lsls	r2, r2, #2
    257a:	0011      	movs	r1, r2
    257c:	221c      	movs	r2, #28
    257e:	4011      	ands	r1, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2580:	220a      	movs	r2, #10
    2582:	18ba      	adds	r2, r7, r2
    2584:	7812      	ldrb	r2, [r2, #0]
    2586:	0352      	lsls	r2, r2, #13
    2588:	0412      	lsls	r2, r2, #16
    258a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    258c:	430a      	orrs	r2, r1
    258e:	601a      	str	r2, [r3, #0]

  //Setting the Interrupt register
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    2590:	68fb      	ldr	r3, [r7, #12]
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	2284      	movs	r2, #132	; 0x84
    2596:	759a      	strb	r2, [r3, #22]
                                SERCOM_USART_INTENSET_ERROR; //All others errors

  if ( mode == UART_INT_CLOCK )
    2598:	230b      	movs	r3, #11
    259a:	18fb      	adds	r3, r7, r3
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b01      	cmp	r3, #1
    25a0:	d13b      	bne.n	261a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xda>
  {
    uint16_t sampleRateValue;

    if (sampleRate == SAMPLE_RATE_x16) {
    25a2:	230a      	movs	r3, #10
    25a4:	18fb      	adds	r3, r7, r3
    25a6:	781b      	ldrb	r3, [r3, #0]
    25a8:	2b01      	cmp	r3, #1
    25aa:	d104      	bne.n	25b6 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x76>
      sampleRateValue = 16;
    25ac:	2316      	movs	r3, #22
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	2210      	movs	r2, #16
    25b2:	801a      	strh	r2, [r3, #0]
    25b4:	e003      	b.n	25be <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x7e>
    } else {
      sampleRateValue = 8;
    25b6:	2316      	movs	r3, #22
    25b8:	18fb      	adds	r3, r7, r3
    25ba:	2208      	movs	r2, #8
    25bc:	801a      	strh	r2, [r3, #0]
    }

    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    25be:	4b19      	ldr	r3, [pc, #100]	; (2624 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0xe4>)
    25c0:	681b      	ldr	r3, [r3, #0]
    25c2:	00d8      	lsls	r0, r3, #3
    25c4:	2316      	movs	r3, #22
    25c6:	18fb      	adds	r3, r7, r3
    25c8:	881b      	ldrh	r3, [r3, #0]
    25ca:	687a      	ldr	r2, [r7, #4]
    25cc:	4353      	muls	r3, r2
    25ce:	0019      	movs	r1, r3
    25d0:	f000 fd20 	bl	3014 <__udivsi3>
    25d4:	0003      	movs	r3, r0
    25d6:	613b      	str	r3, [r7, #16]

    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    25d8:	68fb      	ldr	r3, [r7, #12]
    25da:	681a      	ldr	r2, [r3, #0]
    25dc:	693b      	ldr	r3, [r7, #16]
    25de:	b2db      	uxtb	r3, r3
    25e0:	1c19      	adds	r1, r3, #0
    25e2:	2307      	movs	r3, #7
    25e4:	400b      	ands	r3, r1
    25e6:	b2d9      	uxtb	r1, r3
    25e8:	8993      	ldrh	r3, [r2, #12]
    25ea:	0348      	lsls	r0, r1, #13
    25ec:	04db      	lsls	r3, r3, #19
    25ee:	0cdb      	lsrs	r3, r3, #19
    25f0:	1c19      	adds	r1, r3, #0
    25f2:	1c03      	adds	r3, r0, #0
    25f4:	430b      	orrs	r3, r1
    25f6:	8193      	strh	r3, [r2, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    25f8:	68fb      	ldr	r3, [r7, #12]
    25fa:	681a      	ldr	r2, [r3, #0]
    25fc:	693b      	ldr	r3, [r7, #16]
    25fe:	08db      	lsrs	r3, r3, #3
    2600:	b29b      	uxth	r3, r3
    2602:	04db      	lsls	r3, r3, #19
    2604:	0cdb      	lsrs	r3, r3, #19
    2606:	b299      	uxth	r1, r3
    2608:	8993      	ldrh	r3, [r2, #12]
    260a:	04c9      	lsls	r1, r1, #19
    260c:	0cc8      	lsrs	r0, r1, #19
    260e:	0b5b      	lsrs	r3, r3, #13
    2610:	035b      	lsls	r3, r3, #13
    2612:	1c19      	adds	r1, r3, #0
    2614:	1c03      	adds	r3, r0, #0
    2616:	430b      	orrs	r3, r1
    2618:	8193      	strh	r3, [r2, #12]
  }
}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	46bd      	mov	sp, r7
    261e:	b006      	add	sp, #24
    2620:	bd80      	pop	{r7, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	2000000c 	.word	0x2000000c

00002628 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    2628:	b590      	push	{r4, r7, lr}
    262a:	b083      	sub	sp, #12
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
    2630:	000c      	movs	r4, r1
    2632:	0010      	movs	r0, r2
    2634:	0019      	movs	r1, r3
    2636:	1cfb      	adds	r3, r7, #3
    2638:	1c22      	adds	r2, r4, #0
    263a:	701a      	strb	r2, [r3, #0]
    263c:	1cbb      	adds	r3, r7, #2
    263e:	1c02      	adds	r2, r0, #0
    2640:	701a      	strb	r2, [r3, #0]
    2642:	1c7b      	adds	r3, r7, #1
    2644:	1c0a      	adds	r2, r1, #0
    2646:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	687a      	ldr	r2, [r7, #4]
    264e:	6812      	ldr	r2, [r2, #0]
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    2650:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    2652:	1c7a      	adds	r2, r7, #1
    2654:	7812      	ldrb	r2, [r2, #0]
    2656:	3a02      	subs	r2, #2
    2658:	1e50      	subs	r0, r2, #1
    265a:	4182      	sbcs	r2, r0
    265c:	b2d2      	uxtb	r2, r2
    265e:	0612      	lsls	r2, r2, #24
    2660:	0010      	movs	r0, r2
    2662:	22f0      	movs	r2, #240	; 0xf0
    2664:	0512      	lsls	r2, r2, #20
    2666:	4002      	ands	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    2668:	1cb8      	adds	r0, r7, #2
    266a:	7800      	ldrb	r0, [r0, #0]
    266c:	0780      	lsls	r0, r0, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    266e:	4302      	orrs	r2, r0
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    2670:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    2672:	601a      	str	r2, [r3, #0]

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	681b      	ldr	r3, [r3, #0]
    2678:	687a      	ldr	r2, [r7, #4]
    267a:	6812      	ldr	r2, [r2, #0]
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    267c:	6851      	ldr	r1, [r2, #4]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    267e:	1cfa      	adds	r2, r7, #3
    2680:	7812      	ldrb	r2, [r2, #0]
    2682:	2007      	movs	r0, #7
    2684:	4002      	ands	r2, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    2686:	2018      	movs	r0, #24
    2688:	1838      	adds	r0, r7, r0
    268a:	7800      	ldrb	r0, [r0, #0]
    268c:	0180      	lsls	r0, r0, #6
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    268e:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    2690:	1c78      	adds	r0, r7, #1
    2692:	7800      	ldrb	r0, [r0, #0]
    2694:	2802      	cmp	r0, #2
    2696:	d003      	beq.n	26a0 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x78>
    2698:	1c78      	adds	r0, r7, #1
    269a:	7800      	ldrb	r0, [r0, #0]
    269c:	0340      	lsls	r0, r0, #13
    269e:	e000      	b.n	26a2 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x7a>
    26a0:	2000      	movs	r0, #0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    26a2:	4302      	orrs	r2, r0
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    26a4:	430a      	orrs	r2, r1
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    26a6:	605a      	str	r2, [r3, #4]
}
    26a8:	46c0      	nop			; (mov r8, r8)
    26aa:	46bd      	mov	sp, r7
    26ac:	b003      	add	sp, #12
    26ae:	bd90      	pop	{r4, r7, pc}

000026b0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    26b0:	b590      	push	{r4, r7, lr}
    26b2:	b083      	sub	sp, #12
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
    26b8:	0008      	movs	r0, r1
    26ba:	0011      	movs	r1, r2
    26bc:	1cfb      	adds	r3, r7, #3
    26be:	1c02      	adds	r2, r0, #0
    26c0:	701a      	strb	r2, [r3, #0]
    26c2:	1cbb      	adds	r3, r7, #2
    26c4:	1c0a      	adds	r2, r1, #0
    26c6:	701a      	strb	r2, [r3, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	687a      	ldr	r2, [r7, #4]
    26ce:	6812      	ldr	r2, [r2, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    26d0:	6811      	ldr	r1, [r2, #0]
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    26d2:	1cfa      	adds	r2, r7, #3
    26d4:	7812      	ldrb	r2, [r2, #0]
    26d6:	0412      	lsls	r2, r2, #16
    26d8:	0010      	movs	r0, r2
    26da:	22c0      	movs	r2, #192	; 0xc0
    26dc:	0292      	lsls	r2, r2, #10
    26de:	4010      	ands	r0, r2
                SERCOM_USART_CTRLA_RXPO(rxPad);
    26e0:	1cba      	adds	r2, r7, #2
    26e2:	7812      	ldrb	r2, [r2, #0]
    26e4:	0512      	lsls	r2, r2, #20
    26e6:	0014      	movs	r4, r2
    26e8:	22c0      	movs	r2, #192	; 0xc0
    26ea:	0392      	lsls	r2, r2, #14
    26ec:	4022      	ands	r2, r4
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    26ee:	4302      	orrs	r2, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    26f0:	430a      	orrs	r2, r1
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    26f2:	601a      	str	r2, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	687a      	ldr	r2, [r7, #4]
    26fa:	6812      	ldr	r2, [r2, #0]
    26fc:	6852      	ldr	r2, [r2, #4]
    26fe:	21c0      	movs	r1, #192	; 0xc0
    2700:	0289      	lsls	r1, r1, #10
    2702:	430a      	orrs	r2, r1
    2704:	605a      	str	r2, [r3, #4]
}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	46bd      	mov	sp, r7
    270a:	b003      	add	sp, #12
    270c:	bd90      	pop	{r4, r7, pc}

0000270e <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
    270e:	b580      	push	{r7, lr}
    2710:	b082      	sub	sp, #8
    2712:	af00      	add	r7, sp, #0
    2714:	6078      	str	r0, [r7, #4]
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	681b      	ldr	r3, [r3, #0]
    271a:	681a      	ldr	r2, [r3, #0]
    271c:	2101      	movs	r1, #1
    271e:	430a      	orrs	r2, r1
    2720:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	681b      	ldr	r3, [r3, #0]
    2726:	681b      	ldr	r3, [r3, #0]
    2728:	07db      	lsls	r3, r3, #31
    272a:	0fdb      	lsrs	r3, r3, #31
    272c:	b2db      	uxtb	r3, r3
    272e:	2b00      	cmp	r3, #0
    2730:	d107      	bne.n	2742 <_ZN6SERCOM9resetUARTEv+0x34>
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	681b      	ldr	r3, [r3, #0]
    2736:	69db      	ldr	r3, [r3, #28]
    2738:	07db      	lsls	r3, r3, #31
    273a:	0fdb      	lsrs	r3, r3, #31
    273c:	b2db      	uxtb	r3, r3
    273e:	2b00      	cmp	r3, #0
    2740:	d001      	beq.n	2746 <_ZN6SERCOM9resetUARTEv+0x38>
    2742:	2301      	movs	r3, #1
    2744:	e000      	b.n	2748 <_ZN6SERCOM9resetUARTEv+0x3a>
    2746:	2300      	movs	r3, #0
    2748:	2b00      	cmp	r3, #0
    274a:	d000      	beq.n	274e <_ZN6SERCOM9resetUARTEv+0x40>
    274c:	e7e9      	b.n	2722 <_ZN6SERCOM9resetUARTEv+0x14>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	46bd      	mov	sp, r7
    2752:	b002      	add	sp, #8
    2754:	bd80      	pop	{r7, pc}

00002756 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
    2756:	b580      	push	{r7, lr}
    2758:	b082      	sub	sp, #8
    275a:	af00      	add	r7, sp, #0
    275c:	6078      	str	r0, [r7, #4]
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	681a      	ldr	r2, [r3, #0]
    2764:	2102      	movs	r1, #2
    2766:	430a      	orrs	r2, r1
    2768:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	69db      	ldr	r3, [r3, #28]
    2770:	079b      	lsls	r3, r3, #30
    2772:	0fdb      	lsrs	r3, r3, #31
    2774:	b2db      	uxtb	r3, r3
    2776:	2b00      	cmp	r3, #0
    2778:	d000      	beq.n	277c <_ZN6SERCOM10enableUARTEv+0x26>
    277a:	e7f6      	b.n	276a <_ZN6SERCOM10enableUARTEv+0x14>
}
    277c:	46c0      	nop			; (mov r8, r8)
    277e:	46bd      	mov	sp, r7
    2780:	b002      	add	sp, #8
    2782:	bd80      	pop	{r7, pc}

00002784 <_ZN6SERCOM9flushUARTEv>:

void SERCOM::flushUART()
{
    2784:	b580      	push	{r7, lr}
    2786:	b082      	sub	sp, #8
    2788:	af00      	add	r7, sp, #0
    278a:	6078      	str	r0, [r7, #4]
  // Skip checking transmission completion if data register is empty
  if(isDataRegisterEmptyUART())
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	0018      	movs	r0, r3
    2790:	f000 f849 	bl	2826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2794:	1e03      	subs	r3, r0, #0
    2796:	d10b      	bne.n	27b0 <_ZN6SERCOM9flushUARTEv+0x2c>
    return;

  // Wait for transmission to complete
  while(!sercom->USART.INTFLAG.bit.TXC);
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	7e1b      	ldrb	r3, [r3, #24]
    279e:	079b      	lsls	r3, r3, #30
    27a0:	0fdb      	lsrs	r3, r3, #31
    27a2:	b2db      	uxtb	r3, r3
    27a4:	2201      	movs	r2, #1
    27a6:	4053      	eors	r3, r2
    27a8:	b2db      	uxtb	r3, r3
    27aa:	2b00      	cmp	r3, #0
    27ac:	d001      	beq.n	27b2 <_ZN6SERCOM9flushUARTEv+0x2e>
    27ae:	e7f3      	b.n	2798 <_ZN6SERCOM9flushUARTEv+0x14>
    return;
    27b0:	46c0      	nop			; (mov r8, r8)
}
    27b2:	46bd      	mov	sp, r7
    27b4:	b002      	add	sp, #8
    27b6:	bd80      	pop	{r7, pc}

000027b8 <_ZN6SERCOM15clearStatusUARTEv>:

void SERCOM::clearStatusUART()
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b082      	sub	sp, #8
    27bc:	af00      	add	r7, sp, #0
    27be:	6078      	str	r0, [r7, #4]
  //Reset (with 0) the STATUS register
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    27c0:	687b      	ldr	r3, [r7, #4]
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	2200      	movs	r2, #0
    27c6:	835a      	strh	r2, [r3, #26]
}
    27c8:	46c0      	nop			; (mov r8, r8)
    27ca:	46bd      	mov	sp, r7
    27cc:	b002      	add	sp, #8
    27ce:	bd80      	pop	{r7, pc}

000027d0 <_ZN6SERCOM17availableDataUARTEv>:

bool SERCOM::availableDataUART()
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b082      	sub	sp, #8
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
  //RXC : Receive Complete
  return sercom->USART.INTFLAG.bit.RXC;
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	681b      	ldr	r3, [r3, #0]
    27dc:	7e1b      	ldrb	r3, [r3, #24]
    27de:	075b      	lsls	r3, r3, #29
    27e0:	0fdb      	lsrs	r3, r3, #31
    27e2:	b2db      	uxtb	r3, r3
}
    27e4:	0018      	movs	r0, r3
    27e6:	46bd      	mov	sp, r7
    27e8:	b002      	add	sp, #8
    27ea:	bd80      	pop	{r7, pc}

000027ec <_ZN6SERCOM11isUARTErrorEv>:

bool SERCOM::isUARTError()
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b082      	sub	sp, #8
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
  return sercom->USART.INTFLAG.bit.ERROR;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	681b      	ldr	r3, [r3, #0]
    27f8:	7e1b      	ldrb	r3, [r3, #24]
    27fa:	061b      	lsls	r3, r3, #24
    27fc:	0fdb      	lsrs	r3, r3, #31
    27fe:	b2db      	uxtb	r3, r3
}
    2800:	0018      	movs	r0, r3
    2802:	46bd      	mov	sp, r7
    2804:	b002      	add	sp, #8
    2806:	bd80      	pop	{r7, pc}

00002808 <_ZN6SERCOM20acknowledgeUARTErrorEv>:

void SERCOM::acknowledgeUARTError()
{
    2808:	b580      	push	{r7, lr}
    280a:	b082      	sub	sp, #8
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
  sercom->USART.INTFLAG.bit.ERROR = 1;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	681a      	ldr	r2, [r3, #0]
    2814:	7e13      	ldrb	r3, [r2, #24]
    2816:	2180      	movs	r1, #128	; 0x80
    2818:	4249      	negs	r1, r1
    281a:	430b      	orrs	r3, r1
    281c:	7613      	strb	r3, [r2, #24]
}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	46bd      	mov	sp, r7
    2822:	b002      	add	sp, #8
    2824:	bd80      	pop	{r7, pc}

00002826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  //PERR : Parity Error
  return sercom->USART.STATUS.bit.PERR;
}

bool SERCOM::isDataRegisterEmptyUART()
{
    2826:	b580      	push	{r7, lr}
    2828:	b082      	sub	sp, #8
    282a:	af00      	add	r7, sp, #0
    282c:	6078      	str	r0, [r7, #4]
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	681b      	ldr	r3, [r3, #0]
    2832:	7e1b      	ldrb	r3, [r3, #24]
    2834:	07db      	lsls	r3, r3, #31
    2836:	0fdb      	lsrs	r3, r3, #31
    2838:	b2db      	uxtb	r3, r3
}
    283a:	0018      	movs	r0, r3
    283c:	46bd      	mov	sp, r7
    283e:	b002      	add	sp, #8
    2840:	bd80      	pop	{r7, pc}

00002842 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
    2842:	b580      	push	{r7, lr}
    2844:	b082      	sub	sp, #8
    2846:	af00      	add	r7, sp, #0
    2848:	6078      	str	r0, [r7, #4]
  return sercom->USART.DATA.bit.DATA;
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	681b      	ldr	r3, [r3, #0]
    284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2850:	05db      	lsls	r3, r3, #23
    2852:	0ddb      	lsrs	r3, r3, #23
    2854:	b29b      	uxth	r3, r3
    2856:	b2db      	uxtb	r3, r3
}
    2858:	0018      	movs	r0, r3
    285a:	46bd      	mov	sp, r7
    285c:	b002      	add	sp, #8
    285e:	bd80      	pop	{r7, pc}

00002860 <_ZN6SERCOM13writeDataUARTEh>:

int SERCOM::writeDataUART(uint8_t data)
{
    2860:	b580      	push	{r7, lr}
    2862:	b082      	sub	sp, #8
    2864:	af00      	add	r7, sp, #0
    2866:	6078      	str	r0, [r7, #4]
    2868:	000a      	movs	r2, r1
    286a:	1cfb      	adds	r3, r7, #3
    286c:	701a      	strb	r2, [r3, #0]
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	0018      	movs	r0, r3
    2872:	f7ff ffd8 	bl	2826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2876:	0003      	movs	r3, r0
    2878:	001a      	movs	r2, r3
    287a:	2301      	movs	r3, #1
    287c:	4053      	eors	r3, r2
    287e:	b2db      	uxtb	r3, r3
    2880:	2b00      	cmp	r3, #0
    2882:	d000      	beq.n	2886 <_ZN6SERCOM13writeDataUARTEh+0x26>
    2884:	e7f3      	b.n	286e <_ZN6SERCOM13writeDataUARTEh+0xe>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	1cfa      	adds	r2, r7, #3
    288c:	7812      	ldrb	r2, [r2, #0]
    288e:	b292      	uxth	r2, r2
    2890:	851a      	strh	r2, [r3, #40]	; 0x28
  return 1;
    2892:	2301      	movs	r3, #1
}
    2894:	0018      	movs	r0, r3
    2896:	46bd      	mov	sp, r7
    2898:	b002      	add	sp, #8
    289a:	bd80      	pop	{r7, pc}

0000289c <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
    289c:	b580      	push	{r7, lr}
    289e:	b082      	sub	sp, #8
    28a0:	af00      	add	r7, sp, #0
    28a2:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENSET.reg |= SERCOM_USART_INTENSET_DRE;
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	681a      	ldr	r2, [r3, #0]
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	681b      	ldr	r3, [r3, #0]
    28ac:	7d9b      	ldrb	r3, [r3, #22]
    28ae:	b2db      	uxtb	r3, r3
    28b0:	2101      	movs	r1, #1
    28b2:	430b      	orrs	r3, r1
    28b4:	b2db      	uxtb	r3, r3
    28b6:	7593      	strb	r3, [r2, #22]
}
    28b8:	46c0      	nop			; (mov r8, r8)
    28ba:	46bd      	mov	sp, r7
    28bc:	b002      	add	sp, #8
    28be:	bd80      	pop	{r7, pc}

000028c0 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b082      	sub	sp, #8
    28c4:	af00      	add	r7, sp, #0
    28c6:	6078      	str	r0, [r7, #4]
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	681b      	ldr	r3, [r3, #0]
    28cc:	2201      	movs	r2, #1
    28ce:	751a      	strb	r2, [r3, #20]
}
    28d0:	46c0      	nop			; (mov r8, r8)
    28d2:	46bd      	mov	sp, r7
    28d4:	b002      	add	sp, #8
    28d6:	bd80      	pop	{r7, pc}

000028d8 <_ZN6SERCOM13initClockNVICEv>:
  }
}


void SERCOM::initClockNVIC( void )
{
    28d8:	b580      	push	{r7, lr}
    28da:	b084      	sub	sp, #16
    28dc:	af00      	add	r7, sp, #0
    28de:	6078      	str	r0, [r7, #4]
  uint8_t clockId = 0;
    28e0:	230f      	movs	r3, #15
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	2200      	movs	r2, #0
    28e6:	701a      	strb	r2, [r3, #0]
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
    28e8:	230e      	movs	r3, #14
    28ea:	18fb      	adds	r3, r7, r3
    28ec:	22fe      	movs	r2, #254	; 0xfe
    28ee:	701a      	strb	r2, [r3, #0]

  if(sercom == SERCOM0)
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	681b      	ldr	r3, [r3, #0]
    28f4:	4a40      	ldr	r2, [pc, #256]	; (29f8 <_ZN6SERCOM13initClockNVICEv+0x120>)
    28f6:	4293      	cmp	r3, r2
    28f8:	d108      	bne.n	290c <_ZN6SERCOM13initClockNVICEv+0x34>
  {
    clockId = GCM_SERCOM0_CORE;
    28fa:	230f      	movs	r3, #15
    28fc:	18fb      	adds	r3, r7, r3
    28fe:	2214      	movs	r2, #20
    2900:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM0_IRQn;
    2902:	230e      	movs	r3, #14
    2904:	18fb      	adds	r3, r7, r3
    2906:	2209      	movs	r2, #9
    2908:	701a      	strb	r2, [r3, #0]
    290a:	e044      	b.n	2996 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM1)
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	681b      	ldr	r3, [r3, #0]
    2910:	4a3a      	ldr	r2, [pc, #232]	; (29fc <_ZN6SERCOM13initClockNVICEv+0x124>)
    2912:	4293      	cmp	r3, r2
    2914:	d108      	bne.n	2928 <_ZN6SERCOM13initClockNVICEv+0x50>
  {
    clockId = GCM_SERCOM1_CORE;
    2916:	230f      	movs	r3, #15
    2918:	18fb      	adds	r3, r7, r3
    291a:	2215      	movs	r2, #21
    291c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM1_IRQn;
    291e:	230e      	movs	r3, #14
    2920:	18fb      	adds	r3, r7, r3
    2922:	220a      	movs	r2, #10
    2924:	701a      	strb	r2, [r3, #0]
    2926:	e036      	b.n	2996 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM2)
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	4a34      	ldr	r2, [pc, #208]	; (2a00 <_ZN6SERCOM13initClockNVICEv+0x128>)
    292e:	4293      	cmp	r3, r2
    2930:	d108      	bne.n	2944 <_ZN6SERCOM13initClockNVICEv+0x6c>
  {
    clockId = GCM_SERCOM2_CORE;
    2932:	230f      	movs	r3, #15
    2934:	18fb      	adds	r3, r7, r3
    2936:	2216      	movs	r2, #22
    2938:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM2_IRQn;
    293a:	230e      	movs	r3, #14
    293c:	18fb      	adds	r3, r7, r3
    293e:	220b      	movs	r2, #11
    2940:	701a      	strb	r2, [r3, #0]
    2942:	e028      	b.n	2996 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM3)
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	681b      	ldr	r3, [r3, #0]
    2948:	4a2e      	ldr	r2, [pc, #184]	; (2a04 <_ZN6SERCOM13initClockNVICEv+0x12c>)
    294a:	4293      	cmp	r3, r2
    294c:	d108      	bne.n	2960 <_ZN6SERCOM13initClockNVICEv+0x88>
  {
    clockId = GCM_SERCOM3_CORE;
    294e:	230f      	movs	r3, #15
    2950:	18fb      	adds	r3, r7, r3
    2952:	2217      	movs	r2, #23
    2954:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM3_IRQn;
    2956:	230e      	movs	r3, #14
    2958:	18fb      	adds	r3, r7, r3
    295a:	220c      	movs	r2, #12
    295c:	701a      	strb	r2, [r3, #0]
    295e:	e01a      	b.n	2996 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM4)
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	681b      	ldr	r3, [r3, #0]
    2964:	4a28      	ldr	r2, [pc, #160]	; (2a08 <_ZN6SERCOM13initClockNVICEv+0x130>)
    2966:	4293      	cmp	r3, r2
    2968:	d108      	bne.n	297c <_ZN6SERCOM13initClockNVICEv+0xa4>
  {
    clockId = GCM_SERCOM4_CORE;
    296a:	230f      	movs	r3, #15
    296c:	18fb      	adds	r3, r7, r3
    296e:	2218      	movs	r2, #24
    2970:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM4_IRQn;
    2972:	230e      	movs	r3, #14
    2974:	18fb      	adds	r3, r7, r3
    2976:	220d      	movs	r2, #13
    2978:	701a      	strb	r2, [r3, #0]
    297a:	e00c      	b.n	2996 <_ZN6SERCOM13initClockNVICEv+0xbe>
  }
  else if(sercom == SERCOM5)
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	4a22      	ldr	r2, [pc, #136]	; (2a0c <_ZN6SERCOM13initClockNVICEv+0x134>)
    2982:	4293      	cmp	r3, r2
    2984:	d107      	bne.n	2996 <_ZN6SERCOM13initClockNVICEv+0xbe>
  {
    clockId = GCM_SERCOM5_CORE;
    2986:	230f      	movs	r3, #15
    2988:	18fb      	adds	r3, r7, r3
    298a:	2219      	movs	r2, #25
    298c:	701a      	strb	r2, [r3, #0]
    IdNvic = SERCOM5_IRQn;
    298e:	230e      	movs	r3, #14
    2990:	18fb      	adds	r3, r7, r3
    2992:	220e      	movs	r2, #14
    2994:	701a      	strb	r2, [r3, #0]
  }

  if ( IdNvic == PendSV_IRQn )
    2996:	230e      	movs	r3, #14
    2998:	18fb      	adds	r3, r7, r3
    299a:	781b      	ldrb	r3, [r3, #0]
    299c:	b25b      	sxtb	r3, r3
    299e:	3302      	adds	r3, #2
    29a0:	d025      	beq.n	29ee <_ZN6SERCOM13initClockNVICEv+0x116>
    // We got a problem here
    return ;
  }

  // Setting NVIC
  NVIC_EnableIRQ(IdNvic);
    29a2:	230e      	movs	r3, #14
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	781b      	ldrb	r3, [r3, #0]
    29a8:	b25b      	sxtb	r3, r3
    29aa:	0018      	movs	r0, r3
    29ac:	f7ff fd36 	bl	241c <NVIC_EnableIRQ>
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */
    29b0:	230e      	movs	r3, #14
    29b2:	18fb      	adds	r3, r7, r3
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	b25b      	sxtb	r3, r3
    29b8:	2103      	movs	r1, #3
    29ba:	0018      	movs	r0, r3
    29bc:	f7ff fd44 	bl	2448 <NVIC_SetPriority>

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    29c0:	4913      	ldr	r1, [pc, #76]	; (2a10 <_ZN6SERCOM13initClockNVICEv+0x138>)
    29c2:	230f      	movs	r3, #15
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	b29b      	uxth	r3, r3
    29ca:	223f      	movs	r2, #63	; 0x3f
    29cc:	4013      	ands	r3, r2
    29ce:	b29b      	uxth	r3, r3
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    29d0:	2280      	movs	r2, #128	; 0x80
    29d2:	01d2      	lsls	r2, r2, #7
    29d4:	4313      	orrs	r3, r2
    29d6:	b29b      	uxth	r3, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    29d8:	804b      	strh	r3, [r1, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    29da:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <_ZN6SERCOM13initClockNVICEv+0x138>)
    29dc:	785b      	ldrb	r3, [r3, #1]
    29de:	b2db      	uxtb	r3, r3
    29e0:	b25b      	sxtb	r3, r3
    29e2:	b2db      	uxtb	r3, r3
    29e4:	09db      	lsrs	r3, r3, #7
    29e6:	b2db      	uxtb	r3, r3
    29e8:	2b00      	cmp	r3, #0
    29ea:	d001      	beq.n	29f0 <_ZN6SERCOM13initClockNVICEv+0x118>
    29ec:	e7f5      	b.n	29da <_ZN6SERCOM13initClockNVICEv+0x102>
    return ;
    29ee:	46c0      	nop			; (mov r8, r8)
  {
    /* Wait for synchronization */
  }
}
    29f0:	46bd      	mov	sp, r7
    29f2:	b004      	add	sp, #16
    29f4:	bd80      	pop	{r7, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	42000800 	.word	0x42000800
    29fc:	42000c00 	.word	0x42000c00
    2a00:	42001000 	.word	0x42001000
    2a04:	42001400 	.word	0x42001400
    2a08:	42001800 	.word	0x42001800
    2a0c:	42001c00 	.word	0x42001c00
    2a10:	40000c00 	.word	0x40000c00

00002a14 <_ZN14HardwareSerialC1Ev>:
	HardwareSerial(){};
    2a14:	b580      	push	{r7, lr}
    2a16:	b082      	sub	sp, #8
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	0018      	movs	r0, r3
    2a20:	f7fd ff5a 	bl	8d8 <_ZN6StreamC1Ev>
    2a24:	4a03      	ldr	r2, [pc, #12]	; (2a34 <_ZN14HardwareSerialC1Ev+0x20>)
    2a26:	687b      	ldr	r3, [r7, #4]
    2a28:	601a      	str	r2, [r3, #0]
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	0018      	movs	r0, r3
    2a2e:	46bd      	mov	sp, r7
    2a30:	b002      	add	sp, #8
    2a32:	bd80      	pop	{r7, pc}
    2a34:	0000370c 	.word	0x0000370c

00002a38 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	6078      	str	r0, [r7, #4]
    2a40:	2301      	movs	r3, #1
    2a42:	0018      	movs	r0, r3
    2a44:	46bd      	mov	sp, r7
    2a46:	b002      	add	sp, #8
    2a48:	bd80      	pop	{r7, pc}
	...

00002a4c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:

#include "Uart.h"
#include "Arduino.h"
#include "wiring_private.h"

Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b084      	sub	sp, #16
    2a50:	af00      	add	r7, sp, #0
    2a52:	60f8      	str	r0, [r7, #12]
    2a54:	60b9      	str	r1, [r7, #8]
    2a56:	0019      	movs	r1, r3
    2a58:	1dfb      	adds	r3, r7, #7
    2a5a:	701a      	strb	r2, [r3, #0]
    2a5c:	1dbb      	adds	r3, r7, #6
    2a5e:	1c0a      	adds	r2, r1, #0
    2a60:	701a      	strb	r2, [r3, #0]
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	0018      	movs	r0, r3
    2a66:	f7ff ffd5 	bl	2a14 <_ZN14HardwareSerialC1Ev>
    2a6a:	4a15      	ldr	r2, [pc, #84]	; (2ac0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x74>)
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	601a      	str	r2, [r3, #0]
    2a70:	68fb      	ldr	r3, [r7, #12]
    2a72:	3314      	adds	r3, #20
    2a74:	0018      	movs	r0, r3
    2a76:	f000 f9f5 	bl	2e64 <_ZN10RingBufferC1Ev>
    2a7a:	68fb      	ldr	r3, [r7, #12]
    2a7c:	335c      	adds	r3, #92	; 0x5c
    2a7e:	0018      	movs	r0, r3
    2a80:	f000 f9f0 	bl	2e64 <_ZN10RingBufferC1Ev>
{
  sercom = _s;
    2a84:	68fb      	ldr	r3, [r7, #12]
    2a86:	68ba      	ldr	r2, [r7, #8]
    2a88:	611a      	str	r2, [r3, #16]
  uc_pinRX = _pinRX;
    2a8a:	68fb      	ldr	r3, [r7, #12]
    2a8c:	1dfa      	adds	r2, r7, #7
    2a8e:	21a4      	movs	r1, #164	; 0xa4
    2a90:	7812      	ldrb	r2, [r2, #0]
    2a92:	545a      	strb	r2, [r3, r1]
  uc_pinTX = _pinTX;
    2a94:	68fb      	ldr	r3, [r7, #12]
    2a96:	1dba      	adds	r2, r7, #6
    2a98:	21a5      	movs	r1, #165	; 0xa5
    2a9a:	7812      	ldrb	r2, [r2, #0]
    2a9c:	545a      	strb	r2, [r3, r1]
  uc_padRX=_padRX ;
    2a9e:	68fb      	ldr	r3, [r7, #12]
    2aa0:	2218      	movs	r2, #24
    2aa2:	18ba      	adds	r2, r7, r2
    2aa4:	21a6      	movs	r1, #166	; 0xa6
    2aa6:	7812      	ldrb	r2, [r2, #0]
    2aa8:	545a      	strb	r2, [r3, r1]
  uc_padTX=_padTX;
    2aaa:	68fb      	ldr	r3, [r7, #12]
    2aac:	221c      	movs	r2, #28
    2aae:	18ba      	adds	r2, r7, r2
    2ab0:	21a7      	movs	r1, #167	; 0xa7
    2ab2:	7812      	ldrb	r2, [r2, #0]
    2ab4:	545a      	strb	r2, [r3, r1]
}
    2ab6:	68fb      	ldr	r3, [r7, #12]
    2ab8:	0018      	movs	r0, r3
    2aba:	46bd      	mov	sp, r7
    2abc:	b004      	add	sp, #16
    2abe:	bd80      	pop	{r7, pc}
    2ac0:	00003758 	.word	0x00003758

00002ac4 <_ZN4Uart5beginEm>:

void Uart::begin(unsigned long baudrate)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b082      	sub	sp, #8
    2ac8:	af00      	add	r7, sp, #0
    2aca:	6078      	str	r0, [r7, #4]
    2acc:	6039      	str	r1, [r7, #0]
  begin(baudrate, SERIAL_8N1);
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	681b      	ldr	r3, [r3, #0]
    2ad2:	3320      	adds	r3, #32
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	4a04      	ldr	r2, [pc, #16]	; (2ae8 <_ZN4Uart5beginEm+0x24>)
    2ad8:	6839      	ldr	r1, [r7, #0]
    2ada:	6878      	ldr	r0, [r7, #4]
    2adc:	4798      	blx	r3
}
    2ade:	46c0      	nop			; (mov r8, r8)
    2ae0:	46bd      	mov	sp, r7
    2ae2:	b002      	add	sp, #8
    2ae4:	bd80      	pop	{r7, pc}
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	00000413 	.word	0x00000413

00002aec <_ZN4Uart5beginEmt>:

void Uart::begin(unsigned long baudrate, uint16_t config)
{
    2aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aee:	b087      	sub	sp, #28
    2af0:	af02      	add	r7, sp, #8
    2af2:	60f8      	str	r0, [r7, #12]
    2af4:	60b9      	str	r1, [r7, #8]
    2af6:	1dbb      	adds	r3, r7, #6
    2af8:	801a      	strh	r2, [r3, #0]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2afa:	68fb      	ldr	r3, [r7, #12]
    2afc:	22a4      	movs	r2, #164	; 0xa4
    2afe:	5c9b      	ldrb	r3, [r3, r2]
    2b00:	0018      	movs	r0, r3
    2b02:	68fb      	ldr	r3, [r7, #12]
    2b04:	22a4      	movs	r2, #164	; 0xa4
    2b06:	5c9b      	ldrb	r3, [r3, r2]
    2b08:	0019      	movs	r1, r3
    2b0a:	4a2f      	ldr	r2, [pc, #188]	; (2bc8 <_ZN4Uart5beginEmt+0xdc>)
    2b0c:	000b      	movs	r3, r1
    2b0e:	005b      	lsls	r3, r3, #1
    2b10:	185b      	adds	r3, r3, r1
    2b12:	00db      	lsls	r3, r3, #3
    2b14:	18d3      	adds	r3, r2, r3
    2b16:	3308      	adds	r3, #8
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	b25b      	sxtb	r3, r3
    2b1c:	0019      	movs	r1, r3
    2b1e:	f7ff fa2b 	bl	1f78 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    2b22:	68fb      	ldr	r3, [r7, #12]
    2b24:	22a5      	movs	r2, #165	; 0xa5
    2b26:	5c9b      	ldrb	r3, [r3, r2]
    2b28:	0018      	movs	r0, r3
    2b2a:	68fb      	ldr	r3, [r7, #12]
    2b2c:	22a5      	movs	r2, #165	; 0xa5
    2b2e:	5c9b      	ldrb	r3, [r3, r2]
    2b30:	0019      	movs	r1, r3
    2b32:	4a25      	ldr	r2, [pc, #148]	; (2bc8 <_ZN4Uart5beginEmt+0xdc>)
    2b34:	000b      	movs	r3, r1
    2b36:	005b      	lsls	r3, r3, #1
    2b38:	185b      	adds	r3, r3, r1
    2b3a:	00db      	lsls	r3, r3, #3
    2b3c:	18d3      	adds	r3, r2, r3
    2b3e:	3308      	adds	r3, #8
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	b25b      	sxtb	r3, r3
    2b44:	0019      	movs	r1, r3
    2b46:	f7ff fa17 	bl	1f78 <pinPeripheral>

  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2b4a:	68fb      	ldr	r3, [r7, #12]
    2b4c:	6918      	ldr	r0, [r3, #16]
    2b4e:	68bb      	ldr	r3, [r7, #8]
    2b50:	2201      	movs	r2, #1
    2b52:	2101      	movs	r1, #1
    2b54:	f7ff fcf4 	bl	2540 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    2b58:	68fb      	ldr	r3, [r7, #12]
    2b5a:	691c      	ldr	r4, [r3, #16]
    2b5c:	1dbb      	adds	r3, r7, #6
    2b5e:	881a      	ldrh	r2, [r3, #0]
    2b60:	68fb      	ldr	r3, [r7, #12]
    2b62:	0011      	movs	r1, r2
    2b64:	0018      	movs	r0, r3
    2b66:	f000 f942 	bl	2dee <_ZN4Uart15extractCharSizeEt>
    2b6a:	0003      	movs	r3, r0
    2b6c:	001d      	movs	r5, r3
    2b6e:	1dbb      	adds	r3, r7, #6
    2b70:	881a      	ldrh	r2, [r3, #0]
    2b72:	68fb      	ldr	r3, [r7, #12]
    2b74:	0011      	movs	r1, r2
    2b76:	0018      	movs	r0, r3
    2b78:	f000 f95c 	bl	2e34 <_ZN4Uart13extractParityEt>
    2b7c:	0003      	movs	r3, r0
    2b7e:	001e      	movs	r6, r3
    2b80:	1dbb      	adds	r3, r7, #6
    2b82:	881a      	ldrh	r2, [r3, #0]
    2b84:	68fb      	ldr	r3, [r7, #12]
    2b86:	0011      	movs	r1, r2
    2b88:	0018      	movs	r0, r3
    2b8a:	f000 f91c 	bl	2dc6 <_ZN4Uart16extractNbStopBitEt>
    2b8e:	0003      	movs	r3, r0
    2b90:	9300      	str	r3, [sp, #0]
    2b92:	0033      	movs	r3, r6
    2b94:	2201      	movs	r2, #1
    2b96:	0029      	movs	r1, r5
    2b98:	0020      	movs	r0, r4
    2b9a:	f7ff fd45 	bl	2628 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    2b9e:	68fb      	ldr	r3, [r7, #12]
    2ba0:	6918      	ldr	r0, [r3, #16]
    2ba2:	68fb      	ldr	r3, [r7, #12]
    2ba4:	22a7      	movs	r2, #167	; 0xa7
    2ba6:	5c99      	ldrb	r1, [r3, r2]
    2ba8:	68fb      	ldr	r3, [r7, #12]
    2baa:	22a6      	movs	r2, #166	; 0xa6
    2bac:	5c9b      	ldrb	r3, [r3, r2]
    2bae:	001a      	movs	r2, r3
    2bb0:	f7ff fd7e 	bl	26b0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>

  sercom->enableUART();
    2bb4:	68fb      	ldr	r3, [r7, #12]
    2bb6:	691b      	ldr	r3, [r3, #16]
    2bb8:	0018      	movs	r0, r3
    2bba:	f7ff fdcc 	bl	2756 <_ZN6SERCOM10enableUARTEv>
}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	46bd      	mov	sp, r7
    2bc2:	b005      	add	sp, #20
    2bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	00003284 	.word	0x00003284

00002bcc <_ZN4Uart3endEv>:

void Uart::end()
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b082      	sub	sp, #8
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	6078      	str	r0, [r7, #4]
  sercom->resetUART();
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	691b      	ldr	r3, [r3, #16]
    2bd8:	0018      	movs	r0, r3
    2bda:	f7ff fd98 	bl	270e <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	3314      	adds	r3, #20
    2be2:	0018      	movs	r0, r3
    2be4:	f000 f973 	bl	2ece <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    2be8:	687b      	ldr	r3, [r7, #4]
    2bea:	335c      	adds	r3, #92	; 0x5c
    2bec:	0018      	movs	r0, r3
    2bee:	f000 f96e 	bl	2ece <_ZN10RingBuffer5clearEv>
}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	46bd      	mov	sp, r7
    2bf6:	b002      	add	sp, #8
    2bf8:	bd80      	pop	{r7, pc}

00002bfa <_ZN4Uart5flushEv>:

void Uart::flush()
{
    2bfa:	b580      	push	{r7, lr}
    2bfc:	b082      	sub	sp, #8
    2bfe:	af00      	add	r7, sp, #0
    2c00:	6078      	str	r0, [r7, #4]
  while(txBuffer.available()); // wait until TX buffer is empty
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	335c      	adds	r3, #92	; 0x5c
    2c06:	0018      	movs	r0, r3
    2c08:	f000 f994 	bl	2f34 <_ZN10RingBuffer9availableEv>
    2c0c:	0003      	movs	r3, r0
    2c0e:	1e5a      	subs	r2, r3, #1
    2c10:	4193      	sbcs	r3, r2
    2c12:	b2db      	uxtb	r3, r3
    2c14:	2b00      	cmp	r3, #0
    2c16:	d000      	beq.n	2c1a <_ZN4Uart5flushEv+0x20>
    2c18:	e7f3      	b.n	2c02 <_ZN4Uart5flushEv+0x8>

  sercom->flushUART();
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	691b      	ldr	r3, [r3, #16]
    2c1e:	0018      	movs	r0, r3
    2c20:	f7ff fdb0 	bl	2784 <_ZN6SERCOM9flushUARTEv>
}
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46bd      	mov	sp, r7
    2c28:	b002      	add	sp, #8
    2c2a:	bd80      	pop	{r7, pc}

00002c2c <_ZN4Uart10IrqHandlerEv>:

void Uart::IrqHandler()
{
    2c2c:	b590      	push	{r4, r7, lr}
    2c2e:	b085      	sub	sp, #20
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
  if (sercom->availableDataUART()) {
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	691b      	ldr	r3, [r3, #16]
    2c38:	0018      	movs	r0, r3
    2c3a:	f7ff fdc9 	bl	27d0 <_ZN6SERCOM17availableDataUARTEv>
    2c3e:	1e03      	subs	r3, r0, #0
    2c40:	d00c      	beq.n	2c5c <_ZN4Uart10IrqHandlerEv+0x30>
    rxBuffer.store_char(sercom->readDataUART());
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	3314      	adds	r3, #20
    2c46:	001c      	movs	r4, r3
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	691b      	ldr	r3, [r3, #16]
    2c4c:	0018      	movs	r0, r3
    2c4e:	f7ff fdf8 	bl	2842 <_ZN6SERCOM12readDataUARTEv>
    2c52:	0003      	movs	r3, r0
    2c54:	0019      	movs	r1, r3
    2c56:	0020      	movs	r0, r4
    2c58:	f000 f917 	bl	2e8a <_ZN10RingBuffer10store_charEh>
  }

  if (sercom->isDataRegisterEmptyUART()) {
    2c5c:	687b      	ldr	r3, [r7, #4]
    2c5e:	691b      	ldr	r3, [r3, #16]
    2c60:	0018      	movs	r0, r3
    2c62:	f7ff fde0 	bl	2826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2c66:	1e03      	subs	r3, r0, #0
    2c68:	d022      	beq.n	2cb0 <_ZN4Uart10IrqHandlerEv+0x84>
    if (txBuffer.available()) {
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	335c      	adds	r3, #92	; 0x5c
    2c6e:	0018      	movs	r0, r3
    2c70:	f000 f960 	bl	2f34 <_ZN10RingBuffer9availableEv>
    2c74:	0003      	movs	r3, r0
    2c76:	1e5a      	subs	r2, r3, #1
    2c78:	4193      	sbcs	r3, r2
    2c7a:	b2db      	uxtb	r3, r3
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d012      	beq.n	2ca6 <_ZN4Uart10IrqHandlerEv+0x7a>
      uint8_t data = txBuffer.read_char();
    2c80:	687b      	ldr	r3, [r7, #4]
    2c82:	335c      	adds	r3, #92	; 0x5c
    2c84:	0018      	movs	r0, r3
    2c86:	f000 f930 	bl	2eea <_ZN10RingBuffer9read_charEv>
    2c8a:	0002      	movs	r2, r0
    2c8c:	230f      	movs	r3, #15
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	701a      	strb	r2, [r3, #0]

      sercom->writeDataUART(data);
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	691a      	ldr	r2, [r3, #16]
    2c96:	230f      	movs	r3, #15
    2c98:	18fb      	adds	r3, r7, r3
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	0019      	movs	r1, r3
    2c9e:	0010      	movs	r0, r2
    2ca0:	f7ff fdde 	bl	2860 <_ZN6SERCOM13writeDataUARTEh>
    2ca4:	e004      	b.n	2cb0 <_ZN4Uart10IrqHandlerEv+0x84>
    } else {
      sercom->disableDataRegisterEmptyInterruptUART();
    2ca6:	687b      	ldr	r3, [r7, #4]
    2ca8:	691b      	ldr	r3, [r3, #16]
    2caa:	0018      	movs	r0, r3
    2cac:	f7ff fe08 	bl	28c0 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    }
  }

  if (sercom->isUARTError()) {
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	691b      	ldr	r3, [r3, #16]
    2cb4:	0018      	movs	r0, r3
    2cb6:	f7ff fd99 	bl	27ec <_ZN6SERCOM11isUARTErrorEv>
    2cba:	1e03      	subs	r3, r0, #0
    2cbc:	d009      	beq.n	2cd2 <_ZN4Uart10IrqHandlerEv+0xa6>
    sercom->acknowledgeUARTError();
    2cbe:	687b      	ldr	r3, [r7, #4]
    2cc0:	691b      	ldr	r3, [r3, #16]
    2cc2:	0018      	movs	r0, r3
    2cc4:	f7ff fda0 	bl	2808 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    // TODO: if (sercom->isBufferOverflowErrorUART()) ....
    // TODO: if (sercom->isFrameErrorUART()) ....
    // TODO: if (sercom->isParityErrorUART()) ....
    sercom->clearStatusUART();
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	691b      	ldr	r3, [r3, #16]
    2ccc:	0018      	movs	r0, r3
    2cce:	f7ff fd73 	bl	27b8 <_ZN6SERCOM15clearStatusUARTEv>
  }
}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	46bd      	mov	sp, r7
    2cd6:	b005      	add	sp, #20
    2cd8:	bd90      	pop	{r4, r7, pc}

00002cda <_ZN4Uart9availableEv>:

int Uart::available()
{
    2cda:	b580      	push	{r7, lr}
    2cdc:	b082      	sub	sp, #8
    2cde:	af00      	add	r7, sp, #0
    2ce0:	6078      	str	r0, [r7, #4]
  return rxBuffer.available();
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	3314      	adds	r3, #20
    2ce6:	0018      	movs	r0, r3
    2ce8:	f000 f924 	bl	2f34 <_ZN10RingBuffer9availableEv>
    2cec:	0003      	movs	r3, r0
}
    2cee:	0018      	movs	r0, r3
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b002      	add	sp, #8
    2cf4:	bd80      	pop	{r7, pc}

00002cf6 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    2cf6:	b580      	push	{r7, lr}
    2cf8:	b082      	sub	sp, #8
    2cfa:	af00      	add	r7, sp, #0
    2cfc:	6078      	str	r0, [r7, #4]
  return txBuffer.availableForStore();
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	335c      	adds	r3, #92	; 0x5c
    2d02:	0018      	movs	r0, r3
    2d04:	f000 f92b 	bl	2f5e <_ZN10RingBuffer17availableForStoreEv>
    2d08:	0003      	movs	r3, r0
}
    2d0a:	0018      	movs	r0, r3
    2d0c:	46bd      	mov	sp, r7
    2d0e:	b002      	add	sp, #8
    2d10:	bd80      	pop	{r7, pc}

00002d12 <_ZN4Uart4peekEv>:

int Uart::peek()
{
    2d12:	b580      	push	{r7, lr}
    2d14:	b082      	sub	sp, #8
    2d16:	af00      	add	r7, sp, #0
    2d18:	6078      	str	r0, [r7, #4]
  return rxBuffer.peek();
    2d1a:	687b      	ldr	r3, [r7, #4]
    2d1c:	3314      	adds	r3, #20
    2d1e:	0018      	movs	r0, r3
    2d20:	f000 f939 	bl	2f96 <_ZN10RingBuffer4peekEv>
    2d24:	0003      	movs	r3, r0
}
    2d26:	0018      	movs	r0, r3
    2d28:	46bd      	mov	sp, r7
    2d2a:	b002      	add	sp, #8
    2d2c:	bd80      	pop	{r7, pc}

00002d2e <_ZN4Uart4readEv>:

int Uart::read()
{
    2d2e:	b580      	push	{r7, lr}
    2d30:	b082      	sub	sp, #8
    2d32:	af00      	add	r7, sp, #0
    2d34:	6078      	str	r0, [r7, #4]
  return rxBuffer.read_char();
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	3314      	adds	r3, #20
    2d3a:	0018      	movs	r0, r3
    2d3c:	f000 f8d5 	bl	2eea <_ZN10RingBuffer9read_charEv>
    2d40:	0003      	movs	r3, r0
}
    2d42:	0018      	movs	r0, r3
    2d44:	46bd      	mov	sp, r7
    2d46:	b002      	add	sp, #8
    2d48:	bd80      	pop	{r7, pc}

00002d4a <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    2d4a:	b580      	push	{r7, lr}
    2d4c:	b082      	sub	sp, #8
    2d4e:	af00      	add	r7, sp, #0
    2d50:	6078      	str	r0, [r7, #4]
    2d52:	000a      	movs	r2, r1
    2d54:	1cfb      	adds	r3, r7, #3
    2d56:	701a      	strb	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	691b      	ldr	r3, [r3, #16]
    2d5c:	0018      	movs	r0, r3
    2d5e:	f7ff fd62 	bl	2826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2d62:	1e03      	subs	r3, r0, #0
    2d64:	d008      	beq.n	2d78 <_ZN4Uart5writeEh+0x2e>
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	335c      	adds	r3, #92	; 0x5c
    2d6a:	0018      	movs	r0, r3
    2d6c:	f000 f8e2 	bl	2f34 <_ZN10RingBuffer9availableEv>
    2d70:	1e03      	subs	r3, r0, #0
    2d72:	d101      	bne.n	2d78 <_ZN4Uart5writeEh+0x2e>
    2d74:	2301      	movs	r3, #1
    2d76:	e000      	b.n	2d7a <_ZN4Uart5writeEh+0x30>
    2d78:	2300      	movs	r3, #0
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d008      	beq.n	2d90 <_ZN4Uart5writeEh+0x46>
    sercom->writeDataUART(data);
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	691a      	ldr	r2, [r3, #16]
    2d82:	1cfb      	adds	r3, r7, #3
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	0019      	movs	r1, r3
    2d88:	0010      	movs	r0, r2
    2d8a:	f7ff fd69 	bl	2860 <_ZN6SERCOM13writeDataUARTEh>
    2d8e:	e015      	b.n	2dbc <_ZN4Uart5writeEh+0x72>
  } else {
    while(txBuffer.isFull()); // spin lock until a spot opens up in the buffer
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	335c      	adds	r3, #92	; 0x5c
    2d94:	0018      	movs	r0, r3
    2d96:	f000 f920 	bl	2fda <_ZN10RingBuffer6isFullEv>
    2d9a:	1e03      	subs	r3, r0, #0
    2d9c:	d000      	beq.n	2da0 <_ZN4Uart5writeEh+0x56>
    2d9e:	e7f7      	b.n	2d90 <_ZN4Uart5writeEh+0x46>

    txBuffer.store_char(data);
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	335c      	adds	r3, #92	; 0x5c
    2da4:	001a      	movs	r2, r3
    2da6:	1cfb      	adds	r3, r7, #3
    2da8:	781b      	ldrb	r3, [r3, #0]
    2daa:	0019      	movs	r1, r3
    2dac:	0010      	movs	r0, r2
    2dae:	f000 f86c 	bl	2e8a <_ZN10RingBuffer10store_charEh>

    sercom->enableDataRegisterEmptyInterruptUART();
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	691b      	ldr	r3, [r3, #16]
    2db6:	0018      	movs	r0, r3
    2db8:	f7ff fd70 	bl	289c <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
  }

  return 1;
    2dbc:	2301      	movs	r3, #1
}
    2dbe:	0018      	movs	r0, r3
    2dc0:	46bd      	mov	sp, r7
    2dc2:	b002      	add	sp, #8
    2dc4:	bd80      	pop	{r7, pc}

00002dc6 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
    2dc6:	b580      	push	{r7, lr}
    2dc8:	b082      	sub	sp, #8
    2dca:	af00      	add	r7, sp, #0
    2dcc:	6078      	str	r0, [r7, #4]
    2dce:	000a      	movs	r2, r1
    2dd0:	1cbb      	adds	r3, r7, #2
    2dd2:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_STOP_BIT_MASK)
    2dd4:	1cbb      	adds	r3, r7, #2
    2dd6:	881b      	ldrh	r3, [r3, #0]
    2dd8:	22f0      	movs	r2, #240	; 0xf0
    2dda:	4013      	ands	r3, r2
    2ddc:	2b30      	cmp	r3, #48	; 0x30
    2dde:	d001      	beq.n	2de4 <_ZN4Uart16extractNbStopBitEt+0x1e>
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    2de0:	2300      	movs	r3, #0
    2de2:	e000      	b.n	2de6 <_ZN4Uart16extractNbStopBitEt+0x20>

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
    2de4:	2301      	movs	r3, #1
  }
}
    2de6:	0018      	movs	r0, r3
    2de8:	46bd      	mov	sp, r7
    2dea:	b002      	add	sp, #8
    2dec:	bd80      	pop	{r7, pc}

00002dee <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
    2dee:	b580      	push	{r7, lr}
    2df0:	b082      	sub	sp, #8
    2df2:	af00      	add	r7, sp, #0
    2df4:	6078      	str	r0, [r7, #4]
    2df6:	000a      	movs	r2, r1
    2df8:	1cbb      	adds	r3, r7, #2
    2dfa:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_DATA_MASK)
    2dfc:	1cbb      	adds	r3, r7, #2
    2dfe:	881a      	ldrh	r2, [r3, #0]
    2e00:	23f0      	movs	r3, #240	; 0xf0
    2e02:	011b      	lsls	r3, r3, #4
    2e04:	4013      	ands	r3, r2
    2e06:	2280      	movs	r2, #128	; 0x80
    2e08:	0092      	lsls	r2, r2, #2
    2e0a:	4293      	cmp	r3, r2
    2e0c:	d009      	beq.n	2e22 <_ZN4Uart15extractCharSizeEt+0x34>
    2e0e:	22c0      	movs	r2, #192	; 0xc0
    2e10:	0092      	lsls	r2, r2, #2
    2e12:	4293      	cmp	r3, r2
    2e14:	d007      	beq.n	2e26 <_ZN4Uart15extractCharSizeEt+0x38>
    2e16:	2280      	movs	r2, #128	; 0x80
    2e18:	0052      	lsls	r2, r2, #1
    2e1a:	4293      	cmp	r3, r2
    2e1c:	d105      	bne.n	2e2a <_ZN4Uart15extractCharSizeEt+0x3c>
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;
    2e1e:	2305      	movs	r3, #5
    2e20:	e004      	b.n	2e2c <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    2e22:	2306      	movs	r3, #6
    2e24:	e002      	b.n	2e2c <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    2e26:	2307      	movs	r3, #7
    2e28:	e000      	b.n	2e2c <_ZN4Uart15extractCharSizeEt+0x3e>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    2e2a:	2300      	movs	r3, #0

  }
}
    2e2c:	0018      	movs	r0, r3
    2e2e:	46bd      	mov	sp, r7
    2e30:	b002      	add	sp, #8
    2e32:	bd80      	pop	{r7, pc}

00002e34 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
    2e34:	b580      	push	{r7, lr}
    2e36:	b082      	sub	sp, #8
    2e38:	af00      	add	r7, sp, #0
    2e3a:	6078      	str	r0, [r7, #4]
    2e3c:	000a      	movs	r2, r1
    2e3e:	1cbb      	adds	r3, r7, #2
    2e40:	801a      	strh	r2, [r3, #0]
  switch(config & HARDSER_PARITY_MASK)
    2e42:	1cbb      	adds	r3, r7, #2
    2e44:	881b      	ldrh	r3, [r3, #0]
    2e46:	220f      	movs	r2, #15
    2e48:	4013      	ands	r3, r2
    2e4a:	2b01      	cmp	r3, #1
    2e4c:	d003      	beq.n	2e56 <_ZN4Uart13extractParityEt+0x22>
    2e4e:	2b02      	cmp	r3, #2
    2e50:	d003      	beq.n	2e5a <_ZN4Uart13extractParityEt+0x26>
  {
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;
    2e52:	2302      	movs	r3, #2
    2e54:	e002      	b.n	2e5c <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    2e56:	2300      	movs	r3, #0
    2e58:	e000      	b.n	2e5c <_ZN4Uart13extractParityEt+0x28>

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
    2e5a:	2301      	movs	r3, #1
  }
}
    2e5c:	0018      	movs	r0, r3
    2e5e:	46bd      	mov	sp, r7
    2e60:	b002      	add	sp, #8
    2e62:	bd80      	pop	{r7, pc}

00002e64 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    2e64:	b580      	push	{r7, lr}
    2e66:	b082      	sub	sp, #8
    2e68:	af00      	add	r7, sp, #0
    2e6a:	6078      	str	r0, [r7, #4]
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	2240      	movs	r2, #64	; 0x40
    2e70:	2100      	movs	r1, #0
    2e72:	0018      	movs	r0, r3
    2e74:	f000 f995 	bl	31a2 <memset>
    clear();
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	0018      	movs	r0, r3
    2e7c:	f000 f827 	bl	2ece <_ZN10RingBuffer5clearEv>
}
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	0018      	movs	r0, r3
    2e84:	46bd      	mov	sp, r7
    2e86:	b002      	add	sp, #8
    2e88:	bd80      	pop	{r7, pc}

00002e8a <_ZN10RingBuffer10store_charEh>:

void RingBuffer::store_char( uint8_t c )
{
    2e8a:	b580      	push	{r7, lr}
    2e8c:	b084      	sub	sp, #16
    2e8e:	af00      	add	r7, sp, #0
    2e90:	6078      	str	r0, [r7, #4]
    2e92:	000a      	movs	r2, r1
    2e94:	1cfb      	adds	r3, r7, #3
    2e96:	701a      	strb	r2, [r3, #0]
  int i = nextIndex(_iHead);
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	0011      	movs	r1, r2
    2ea0:	0018      	movs	r0, r3
    2ea2:	f000 f88d 	bl	2fc0 <_ZN10RingBuffer9nextIndexEi>
    2ea6:	0003      	movs	r3, r0
    2ea8:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2eae:	68fb      	ldr	r3, [r7, #12]
    2eb0:	429a      	cmp	r2, r3
    2eb2:	d008      	beq.n	2ec6 <_ZN10RingBuffer10store_charEh+0x3c>
  {
    _aucBuffer[_iHead] = c ;
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2eb8:	687a      	ldr	r2, [r7, #4]
    2eba:	1cf9      	adds	r1, r7, #3
    2ebc:	7809      	ldrb	r1, [r1, #0]
    2ebe:	54d1      	strb	r1, [r2, r3]
    _iHead = i ;
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	46bd      	mov	sp, r7
    2eca:	b004      	add	sp, #16
    2ecc:	bd80      	pop	{r7, pc}

00002ece <_ZN10RingBuffer5clearEv>:

void RingBuffer::clear()
{
    2ece:	b580      	push	{r7, lr}
    2ed0:	b082      	sub	sp, #8
    2ed2:	af00      	add	r7, sp, #0
    2ed4:	6078      	str	r0, [r7, #4]
	_iHead = 0;
    2ed6:	687b      	ldr	r3, [r7, #4]
    2ed8:	2200      	movs	r2, #0
    2eda:	641a      	str	r2, [r3, #64]	; 0x40
	_iTail = 0;
    2edc:	687b      	ldr	r3, [r7, #4]
    2ede:	2200      	movs	r2, #0
    2ee0:	645a      	str	r2, [r3, #68]	; 0x44
}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	46bd      	mov	sp, r7
    2ee6:	b002      	add	sp, #8
    2ee8:	bd80      	pop	{r7, pc}

00002eea <_ZN10RingBuffer9read_charEv>:

int RingBuffer::read_char()
{
    2eea:	b580      	push	{r7, lr}
    2eec:	b084      	sub	sp, #16
    2eee:	af00      	add	r7, sp, #0
    2ef0:	6078      	str	r0, [r7, #4]
	if(_iTail == _iHead)
    2ef2:	687b      	ldr	r3, [r7, #4]
    2ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2ef6:	687b      	ldr	r3, [r7, #4]
    2ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2efa:	429a      	cmp	r2, r3
    2efc:	d102      	bne.n	2f04 <_ZN10RingBuffer9read_charEv+0x1a>
		return -1;
    2efe:	2301      	movs	r3, #1
    2f00:	425b      	negs	r3, r3
    2f02:	e013      	b.n	2f2c <_ZN10RingBuffer9read_charEv+0x42>

	uint8_t value = _aucBuffer[_iTail];
    2f04:	687b      	ldr	r3, [r7, #4]
    2f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2f08:	230f      	movs	r3, #15
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	6879      	ldr	r1, [r7, #4]
    2f0e:	5c8a      	ldrb	r2, [r1, r2]
    2f10:	701a      	strb	r2, [r3, #0]
	_iTail = nextIndex(_iTail);
    2f12:	687b      	ldr	r3, [r7, #4]
    2f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	0011      	movs	r1, r2
    2f1a:	0018      	movs	r0, r3
    2f1c:	f000 f850 	bl	2fc0 <_ZN10RingBuffer9nextIndexEi>
    2f20:	0002      	movs	r2, r0
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	645a      	str	r2, [r3, #68]	; 0x44

	return value;
    2f26:	230f      	movs	r3, #15
    2f28:	18fb      	adds	r3, r7, r3
    2f2a:	781b      	ldrb	r3, [r3, #0]
}
    2f2c:	0018      	movs	r0, r3
    2f2e:	46bd      	mov	sp, r7
    2f30:	b004      	add	sp, #16
    2f32:	bd80      	pop	{r7, pc}

00002f34 <_ZN10RingBuffer9availableEv>:

int RingBuffer::available()
{
    2f34:	b580      	push	{r7, lr}
    2f36:	b084      	sub	sp, #16
    2f38:	af00      	add	r7, sp, #0
    2f3a:	6078      	str	r0, [r7, #4]
	int delta = _iHead - _iTail;
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f44:	1ad3      	subs	r3, r2, r3
    2f46:	60fb      	str	r3, [r7, #12]

	if(delta < 0)
    2f48:	68fb      	ldr	r3, [r7, #12]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	da02      	bge.n	2f54 <_ZN10RingBuffer9availableEv+0x20>
		return SERIAL_BUFFER_SIZE + delta;
    2f4e:	68fb      	ldr	r3, [r7, #12]
    2f50:	3340      	adds	r3, #64	; 0x40
    2f52:	e000      	b.n	2f56 <_ZN10RingBuffer9availableEv+0x22>
	else
		return delta;
    2f54:	68fb      	ldr	r3, [r7, #12]
}
    2f56:	0018      	movs	r0, r3
    2f58:	46bd      	mov	sp, r7
    2f5a:	b004      	add	sp, #16
    2f5c:	bd80      	pop	{r7, pc}

00002f5e <_ZN10RingBuffer17availableForStoreEv>:

int RingBuffer::availableForStore()
{
    2f5e:	b580      	push	{r7, lr}
    2f60:	b082      	sub	sp, #8
    2f62:	af00      	add	r7, sp, #0
    2f64:	6078      	str	r0, [r7, #4]
	if (_iHead >= _iTail)
    2f66:	687b      	ldr	r3, [r7, #4]
    2f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f6e:	429a      	cmp	r2, r3
    2f70:	db07      	blt.n	2f82 <_ZN10RingBuffer17availableForStoreEv+0x24>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2f76:	223f      	movs	r2, #63	; 0x3f
    2f78:	1ad2      	subs	r2, r2, r3
    2f7a:	687b      	ldr	r3, [r7, #4]
    2f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2f7e:	18d3      	adds	r3, r2, r3
    2f80:	e005      	b.n	2f8e <_ZN10RingBuffer17availableForStoreEv+0x30>
	else
		return _iTail - _iHead - 1;
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2f8a:	1ad3      	subs	r3, r2, r3
    2f8c:	3b01      	subs	r3, #1
}
    2f8e:	0018      	movs	r0, r3
    2f90:	46bd      	mov	sp, r7
    2f92:	b002      	add	sp, #8
    2f94:	bd80      	pop	{r7, pc}

00002f96 <_ZN10RingBuffer4peekEv>:

int RingBuffer::peek()
{
    2f96:	b580      	push	{r7, lr}
    2f98:	b082      	sub	sp, #8
    2f9a:	af00      	add	r7, sp, #0
    2f9c:	6078      	str	r0, [r7, #4]
	if(_iTail == _iHead)
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2fa6:	429a      	cmp	r2, r3
    2fa8:	d102      	bne.n	2fb0 <_ZN10RingBuffer4peekEv+0x1a>
		return -1;
    2faa:	2301      	movs	r3, #1
    2fac:	425b      	negs	r3, r3
    2fae:	e003      	b.n	2fb8 <_ZN10RingBuffer4peekEv+0x22>

	return _aucBuffer[_iTail];
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2fb4:	687a      	ldr	r2, [r7, #4]
    2fb6:	5cd3      	ldrb	r3, [r2, r3]
}
    2fb8:	0018      	movs	r0, r3
    2fba:	46bd      	mov	sp, r7
    2fbc:	b002      	add	sp, #8
    2fbe:	bd80      	pop	{r7, pc}

00002fc0 <_ZN10RingBuffer9nextIndexEi>:

int RingBuffer::nextIndex(int index)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b082      	sub	sp, #8
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	6078      	str	r0, [r7, #4]
    2fc8:	6039      	str	r1, [r7, #0]
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    2fca:	683b      	ldr	r3, [r7, #0]
    2fcc:	3301      	adds	r3, #1
    2fce:	223f      	movs	r2, #63	; 0x3f
    2fd0:	4013      	ands	r3, r2
}
    2fd2:	0018      	movs	r0, r3
    2fd4:	46bd      	mov	sp, r7
    2fd6:	b002      	add	sp, #8
    2fd8:	bd80      	pop	{r7, pc}

00002fda <_ZN10RingBuffer6isFullEv>:

bool RingBuffer::isFull()
{
    2fda:	b580      	push	{r7, lr}
    2fdc:	b082      	sub	sp, #8
    2fde:	af00      	add	r7, sp, #0
    2fe0:	6078      	str	r0, [r7, #4]
	return (nextIndex(_iHead) == _iTail);
    2fe2:	687b      	ldr	r3, [r7, #4]
    2fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	0011      	movs	r1, r2
    2fea:	0018      	movs	r0, r3
    2fec:	f7ff ffe8 	bl	2fc0 <_ZN10RingBuffer9nextIndexEi>
    2ff0:	0002      	movs	r2, r0
    2ff2:	687b      	ldr	r3, [r7, #4]
    2ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2ff6:	1ad3      	subs	r3, r2, r3
    2ff8:	425a      	negs	r2, r3
    2ffa:	4153      	adcs	r3, r2
    2ffc:	b2db      	uxtb	r3, r3
}
    2ffe:	0018      	movs	r0, r3
    3000:	46bd      	mov	sp, r7
    3002:	b002      	add	sp, #8
    3004:	bd80      	pop	{r7, pc}

00003006 <__aeabi_atexit>:
    3006:	000b      	movs	r3, r1
    3008:	b510      	push	{r4, lr}
    300a:	0001      	movs	r1, r0
    300c:	0018      	movs	r0, r3
    300e:	f000 f88d 	bl	312c <__cxa_atexit>
    3012:	bd10      	pop	{r4, pc}

00003014 <__udivsi3>:
    3014:	2200      	movs	r2, #0
    3016:	0843      	lsrs	r3, r0, #1
    3018:	428b      	cmp	r3, r1
    301a:	d374      	bcc.n	3106 <__udivsi3+0xf2>
    301c:	0903      	lsrs	r3, r0, #4
    301e:	428b      	cmp	r3, r1
    3020:	d35f      	bcc.n	30e2 <__udivsi3+0xce>
    3022:	0a03      	lsrs	r3, r0, #8
    3024:	428b      	cmp	r3, r1
    3026:	d344      	bcc.n	30b2 <__udivsi3+0x9e>
    3028:	0b03      	lsrs	r3, r0, #12
    302a:	428b      	cmp	r3, r1
    302c:	d328      	bcc.n	3080 <__udivsi3+0x6c>
    302e:	0c03      	lsrs	r3, r0, #16
    3030:	428b      	cmp	r3, r1
    3032:	d30d      	bcc.n	3050 <__udivsi3+0x3c>
    3034:	22ff      	movs	r2, #255	; 0xff
    3036:	0209      	lsls	r1, r1, #8
    3038:	ba12      	rev	r2, r2
    303a:	0c03      	lsrs	r3, r0, #16
    303c:	428b      	cmp	r3, r1
    303e:	d302      	bcc.n	3046 <__udivsi3+0x32>
    3040:	1212      	asrs	r2, r2, #8
    3042:	0209      	lsls	r1, r1, #8
    3044:	d065      	beq.n	3112 <__udivsi3+0xfe>
    3046:	0b03      	lsrs	r3, r0, #12
    3048:	428b      	cmp	r3, r1
    304a:	d319      	bcc.n	3080 <__udivsi3+0x6c>
    304c:	e000      	b.n	3050 <__udivsi3+0x3c>
    304e:	0a09      	lsrs	r1, r1, #8
    3050:	0bc3      	lsrs	r3, r0, #15
    3052:	428b      	cmp	r3, r1
    3054:	d301      	bcc.n	305a <__udivsi3+0x46>
    3056:	03cb      	lsls	r3, r1, #15
    3058:	1ac0      	subs	r0, r0, r3
    305a:	4152      	adcs	r2, r2
    305c:	0b83      	lsrs	r3, r0, #14
    305e:	428b      	cmp	r3, r1
    3060:	d301      	bcc.n	3066 <__udivsi3+0x52>
    3062:	038b      	lsls	r3, r1, #14
    3064:	1ac0      	subs	r0, r0, r3
    3066:	4152      	adcs	r2, r2
    3068:	0b43      	lsrs	r3, r0, #13
    306a:	428b      	cmp	r3, r1
    306c:	d301      	bcc.n	3072 <__udivsi3+0x5e>
    306e:	034b      	lsls	r3, r1, #13
    3070:	1ac0      	subs	r0, r0, r3
    3072:	4152      	adcs	r2, r2
    3074:	0b03      	lsrs	r3, r0, #12
    3076:	428b      	cmp	r3, r1
    3078:	d301      	bcc.n	307e <__udivsi3+0x6a>
    307a:	030b      	lsls	r3, r1, #12
    307c:	1ac0      	subs	r0, r0, r3
    307e:	4152      	adcs	r2, r2
    3080:	0ac3      	lsrs	r3, r0, #11
    3082:	428b      	cmp	r3, r1
    3084:	d301      	bcc.n	308a <__udivsi3+0x76>
    3086:	02cb      	lsls	r3, r1, #11
    3088:	1ac0      	subs	r0, r0, r3
    308a:	4152      	adcs	r2, r2
    308c:	0a83      	lsrs	r3, r0, #10
    308e:	428b      	cmp	r3, r1
    3090:	d301      	bcc.n	3096 <__udivsi3+0x82>
    3092:	028b      	lsls	r3, r1, #10
    3094:	1ac0      	subs	r0, r0, r3
    3096:	4152      	adcs	r2, r2
    3098:	0a43      	lsrs	r3, r0, #9
    309a:	428b      	cmp	r3, r1
    309c:	d301      	bcc.n	30a2 <__udivsi3+0x8e>
    309e:	024b      	lsls	r3, r1, #9
    30a0:	1ac0      	subs	r0, r0, r3
    30a2:	4152      	adcs	r2, r2
    30a4:	0a03      	lsrs	r3, r0, #8
    30a6:	428b      	cmp	r3, r1
    30a8:	d301      	bcc.n	30ae <__udivsi3+0x9a>
    30aa:	020b      	lsls	r3, r1, #8
    30ac:	1ac0      	subs	r0, r0, r3
    30ae:	4152      	adcs	r2, r2
    30b0:	d2cd      	bcs.n	304e <__udivsi3+0x3a>
    30b2:	09c3      	lsrs	r3, r0, #7
    30b4:	428b      	cmp	r3, r1
    30b6:	d301      	bcc.n	30bc <__udivsi3+0xa8>
    30b8:	01cb      	lsls	r3, r1, #7
    30ba:	1ac0      	subs	r0, r0, r3
    30bc:	4152      	adcs	r2, r2
    30be:	0983      	lsrs	r3, r0, #6
    30c0:	428b      	cmp	r3, r1
    30c2:	d301      	bcc.n	30c8 <__udivsi3+0xb4>
    30c4:	018b      	lsls	r3, r1, #6
    30c6:	1ac0      	subs	r0, r0, r3
    30c8:	4152      	adcs	r2, r2
    30ca:	0943      	lsrs	r3, r0, #5
    30cc:	428b      	cmp	r3, r1
    30ce:	d301      	bcc.n	30d4 <__udivsi3+0xc0>
    30d0:	014b      	lsls	r3, r1, #5
    30d2:	1ac0      	subs	r0, r0, r3
    30d4:	4152      	adcs	r2, r2
    30d6:	0903      	lsrs	r3, r0, #4
    30d8:	428b      	cmp	r3, r1
    30da:	d301      	bcc.n	30e0 <__udivsi3+0xcc>
    30dc:	010b      	lsls	r3, r1, #4
    30de:	1ac0      	subs	r0, r0, r3
    30e0:	4152      	adcs	r2, r2
    30e2:	08c3      	lsrs	r3, r0, #3
    30e4:	428b      	cmp	r3, r1
    30e6:	d301      	bcc.n	30ec <__udivsi3+0xd8>
    30e8:	00cb      	lsls	r3, r1, #3
    30ea:	1ac0      	subs	r0, r0, r3
    30ec:	4152      	adcs	r2, r2
    30ee:	0883      	lsrs	r3, r0, #2
    30f0:	428b      	cmp	r3, r1
    30f2:	d301      	bcc.n	30f8 <__udivsi3+0xe4>
    30f4:	008b      	lsls	r3, r1, #2
    30f6:	1ac0      	subs	r0, r0, r3
    30f8:	4152      	adcs	r2, r2
    30fa:	0843      	lsrs	r3, r0, #1
    30fc:	428b      	cmp	r3, r1
    30fe:	d301      	bcc.n	3104 <__udivsi3+0xf0>
    3100:	004b      	lsls	r3, r1, #1
    3102:	1ac0      	subs	r0, r0, r3
    3104:	4152      	adcs	r2, r2
    3106:	1a41      	subs	r1, r0, r1
    3108:	d200      	bcs.n	310c <__udivsi3+0xf8>
    310a:	4601      	mov	r1, r0
    310c:	4152      	adcs	r2, r2
    310e:	4610      	mov	r0, r2
    3110:	4770      	bx	lr
    3112:	e7ff      	b.n	3114 <__udivsi3+0x100>
    3114:	b501      	push	{r0, lr}
    3116:	2000      	movs	r0, #0
    3118:	f000 f806 	bl	3128 <__aeabi_idiv0>
    311c:	bd02      	pop	{r1, pc}
    311e:	46c0      	nop			; (mov r8, r8)

00003120 <__aeabi_uidivmod>:
    3120:	2900      	cmp	r1, #0
    3122:	d0f7      	beq.n	3114 <__udivsi3+0x100>
    3124:	e776      	b.n	3014 <__udivsi3>
    3126:	4770      	bx	lr

00003128 <__aeabi_idiv0>:
    3128:	4770      	bx	lr
    312a:	46c0      	nop			; (mov r8, r8)

0000312c <__cxa_atexit>:
    312c:	b570      	push	{r4, r5, r6, lr}
    312e:	4c05      	ldr	r4, [pc, #20]	; (3144 <__cxa_atexit+0x18>)
    3130:	0005      	movs	r5, r0
    3132:	0013      	movs	r3, r2
    3134:	1e20      	subs	r0, r4, #0
    3136:	d004      	beq.n	3142 <__cxa_atexit+0x16>
    3138:	000a      	movs	r2, r1
    313a:	2002      	movs	r0, #2
    313c:	0029      	movs	r1, r5
    313e:	e000      	b.n	3142 <__cxa_atexit+0x16>
    3140:	bf00      	nop
    3142:	bd70      	pop	{r4, r5, r6, pc}
    3144:	00000000 	.word	0x00000000

00003148 <__libc_init_array>:
    3148:	b570      	push	{r4, r5, r6, lr}
    314a:	2600      	movs	r6, #0
    314c:	4d0c      	ldr	r5, [pc, #48]	; (3180 <__libc_init_array+0x38>)
    314e:	4c0d      	ldr	r4, [pc, #52]	; (3184 <__libc_init_array+0x3c>)
    3150:	1b64      	subs	r4, r4, r5
    3152:	10a4      	asrs	r4, r4, #2
    3154:	42a6      	cmp	r6, r4
    3156:	d109      	bne.n	316c <__libc_init_array+0x24>
    3158:	2600      	movs	r6, #0
    315a:	f000 f82b 	bl	31b4 <_init>
    315e:	4d0a      	ldr	r5, [pc, #40]	; (3188 <__libc_init_array+0x40>)
    3160:	4c0a      	ldr	r4, [pc, #40]	; (318c <__libc_init_array+0x44>)
    3162:	1b64      	subs	r4, r4, r5
    3164:	10a4      	asrs	r4, r4, #2
    3166:	42a6      	cmp	r6, r4
    3168:	d105      	bne.n	3176 <__libc_init_array+0x2e>
    316a:	bd70      	pop	{r4, r5, r6, pc}
    316c:	00b3      	lsls	r3, r6, #2
    316e:	58eb      	ldr	r3, [r5, r3]
    3170:	4798      	blx	r3
    3172:	3601      	adds	r6, #1
    3174:	e7ee      	b.n	3154 <__libc_init_array+0xc>
    3176:	00b3      	lsls	r3, r6, #2
    3178:	58eb      	ldr	r3, [r5, r3]
    317a:	4798      	blx	r3
    317c:	3601      	adds	r6, #1
    317e:	e7f2      	b.n	3166 <__libc_init_array+0x1e>
    3180:	2000002c 	.word	0x2000002c
    3184:	2000002c 	.word	0x2000002c
    3188:	2000002c 	.word	0x2000002c
    318c:	20000040 	.word	0x20000040

00003190 <memcpy>:
    3190:	2300      	movs	r3, #0
    3192:	b510      	push	{r4, lr}
    3194:	429a      	cmp	r2, r3
    3196:	d100      	bne.n	319a <memcpy+0xa>
    3198:	bd10      	pop	{r4, pc}
    319a:	5ccc      	ldrb	r4, [r1, r3]
    319c:	54c4      	strb	r4, [r0, r3]
    319e:	3301      	adds	r3, #1
    31a0:	e7f8      	b.n	3194 <memcpy+0x4>

000031a2 <memset>:
    31a2:	0003      	movs	r3, r0
    31a4:	1882      	adds	r2, r0, r2
    31a6:	4293      	cmp	r3, r2
    31a8:	d100      	bne.n	31ac <memset+0xa>
    31aa:	4770      	bx	lr
    31ac:	7019      	strb	r1, [r3, #0]
    31ae:	3301      	adds	r3, #1
    31b0:	e7f9      	b.n	31a6 <memset+0x4>
	...

000031b4 <_init>:
    31b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    31ba:	bc08      	pop	{r3}
    31bc:	469e      	mov	lr, r3
    31be:	4770      	bx	lr

000031c0 <_fini>:
    31c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    31c6:	bc08      	pop	{r3}
    31c8:	469e      	mov	lr, r3
    31ca:	4770      	bx	lr

000031cc <_ZTV7Serial_>:
	...
    31d4:	0a39 0000 09fd 0000 0957 0000 09e1 0000     9.......W.......
    31e4:	0939 0000 09a5 0000 0969 0000               9.......i...

000031f0 <_ZTV6Stream>:
	...
    31f8:	23c1 0000 23c7 0000 08b5 0000 08c7 0000     .#...#..........
    3208:	23c1 0000 23c1 0000 23c1 0000 145e 0000     .#...#...#..^...
    3218:	147e 0000 149e 0000 14be 0000 14de 0000     ~...............
    3228:	1886 0000 181c 0000 1838 0000 1854 0000     ........8...T...
    3238:	186a 0000 181c 0000 001a 001a 001b 001b     j...............
    3248:	001c 001c 001d 001d 21f6 0000 2000 0000     .........!... ..
    3258:	2000 0000 2000 0000 2000 0000 2000 0000     . ... ... ... ..
    3268:	2000 0000 2000 0000 2000 0000 1fbc 0000     . ... ... ......
    3278:	1fbc 0000 1fbc 0000 1fbc 0000               ............

00003284 <g_APinDescription>:
    3284:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    3294:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    32a4:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    32b4:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    32c4:	00ff 0000 0000 00ff 0000 0000 0009 0000     ................
    32d4:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    32e4:	0000 0000 000e 0000 0004 0000 001c 0000     ................
    32f4:	00ff 0300 0300 000e 0000 0000 000f 0000     ................
    3304:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    3314:	0000 0000 0014 0000 0005 0000 001c 0000     ................
    3324:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    3334:	0005 0000 001c 0000 00ff 0003 0003 0005     ................
    3344:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    3354:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    3364:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    3374:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    3384:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    3394:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    33a4:	0000 0000 0013 0000 0004 0000 001c 0000     ................
    33b4:	00ff 0301 0301 0003 0000 0000 0011 0000     ................
    33c4:	0004 0000 000c 0000 00ff 0201 ffff 0001     ................
    33d4:	00ff 0000 0000 0000 00ff 0000 0000 0000     ................
    33e4:	00ff ffff ffff 00ff 0000 0000 0003 0000     ................
    33f4:	0001 0000 0002 0000 00ff ffff ffff 00ff     ................
    3404:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    3414:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    3424:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    3434:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    3444:	00ff ffff ffff 000c 00ff 0000 0000 0000     ................
    3454:	00ff 0000 0000 0000 00ff ffff ffff 00ff     ................
    3464:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    3474:	00ff ffff ffff 000b 0001 0000 000a 0000     ................
    3484:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    3494:	00ff 0000 0000 0000 00ff 0000 0000 0000     ................
    34a4:	00ff ffff ffff 00ff 00ff 0000 0000 0000     ................
    34b4:	00ff 0000 0000 0000 00ff ffff ffff 00ff     ................
    34c4:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    34d4:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    34e4:	0001 0000 0002 0000 0002 ffff ffff 0008     ................
    34f4:	0001 0000 0009 0000 0001 0000 0002 0000     ................
    3504:	0003 ffff ffff 0009 0000 0000 0004 0000     ................
    3514:	0001 0000 0002 0000 0004 ffff ffff 0004     ................
    3524:	0000 0000 0005 0000 0001 0000 0002 0000     ................
    3534:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    3544:	0001 0000 0002 0000 000a ffff ffff 0002     ................
    3554:	0001 0000 0003 0000 000b 0000 0004 0000     ................
    3564:	00ff ffff ffff 00ff 0000 0000 001b 0000     ................
    3574:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    3584:	0000 0000 001c 0000 0006 0000 0000 0000     ................
    3594:	00ff ffff ffff 00ff 0000 0000 0018 0000     ................
    35a4:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    35b4:	0000 0000 0019 0000 0006 0000 0000 0000     ................
    35c4:	00ff ffff ffff 00ff 0001 0000 0016 0000     ................
    35d4:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    35e4:	0001 0000 0017 0000 0003 0000 0000 0000     ................
    35f4:	00ff ffff ffff 00ff 0000 0000 0016 0000     ................
    3604:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    3614:	0000 0000 0017 0000 0002 0000 0000 0000     ................
    3624:	00ff ffff ffff 00ff 0000 0000 0013 0000     ................
    3634:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    3644:	0000 0000 0010 0000 0002 0000 0000 0000     ................
    3654:	00ff ffff ffff 00ff 0000 0000 0012 0000     ................
    3664:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    3674:	0000 0000 0011 0000 0002 0000 0000 0000     ................
    3684:	00ff ffff ffff 00ff 0000 0000 000d 0000     ................
    3694:	0004 0000 000c 0000 00ff 0001 ffff 000d     ................
    36a4:	0000 0000 0015 0000 0005 0000 000c 0000     ................
    36b4:	00ff 0003 ffff 00ff 0000 0000 0006 0000     ................
    36c4:	0004 0000 000c 0000 00ff 0100 ffff 00ff     ................
    36d4:	0000 0000 0007 0000 0004 0000 000c 0000     ................
    36e4:	00ff 0101 ffff 00ff 0000 0000 0002 0000     ................
    36f4:	0001 0000 0002 0000 0014 ffff ffff 0002     ................

00003704 <_ZTV14HardwareSerial>:
	...
    370c:	23c1 0000 23c7 0000 08b5 0000 23c1 0000     .#...#.......#..
    371c:	23c1 0000 23c1 0000 23c1 0000 2231 0000     .#...#...#..1"..
    372c:	2243 0000 2259 0000 23c1 0000               C"..Y"...#..

00003738 <_ZTV5Print>:
	...
    3740:	23c1 0000 23c7 0000 08b5 0000 08c7 0000     .#...#..........

00003750 <_ZTV4Uart>:
	...
    3758:	2d4b 0000 23c7 0000 2cf7 0000 2bfb 0000     K-...#...,...+..
    3768:	2cdb 0000 2d2f 0000 2d13 0000 2ac5 0000     .,../-...-...*..
    3778:	2aed 0000 2bcd 0000 2a39 0000               .*...+..9*..

00003784 <__EH_FRAME_BEGIN__>:
    3784:	0000 0000                                   ....

Disassembly of section .ramfunc:

00003788 <banzai>:
static void banzai() {
    3788:	b580      	push	{r7, lr}
    378a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    378c:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
    378e:	4b17      	ldr	r3, [pc, #92]	; (37ec <banzai+0x64>)
    3790:	3304      	adds	r3, #4
    3792:	4a17      	ldr	r2, [pc, #92]	; (37f0 <banzai+0x68>)
    3794:	4293      	cmp	r3, r2
    3796:	d925      	bls.n	37e4 <banzai+0x5c>
	while (!nvmReady())
    3798:	f7fc ff36 	bl	608 <nvmReady>
    379c:	0003      	movs	r3, r0
    379e:	001a      	movs	r2, r3
    37a0:	2301      	movs	r3, #1
    37a2:	4053      	eors	r3, r2
    37a4:	b2db      	uxtb	r3, r3
    37a6:	2b00      	cmp	r3, #0
    37a8:	d000      	beq.n	37ac <banzai+0x24>
    37aa:	e7f5      	b.n	3798 <banzai+0x10>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
    37ac:	4911      	ldr	r1, [pc, #68]	; (37f4 <banzai+0x6c>)
    37ae:	4b11      	ldr	r3, [pc, #68]	; (37f4 <banzai+0x6c>)
    37b0:	8b1b      	ldrh	r3, [r3, #24]
    37b2:	b29b      	uxth	r3, r3
    37b4:	2220      	movs	r2, #32
    37b6:	32ff      	adds	r2, #255	; 0xff
    37b8:	4313      	orrs	r3, r2
    37ba:	b29b      	uxth	r3, r3
    37bc:	830b      	strh	r3, [r1, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
    37be:	4b0d      	ldr	r3, [pc, #52]	; (37f4 <banzai+0x6c>)
    37c0:	4a0a      	ldr	r2, [pc, #40]	; (37ec <banzai+0x64>)
    37c2:	3204      	adds	r2, #4
    37c4:	0892      	lsrs	r2, r2, #2
    37c6:	0052      	lsls	r2, r2, #1
    37c8:	61da      	str	r2, [r3, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
    37ca:	4b0a      	ldr	r3, [pc, #40]	; (37f4 <banzai+0x6c>)
    37cc:	4a0a      	ldr	r2, [pc, #40]	; (37f8 <banzai+0x70>)
    37ce:	801a      	strh	r2, [r3, #0]
	while (!nvmReady())
    37d0:	f7fc ff1a 	bl	608 <nvmReady>
    37d4:	0003      	movs	r3, r0
    37d6:	001a      	movs	r2, r3
    37d8:	2301      	movs	r3, #1
    37da:	4053      	eors	r3, r2
    37dc:	b2db      	uxtb	r3, r3
    37de:	2b00      	cmp	r3, #0
    37e0:	d001      	beq.n	37e6 <banzai+0x5e>
    37e2:	e7f5      	b.n	37d0 <banzai+0x48>
		goto reset;
    37e4:	46c0      	nop			; (mov r8, r8)
	NVIC_SystemReset() ;
    37e6:	f7fc feff 	bl	5e8 <NVIC_SystemReset>
	while (true);
    37ea:	e7fe      	b.n	37ea <banzai+0x62>
    37ec:	00000000 	.word	0x00000000
    37f0:	00000203 	.word	0x00000203
    37f4:	41004000 	.word	0x41004000
    37f8:	ffffa502 	.word	0xffffa502
